<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>夏红林</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xiahl.top/"/>
  <updated>2016-07-09T13:46:10.563Z</updated>
  <id>http://xiahl.top/</id>
  
  <author>
    <name>夏红林</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Angular2-架构-Wrapup</title>
    <link href="http://xiahl.top/2016/07/09/2016-07-09-angular2-architecture-wrap-up/"/>
    <id>http://xiahl.top/2016/07/09/2016-07-09-angular2-architecture-wrap-up/</id>
    <published>2016-07-09T11:00:00.000Z</published>
    <updated>2016-07-09T13:46:10.563Z</updated>
    
    <content type="html">&lt;style type=&quot;text/css&quot;&gt;
	em {
	    font-style: normal!important;
	    font-weight: bold;
	}
	.l-sub-section {
		margin: 100px 0 32px 0;
		padding: 16px 24px;
		background: #f5f6f7;
		border-left: 4px solid #8BC34A;
		border-radius: 4px;
	}
	.example-title {
	    color: #fff;
	    padding: 0 16px;
	    font-size: 14px;
	    border-color: #1976D2;
	    background: #1976D2;
	    box-shadow: none;
	    line-height: 32px;
	    margin-bottom: -5px;
	    z-index: 1;
	    position: relative;
	    border-bottom-right-radius: 0;
	    border-bottom-left-radius: 0;
        border-width: 2px;
    	border-style: solid;
	    border-radius: 4px;
	}
	.highlight {
		margin: 0!important;
		padding: 0;
	    color: inherit;
	    background: inherit;
	}
&lt;/style&gt;
&lt;h2 id=&quot;wrap-up&quot;&gt;&lt;a name=&quot;总结&quot; class=&quot;reference-link&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;
&lt;p&gt;我们学到的这些只是关于Angular应用程序的八个主要构造块的一点皮毛&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;ol&gt;
	&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2016/07/08/2016-07-08-angular2-architecture-module&quot;&gt;模块&lt;/a&gt;   &lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2016/07/09/2016-07-09-angular2-architecture-component&quot;&gt;组件&lt;/a&gt;&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2016/07/09/2016-07-09-angular2-architecture-template&quot;&gt;模板&lt;/a&gt;&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2016/07/09/2016-07-09-angular2-architecture-metadata&quot;&gt;元数据&lt;/a&gt;&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2016/07/09/2016-07-09-angular2-architecture-databinding&quot;&gt;数据绑定&lt;/a&gt;&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2016/07/09/2016-07-09-angular2-architecture-directive&quot;&gt;指令&lt;/a&gt;&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2016/07/09/2016-07-09-angular2-architecture-service&quot;&gt;服务&lt;/a&gt;&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;&lt;p&gt;&lt;a href=&quot;/2016/07/09/2016-07-09-angular2-architecture-dependency-injection&quot;&gt;依赖注入&lt;/a&gt;&lt;/p&gt;
	&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这是Angular应用程序中所有其它东西的基础，要使用Angular 2，以这些作为开端就绰绰有余了。
但它仍然没有包含我们需要的或想知道的全部。&lt;/p&gt;
&lt;h2 id=&quot;-&quot;&gt;其它东西&lt;/h2&gt;
&lt;p&gt;这里是一个简短的、按字母排序的列表，列出了其它重要的Angular特性和服务。
它们大多数已经(或即将)包括在这个《开发指南》中：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;动画Animations&lt;/strong&gt; - 即将到来的动画库。它能让开发人员更轻易的给组件添加动画行为，而不需要对动画技术或css有深入的了解。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;引导Bootstrap&lt;/strong&gt; - 配置和引导应用的根组件的方法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;变更检测Change Detection&lt;/strong&gt; - 学会Angular是如何决定组件的属性值变化和什么时候该更新到屏幕的。 
学会它如何使用&lt;strong&gt;zones&lt;/strong&gt;来拦截异步行为和它如何执行变更检测策略。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://angular.cn/docs/ts/latest/guide/router.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;组件路由Component Router&lt;/a&gt;&lt;/strong&gt; - 通过组件路由服务，可以让用户使用浏览器中熟悉的URL形式，在多屏应用之间导航。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;事件Events&lt;/strong&gt; - DOM能触发事件，组件和服务也能。Angular提供的事件发布与订阅机制还包括&lt;a href=&quot;https://github.com/zenparsing/es-observable&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RxJS可观察Observable&lt;/a&gt;方案的一个实施。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://angular.cn/docs/ts/latest/guide/forms.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;表单Forms&lt;/a&gt;&lt;/strong&gt; - 通过基于HTML的验证和脏检查机制支持复杂的数据输入场景。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://angular.cn/docs/ts/latest/guide/server-communication.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTTP&lt;/a&gt;&lt;/strong&gt; - 通过这个Angular HTTP客户端，可以与服务器通讯，以获得数据、保存数据和触发服务端动作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://angular.cn/docs/ts/latest/guide/lifecycle-hooks.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;生命周期钩子Lifecycle Hooks&lt;/a&gt;&lt;/strong&gt; - 通过实现“生命周期钩子”接口，可以切入组件生命中的几个关键点：从创建到销毁。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://angular.cn/docs/ts/latest/guide/pipes.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;管道Pipes&lt;/a&gt;&lt;/strong&gt; - 这种服务会转换值以供显示。可以把管道放在模板中，以增强用户体验。比如这个&lt;code&gt;currency&lt;/code&gt;管道表达式，&lt;/p&gt;
&lt;pre&gt;
	&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;price | currency:&amp;apos;USD&amp;apos;:true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/pre&gt;
&lt;p&gt;把&amp;quot;42.33&amp;quot;显示为&lt;code&gt;$42.33&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://angular.cn/docs/ts/latest/guide/testing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Testing&lt;/a&gt;&lt;/strong&gt; - Angular提供了一个测试库，在程序各个部分与Angular框架交互同时，用来“单元测试”它们。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;style type=&quot;text/css&quot;&gt;
	em {
	    font-style: normal!important;
	    font-weight: bold;
	}
	.l-sub-section {
		margin: 100px 0 32px 0;
		padding: 16px 24px;
		background: #f5f6f7;
		border-left: 4px solid #8BC34A;
		border-radius: 4px;
	}
	.example-title {
	    color: #fff;
	    padding: 0 16px;
	    font-size: 14px;
	    border-color: #1976D2;
	    background: #1976D2;
	    box-shadow: none;
	    line-height: 32px;
	    margin-bottom: -5px;
	    z-index: 1;
	    position: relative;
	    border-bottom-right-radius: 0;
	    border-bottom-left-radius: 0;
        border-width: 2px;
    	border-style: solid;
	    border-radius: 4px;
	}
	.highlight {
		margin: 0!important;
		padding: 0;
	    color: inherit;
	    background: inherit;
	}
&lt;/style&gt;
&lt;h2 id=&quot;wrap-up&quot;&gt;&lt;a name=&quot;总结&quot; class=&quot;reference-link&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;
&lt;p&gt;我们学到的这些只是关于Angular应用程序的八个主要构造块的一点皮毛&lt;/p&gt;
    
    </summary>
    
      <category term="Angular2" scheme="http://xiahl.top/categories/Angular2/"/>
    
    
      <category term="Basics" scheme="http://xiahl.top/tags/Basics/"/>
    
      <category term="Architecture" scheme="http://xiahl.top/tags/Architecture/"/>
    
      <category term="Wrapup" scheme="http://xiahl.top/tags/Wrapup/"/>
    
  </entry>
  
  <entry>
    <title>Angular2-架构-DependencyInjection</title>
    <link href="http://xiahl.top/2016/07/09/2016-07-09-angular2-architecture-dependency-injection/"/>
    <id>http://xiahl.top/2016/07/09/2016-07-09-angular2-architecture-dependency-injection/</id>
    <published>2016-07-09T10:59:00.000Z</published>
    <updated>2016-07-09T13:44:46.320Z</updated>
    
    <content type="html">&lt;style type=&quot;text/css&quot;&gt;
	em {
	    font-style: normal!important;
	    font-weight: bold;
	}
	.l-sub-section {
		margin: 100px 0 32px 0;
		padding: 16px 24px;
		background: #f5f6f7;
		border-left: 4px solid #8BC34A;
		border-radius: 4px;
	}
	.example-title {
	    color: #fff;
	    padding: 0 16px;
	    font-size: 14px;
	    border-color: #1976D2;
	    background: #1976D2;
	    box-shadow: none;
	    line-height: 32px;
	    margin-bottom: -5px;
	    z-index: 1;
	    position: relative;
	    border-bottom-right-radius: 0;
	    border-bottom-left-radius: 0;
        border-width: 2px;
    	border-style: solid;
	    border-radius: 4px;
	}
	.highlight {
		margin: 0!important;
		padding: 0;
	    color: inherit;
	    background: inherit;
	}
&lt;/style&gt;
&lt;h2 id=&quot;dependency-injection&quot;&gt;&lt;a name=&quot;依赖注入&quot; class=&quot;reference-link&quot;&gt;&lt;/a&gt;依赖注入&lt;/h2&gt;
&lt;img src=&quot;/resources/dependency-injection.png&quot; alt=&quot;&quot; align=&quot;left&quot; style=&quot;width:240px; margin-right:10px&quot;&gt;
&lt;p&gt;“依赖注入”是提供类的新实例的一种方式，还负责处理好类所需的全部依赖。大多数依赖都是服务。
Angular也使用依赖注入提供我们需要的组件以及这些组件所需的服务。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;br clear=&quot;all&quot;&gt;
&lt;p&gt;在TypeScript里，Angular能通过查看构造函数的参数类型，来得知组件需要哪些服务。
例如，&lt;code&gt;HeroListComponent&lt;/code&gt;组件的构造函数需要&lt;code&gt;HeroService&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&quot;example-title&quot; style=&quot;margin-top:0px;&quot;&gt;app/hero-list.component (构造函数)&lt;/div&gt;
&lt;pre&gt;
	&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;constructor(private service: HeroService) &amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/pre&gt;
&lt;p&gt;当Angular创建组件时，会首先为组件所需的服务找一个&lt;strong&gt;注入器Injector&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;注入器是一个维护服务实例的容器，存放着以前创建的实例。如果容器中还没有所请求的服务实例，注入器就会创建一个服务实例，并且添加到容器中，然后把这个服务返回给Angular。
当所有的服务都被解析完并返回时，Angular会以这些服务为参数去调用组件的构造函数。
这就是我们所说的&lt;em&gt;依赖注入&lt;/em&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;HeroService&lt;/code&gt;注入的过程看起来有点像这样：&lt;/p&gt;
&lt;img src=&quot;/resources/injector-injects.png&quot; alt=&quot;&quot;&gt;
&lt;p&gt;如果注入器还没有&lt;code&gt;HeroService&lt;/code&gt;，它怎么知道该如何创建一个呢？&lt;/p&gt;
&lt;p&gt;简单的说，必须在要求注入&lt;code&gt;HeroService&lt;/code&gt;之前，注册一个&lt;code&gt;HeroService&lt;/code&gt;的&lt;strong&gt;提供商Provider&lt;/strong&gt;到注入器。
提供商可以创建并返回服务，通常返回的就是这个“服务类”本身。&lt;/p&gt;
&lt;p&gt;可以在应用程序的组件树中的任何级别上注册提供商。
当需要一个服务的同一个实例在任何地方都是可用时，我们通常在应用引导程序中注册它。&lt;/p&gt;
&lt;div class=&quot;example-title&quot; style=&quot;margin-top:0px;&quot;&gt;app/main.ts (节选)&lt;/div&gt;
&lt;pre&gt;
	&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;bootstrap(AppComponent, [BackendService, HeroService, Logger]);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/pre&gt;
&lt;p&gt;或者，也可以把它注册在组件层……&lt;/p&gt;
&lt;pre&gt;
	&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@Component(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  providers:   [HeroService]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;export class HeroesComponent &amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/pre&gt;
&lt;p&gt;... 在这种情况下，那个组件的每一个新实例都会有一个(在该组件注册的)服务的新实例。&lt;/p&gt;
&lt;p&gt;在这个概览中，我们过度简化了依赖注入机制。
在&lt;a href=&quot;#&quot;&gt;依赖注入&lt;/a&gt;一章中，我们能学到关于它更详尽的知识。&lt;/p&gt;
&lt;p&gt;需要记住的要点是：&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;p&gt;依赖注入渗透在整个框架中，并且被到处使用。&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;&lt;p&gt;注入器&lt;code&gt;Injector&lt;/code&gt;是本机制的核心。&lt;/p&gt;
		&lt;ul&gt;
			&lt;li&gt;&lt;p&gt;注入器负责维护一个&lt;em&gt;容器&lt;/em&gt;，用于存放它创建过的服务实例。&lt;/p&gt;
			&lt;/li&gt;
			&lt;li&gt;&lt;p&gt;注入器能使用&lt;em&gt;提供商&lt;/em&gt;创建一个新的服务实例。&lt;/p&gt;
			&lt;/li&gt;
		&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;&lt;p&gt;&lt;em&gt;提供商&lt;/em&gt;是一个用于创建服务的“配方”。&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;&lt;p&gt;把&lt;em&gt;提供商&lt;/em&gt;注册到注入器。&lt;/p&gt;
	&lt;/li&gt;
&lt;/ul&gt;</content>
    
    <summary type="html">
    
      &lt;style type=&quot;text/css&quot;&gt;
	em {
	    font-style: normal!important;
	    font-weight: bold;
	}
	.l-sub-section {
		margin: 100px 0 32px 0;
		padding: 16px 24px;
		background: #f5f6f7;
		border-left: 4px solid #8BC34A;
		border-radius: 4px;
	}
	.example-title {
	    color: #fff;
	    padding: 0 16px;
	    font-size: 14px;
	    border-color: #1976D2;
	    background: #1976D2;
	    box-shadow: none;
	    line-height: 32px;
	    margin-bottom: -5px;
	    z-index: 1;
	    position: relative;
	    border-bottom-right-radius: 0;
	    border-bottom-left-radius: 0;
        border-width: 2px;
    	border-style: solid;
	    border-radius: 4px;
	}
	.highlight {
		margin: 0!important;
		padding: 0;
	    color: inherit;
	    background: inherit;
	}
&lt;/style&gt;
&lt;h2 id=&quot;dependency-injection&quot;&gt;&lt;a name=&quot;依赖注入&quot; class=&quot;reference-link&quot;&gt;&lt;/a&gt;依赖注入&lt;/h2&gt;
&lt;img src=&quot;/resources/dependency-injection.png&quot; alt=&quot;&quot; align=&quot;left&quot; style=&quot;width:240px; margin-right:10px&quot;&gt;
&lt;p&gt;“依赖注入”是提供类的新实例的一种方式，还负责处理好类所需的全部依赖。大多数依赖都是服务。
Angular也使用依赖注入提供我们需要的组件以及这些组件所需的服务。&lt;/p&gt;
    
    </summary>
    
      <category term="Angular2" scheme="http://xiahl.top/categories/Angular2/"/>
    
    
      <category term="Basics" scheme="http://xiahl.top/tags/Basics/"/>
    
      <category term="Architecture" scheme="http://xiahl.top/tags/Architecture/"/>
    
      <category term="Dependency Injection" scheme="http://xiahl.top/tags/Dependency-Injection/"/>
    
  </entry>
  
  <entry>
    <title>Angular2-架构-Service</title>
    <link href="http://xiahl.top/2016/07/09/2016-07-09-angular2-architecture-service/"/>
    <id>http://xiahl.top/2016/07/09/2016-07-09-angular2-architecture-service/</id>
    <published>2016-07-09T10:57:00.000Z</published>
    <updated>2016-07-09T13:45:40.234Z</updated>
    
    <content type="html">&lt;style type=&quot;text/css&quot;&gt;
	em {
	    font-style: normal!important;
	    font-weight: bold;
	}
	.l-sub-section {
		margin: 100px 0 32px 0;
		padding: 16px 24px;
		background: #f5f6f7;
		border-left: 4px solid #8BC34A;
		border-radius: 4px;
	}
	.example-title {
	    color: #fff;
	    padding: 0 16px;
	    font-size: 14px;
	    border-color: #1976D2;
	    background: #1976D2;
	    box-shadow: none;
	    line-height: 32px;
	    margin-bottom: -5px;
	    z-index: 1;
	    position: relative;
	    border-bottom-right-radius: 0;
	    border-bottom-left-radius: 0;
        border-width: 2px;
    	border-style: solid;
	    border-radius: 4px;
	}
	.highlight {
		margin: 0!important;
		padding: 0;
	    color: inherit;
	    background: inherit;
	}
&lt;/style&gt;
&lt;h2 id=&quot;service&quot;&gt;&lt;a name=&quot;服务&quot; class=&quot;reference-link&quot;&gt;&lt;/a&gt;服务&lt;/h2&gt;
&lt;img src=&quot;/resources/service.png&quot; alt=&quot;&quot; align=&quot;left&quot; style=&quot;width:240px; margin-right:10px&quot;&gt;
&lt;p&gt;“服务”分为很多种，包括：值、函数，以及应用所需的特性。&lt;/p&gt;
&lt;p&gt;几乎任何东西都可以是一个服务。
典型的服务是一个类，具有专注的、良好定义的用途。它应该做一件具体的事情，把它做好。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;br clear=&quot;all&quot;&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;日志服务&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;数据服务&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;消息总线&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;税款计算器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;应用程序配置&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;服务没有什么特别属于Angular的特性。Angular本身对于服务也没有什么定义。
它甚至都没有&lt;em&gt;ServiceBase&lt;/em&gt;类。&lt;/p&gt;
&lt;p&gt;即便如此，服务仍然是任何Angular应用的基础。&lt;/p&gt;
&lt;p&gt;这里是一个“服务”类的范例，用于把日志记录到浏览器的控制台：&lt;/p&gt;
&lt;div class=&quot;example-title&quot; style=&quot;margin-top:0px;&quot;&gt;app/logger.service.ts (只有类)&lt;/div&gt;
&lt;pre&gt;
	&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;export class Logger &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  log(msg: any)   &amp;#123; console.log(msg); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  error(msg: any) &amp;#123; console.error(msg); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  warn(msg: any)  &amp;#123; console.warn(msg); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/pre&gt;
&lt;p&gt;下面是&lt;code&gt;HeroService&lt;/code&gt;类，用于获取英雄数据，并通过一个已解析的&lt;a href=&quot;http://exploringjs.com/es6/ch_promises.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;承诺Promise&lt;/a&gt;返回它们。
&lt;code&gt;HeroService&lt;/code&gt;还依赖于&lt;code&gt;Logger&lt;/code&gt;服务和另一个用来处理服务器通讯工作的&lt;code&gt;BackendService&lt;/code&gt;服务。&lt;/p&gt;
&lt;div class=&quot;example-title&quot; style=&quot;margin-top:0px;&quot;&gt;app/hero.service.ts (只有类)&lt;/div&gt;
&lt;pre&gt;
	&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;export class HeroService &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  private heroes: Hero[] = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  constructor(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private backend: BackendService,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private logger: Logger) &amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  getHeroes() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.backend.getAll(Hero).then( (heroes: Hero[]) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      this.logger.log(`Fetched $&amp;#123;heroes.length&amp;#125; heroes.`);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      this.heroes.push(...heroes); // fill cache&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return this.heroes;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/pre&gt;
&lt;p&gt;服务无处不在。&lt;/p&gt;
&lt;p&gt;组件是服务的主要消费者。它们依赖服务来处理大多数“苦差事”。
它们自己不需要从服务器获得数据，不需要验证输入，不需要直接往控制台写日志。
它们把这些任务委托给服务。&lt;/p&gt;
&lt;p&gt;组件的任务就是提供用户体验，仅此而已。它介于视图(由模板渲染)和应用逻辑(通常包括“模型model”的观念)之间。
设计良好的组件为数据绑定提供属性和方法，把那些其他对它们不重要的事情都委托给服务。&lt;/p&gt;
&lt;p&gt;Angular不会&lt;em&gt;强制要求&lt;/em&gt;我们遵循这些原则。
即使我们花3000行代码写了一个“厨房洗碗槽”组件，它也不会抱怨什么。&lt;/p&gt;
&lt;p&gt;Angular帮助我们&lt;em&gt;追随&lt;/em&gt;这些原则 —— 它让我们能更轻易的把应用逻辑拆分到服务，并通过&lt;em&gt;依赖注入&lt;/em&gt;来在组件中使用这些服务。&lt;/p&gt;</content>
    
    <summary type="html">
    
      &lt;style type=&quot;text/css&quot;&gt;
	em {
	    font-style: normal!important;
	    font-weight: bold;
	}
	.l-sub-section {
		margin: 100px 0 32px 0;
		padding: 16px 24px;
		background: #f5f6f7;
		border-left: 4px solid #8BC34A;
		border-radius: 4px;
	}
	.example-title {
	    color: #fff;
	    padding: 0 16px;
	    font-size: 14px;
	    border-color: #1976D2;
	    background: #1976D2;
	    box-shadow: none;
	    line-height: 32px;
	    margin-bottom: -5px;
	    z-index: 1;
	    position: relative;
	    border-bottom-right-radius: 0;
	    border-bottom-left-radius: 0;
        border-width: 2px;
    	border-style: solid;
	    border-radius: 4px;
	}
	.highlight {
		margin: 0!important;
		padding: 0;
	    color: inherit;
	    background: inherit;
	}
&lt;/style&gt;
&lt;h2 id=&quot;service&quot;&gt;&lt;a name=&quot;服务&quot; class=&quot;reference-link&quot;&gt;&lt;/a&gt;服务&lt;/h2&gt;
&lt;img src=&quot;/resources/service.png&quot; alt=&quot;&quot; align=&quot;left&quot; style=&quot;width:240px; margin-right:10px&quot;&gt;
&lt;p&gt;“服务”分为很多种，包括：值、函数，以及应用所需的特性。&lt;/p&gt;
&lt;p&gt;几乎任何东西都可以是一个服务。
典型的服务是一个类，具有专注的、良好定义的用途。它应该做一件具体的事情，把它做好。&lt;/p&gt;
    
    </summary>
    
      <category term="Angular2" scheme="http://xiahl.top/categories/Angular2/"/>
    
    
      <category term="Basics" scheme="http://xiahl.top/tags/Basics/"/>
    
      <category term="Architecture" scheme="http://xiahl.top/tags/Architecture/"/>
    
      <category term="Service" scheme="http://xiahl.top/tags/Service/"/>
    
  </entry>
  
  <entry>
    <title>Angular2-架构-Directive</title>
    <link href="http://xiahl.top/2016/07/09/2016-07-09-angular2-architecture-directive/"/>
    <id>http://xiahl.top/2016/07/09/2016-07-09-angular2-architecture-directive/</id>
    <published>2016-07-09T10:55:00.000Z</published>
    <updated>2016-07-09T13:45:02.125Z</updated>
    
    <content type="html">&lt;style type=&quot;text/css&quot;&gt;
	em {
	    font-style: normal!important;
	    font-weight: bold;
	}
	.l-sub-section {
		margin: 0px 0 32px 0;
		padding: 16px 24px;
		background: #f5f6f7;
		border-left: 4px solid #8BC34A;
		border-radius: 4px;
	}
	.example-title {
	    color: #fff;
	    padding: 0 16px;
	    font-size: 14px;
	    border-color: #1976D2;
	    background: #1976D2;
	    box-shadow: none;
	    line-height: 32px;
	    margin-bottom: -5px;
	    z-index: 1;
	    position: relative;
	    border-bottom-right-radius: 0;
	    border-bottom-left-radius: 0;
        border-width: 2px;
    	border-style: solid;
	    border-radius: 4px;
	}
	.highlight {
		margin: 0!important;
		padding: 0;
	    color: inherit;
	    background: inherit;
	}
&lt;/style&gt;
&lt;h2 id=&quot;directive&quot;&gt;&lt;a name=&quot;指令&quot; class=&quot;reference-link&quot;&gt;&lt;/a&gt;指令&lt;/h2&gt;
&lt;img src=&quot;/resources/directive.png&quot; alt=&quot;&quot; align=&quot;left&quot; style=&quot;width:240px; margin-right:10px&quot;&gt;
&lt;p&gt;Angular模板是&lt;em&gt;动态的&lt;/em&gt;。当Angular渲染它们时，它会根据&lt;strong&gt;指令&lt;/strong&gt;提供的操作指南对DOM进行修改。&lt;/p&gt;
&lt;p&gt;指令是一个带有“指令元数据”的类。在TypeScript中，要通过&lt;code&gt;@Directive&lt;/code&gt;装饰器把元数据附加到类上。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;br clear=&quot;all&quot;&gt;
&lt;p&gt;我们已经遇到过指令的形式之一：组件。组件是一个&lt;em&gt;带模板的指令&lt;/em&gt;，而且&lt;code&gt;@Component&lt;/code&gt;装饰器实际上就是一个&lt;code&gt;@Directive&lt;/code&gt;装饰器，只是扩展了一些面向模板的属性。&lt;/p&gt;
&lt;div class=&quot;l-sub-section&quot;&gt;
&lt;p&gt;虽然&lt;strong&gt;组件从技术角度上就是一个指令&lt;/strong&gt;，但是组件非常独特，并在Angular中位于中心地位，以至于在架构介绍中，我们把组件从指令中单独开来。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;有两种&lt;em&gt;其它&lt;/em&gt;类型的指令，我们称之为“结构型”指令和“属性(attribute)型”指令。&lt;/p&gt;
&lt;p&gt;它们往往像属性(attribute)一样出现在元素标签中，偶尔会以名字的形式出现(参见&lt;a href=&quot;#&quot;&gt;一次性绑定&lt;/a&gt;)，但多数时候还是作为赋值目标或绑定目标出现。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;结构型指令&lt;/strong&gt;通过在DOM中添加、移除和替换元素来修改布局。&lt;/p&gt;
&lt;p&gt;我们在&lt;a href=&quot;/2016/07/09/2016-07-09-angular2-architecture-template&quot;&gt;范例&lt;/a&gt;模板中会看到两个内建的结构型指令。&lt;/p&gt;
&lt;pre&gt;
	&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;div *ngFor=&amp;quot;let hero of heroes&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;hero-detail *ngIf=&amp;quot;selectedHero&amp;quot;&amp;gt;&amp;lt;/hero-detail&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/pre&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;p&gt;&lt;a href=&quot;displaying-data.html#ngFor&quot;&gt;&lt;code&gt;*ngFor&lt;/code&gt;&lt;/a&gt;告诉Angular为&lt;code&gt;heroes&lt;/code&gt;列表中的每个英雄生成一个&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;标签。&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;&lt;p&gt;&lt;a href=&quot;displaying-data.html#ngIf&quot;&gt;&lt;code&gt;*ngIf&lt;/code&gt;&lt;/a&gt;表示只有在选择的英雄存在时，才会包含&lt;code&gt;HeroDetail&lt;/code&gt;组件。&lt;/p&gt;
	&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;属性型指令&lt;/strong&gt; 修改一个现有元素的外观或行为。在模板中，它们看起来就像是标准的HTML属性，故名。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ngModel&lt;/code&gt;指令就是属性型指令的一个例子，它实现了双向数据绑定。&lt;/p&gt;
&lt;p&gt;它修改了现有元素(典型的&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;)的行为：它设置了显示属性值，并对change事件做出相应回应。&lt;/p&gt;
&lt;p&gt;Angular内置了一些其它指令，它们或者修改结构布局(如&lt;a href=&quot;#&quot;&gt;ngSwitch&lt;/a&gt;)，或者修改DOM元素和组件的各个方面
(如&lt;a href=&quot;#&quot;&gt;ngStyle&lt;/a&gt;和&lt;a href=&quot;#&quot;&gt;ngClass&lt;/a&gt;)。&lt;/p&gt;
&lt;p&gt;当然，我们也能编写自己的指令。&lt;/p&gt;</content>
    
    <summary type="html">
    
      &lt;style type=&quot;text/css&quot;&gt;
	em {
	    font-style: normal!important;
	    font-weight: bold;
	}
	.l-sub-section {
		margin: 0px 0 32px 0;
		padding: 16px 24px;
		background: #f5f6f7;
		border-left: 4px solid #8BC34A;
		border-radius: 4px;
	}
	.example-title {
	    color: #fff;
	    padding: 0 16px;
	    font-size: 14px;
	    border-color: #1976D2;
	    background: #1976D2;
	    box-shadow: none;
	    line-height: 32px;
	    margin-bottom: -5px;
	    z-index: 1;
	    position: relative;
	    border-bottom-right-radius: 0;
	    border-bottom-left-radius: 0;
        border-width: 2px;
    	border-style: solid;
	    border-radius: 4px;
	}
	.highlight {
		margin: 0!important;
		padding: 0;
	    color: inherit;
	    background: inherit;
	}
&lt;/style&gt;
&lt;h2 id=&quot;directive&quot;&gt;&lt;a name=&quot;指令&quot; class=&quot;reference-link&quot;&gt;&lt;/a&gt;指令&lt;/h2&gt;
&lt;img src=&quot;/resources/directive.png&quot; alt=&quot;&quot; align=&quot;left&quot; style=&quot;width:240px; margin-right:10px&quot;&gt;
&lt;p&gt;Angular模板是&lt;em&gt;动态的&lt;/em&gt;。当Angular渲染它们时，它会根据&lt;strong&gt;指令&lt;/strong&gt;提供的操作指南对DOM进行修改。&lt;/p&gt;
&lt;p&gt;指令是一个带有“指令元数据”的类。在TypeScript中，要通过&lt;code&gt;@Directive&lt;/code&gt;装饰器把元数据附加到类上。&lt;/p&gt;
    
    </summary>
    
      <category term="Angular2" scheme="http://xiahl.top/categories/Angular2/"/>
    
    
      <category term="Basics" scheme="http://xiahl.top/tags/Basics/"/>
    
      <category term="Architecture" scheme="http://xiahl.top/tags/Architecture/"/>
    
      <category term="Directive" scheme="http://xiahl.top/tags/Directive/"/>
    
  </entry>
  
  <entry>
    <title>Angular2-架构-Databinding</title>
    <link href="http://xiahl.top/2016/07/09/2016-07-09-angular2-architecture-databinding/"/>
    <id>http://xiahl.top/2016/07/09/2016-07-09-angular2-architecture-databinding/</id>
    <published>2016-07-09T10:26:00.000Z</published>
    <updated>2016-07-09T13:44:29.408Z</updated>
    
    <content type="html">&lt;style type=&quot;text/css&quot;&gt;
	em {
	    font-style: normal!important;
	    font-weight: bold;
	}
	.l-sub-section {
		margin: 100px 0 32px 0;
		padding: 16px 24px;
		background: #f5f6f7;
		border-left: 4px solid #8BC34A;
		border-radius: 4px;
	}
	.example-title {
	    color: #fff;
	    padding: 0 16px;
	    font-size: 14px;
	    border-color: #1976D2;
	    background: #1976D2;
	    box-shadow: none;
	    line-height: 32px;
	    margin-bottom: -5px;
	    z-index: 1;
	    position: relative;
	    border-bottom-right-radius: 0;
	    border-bottom-left-radius: 0;
        border-width: 2px;
    	border-style: solid;
	    border-radius: 4px;
	}
	.highlight {
		margin: 0!important;
		padding: 0;
	    color: inherit;
	    background: inherit;
	}
&lt;/style&gt;
&lt;h2 id=&quot;data-binding&quot;&gt;&lt;a name=&quot;数据绑定&quot; class=&quot;reference-link&quot;&gt;&lt;/a&gt;数据绑定&lt;/h2&gt;
&lt;p&gt;如果没有框架，我们就得自己把数据值推送到HTML控件中，并把用户的反馈转换成动作和值更新。
如果手工写代码来实现这些推/拉逻辑，肯定会枯燥乏味、容易出错，读起来简直是噩梦 —— 写过jQuery的程序员大概都对此深有体会。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;img src=&quot;/resources/databinding.png&quot; alt=&quot;&quot; align=&quot;left&quot; style=&quot;width:240px; margin-right:10px&quot;&gt;
&lt;p&gt;Angular支持&lt;strong&gt;数据绑定&lt;/strong&gt;，一种让模板的各部分与组件的各部分相互合作的机制。
我们往模板HTML中添加绑定标记，来告诉Angular如何连接两者。&lt;/p&gt;
&lt;p&gt;数据绑定的语法有四种形式。每种形式都有一个方向 —— 从DOM来、到DOM去、双向，就像图中的箭头所示意的。&lt;/p&gt;
&lt;p&gt;在&lt;a href=&quot;/2016/07/09/2016-07-09-angular2-architecture-template&quot;&gt;范例&lt;/a&gt;模板中，我们看到了数据绑定的三种形式：&lt;/p&gt;
&lt;div class=&quot;example-title&quot; style=&quot;margin-top:100px;&quot;&gt;app/hero-list.component.html (节选)&lt;/div&gt;
&lt;pre&gt;
	&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;div&amp;gt;&amp;#123;&amp;#123;hero.name&amp;#125;&amp;#125;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;hero-detail [hero]=&amp;quot;selectedHero&amp;quot;&amp;gt;&amp;lt;/hero-detail&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;div (click)=&amp;quot;selectHero(hero)&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/pre&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;p&gt;&lt;code&gt;{ { hero.name } }&lt;/code&gt;&lt;a href=&quot;#&quot;&gt;&lt;em&gt;插值表达式&lt;/em&gt;&lt;/a&gt;：在&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;标签中显示了组件的&lt;code&gt;hero.name&lt;/code&gt;属性的值。 &lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;&lt;p&gt;&lt;code&gt;[hero]&lt;/code&gt;&lt;a href=&quot;#&quot;&gt;&lt;em&gt;属性绑定&lt;/em&gt;&lt;/a&gt;：把父组件&lt;code&gt;HeroListComponent&lt;/code&gt;的&lt;code&gt;selectedHero&lt;/code&gt;传到子组件&lt;code&gt;HeroDetailComponent&lt;/code&gt;的&lt;code&gt;hero&lt;/code&gt;属性中。&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;&lt;p&gt;&lt;code&gt;(click)&lt;/code&gt;&lt;a href=&quot;#&quot;&gt;&lt;em&gt;事件绑定&lt;/em&gt;&lt;/a&gt;：当用户点击英雄的名字时，调用组件的&lt;code&gt;selectHero&lt;/code&gt;方法。&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;&lt;p&gt;&lt;strong&gt;双向数据绑定&lt;/strong&gt;：这是很重要的第四种绑定形式，它在&lt;code&gt;ngModel&lt;/code&gt;指令这个单一标记中同时实现了属性绑定和事件绑定的功能。
	在&lt;code&gt;HeroListComponent&lt;/code&gt;模板中没有双向绑定，下面是一个来自&lt;code&gt;HeroDetailComponent&lt;/code&gt;模板的范例(以前没展示过)：&lt;/p&gt;
	&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;
	&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;input [(ngModel)]=&amp;quot;hero.name&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/pre&gt;
&lt;p&gt;在双向绑定中，数据属性的值会从具有属性绑定的组件传到输入框。通过事件绑定，用户的修改被传回到组件，把属性值设置为最新的值。&lt;/p&gt;
&lt;p&gt;Angular在每个JavaScript事件周期中一次性处理&lt;em&gt;所有的&lt;/em&gt;数据绑定，它会从组件树的根部开始，用深度优先的方式处理。&lt;/p&gt;
&lt;img src=&quot;/resources/component-databinding.png&quot; alt=&quot;&quot; align=&quot;left&quot; style=&quot;width:240px; margin-right:10px&quot;&gt;
&lt;p&gt;虽然还不清楚所有细节，但是我们从这些范例中至少弄明白一点：数据绑定在模板与对应组件的交互中扮演了一个很重要的角色。&lt;/p&gt;
&lt;br clear=&quot;all&quot;&gt;
&lt;img src=&quot;/resources/parent-child-binding.png&quot; alt=&quot;&quot; align=&quot;left&quot; style=&quot;width:240px; margin-right:10px&quot;&gt;
&lt;p&gt;...在父组件与子组件的通讯中&lt;strong&gt;&lt;em&gt;也同样如此&lt;/em&gt;&lt;/strong&gt;。&lt;/p&gt;</content>
    
    <summary type="html">
    
      &lt;style type=&quot;text/css&quot;&gt;
	em {
	    font-style: normal!important;
	    font-weight: bold;
	}
	.l-sub-section {
		margin: 100px 0 32px 0;
		padding: 16px 24px;
		background: #f5f6f7;
		border-left: 4px solid #8BC34A;
		border-radius: 4px;
	}
	.example-title {
	    color: #fff;
	    padding: 0 16px;
	    font-size: 14px;
	    border-color: #1976D2;
	    background: #1976D2;
	    box-shadow: none;
	    line-height: 32px;
	    margin-bottom: -5px;
	    z-index: 1;
	    position: relative;
	    border-bottom-right-radius: 0;
	    border-bottom-left-radius: 0;
        border-width: 2px;
    	border-style: solid;
	    border-radius: 4px;
	}
	.highlight {
		margin: 0!important;
		padding: 0;
	    color: inherit;
	    background: inherit;
	}
&lt;/style&gt;
&lt;h2 id=&quot;data-binding&quot;&gt;&lt;a name=&quot;数据绑定&quot; class=&quot;reference-link&quot;&gt;&lt;/a&gt;数据绑定&lt;/h2&gt;
&lt;p&gt;如果没有框架，我们就得自己把数据值推送到HTML控件中，并把用户的反馈转换成动作和值更新。
如果手工写代码来实现这些推/拉逻辑，肯定会枯燥乏味、容易出错，读起来简直是噩梦 —— 写过jQuery的程序员大概都对此深有体会。&lt;/p&gt;
    
    </summary>
    
      <category term="Angular2" scheme="http://xiahl.top/categories/Angular2/"/>
    
    
      <category term="Basics" scheme="http://xiahl.top/tags/Basics/"/>
    
      <category term="Architecture" scheme="http://xiahl.top/tags/Architecture/"/>
    
      <category term="Databinding" scheme="http://xiahl.top/tags/Databinding/"/>
    
  </entry>
  
  <entry>
    <title>Angular2-架构-Metadata</title>
    <link href="http://xiahl.top/2016/07/09/2016-07-09-angular2-architecture-metadata/"/>
    <id>http://xiahl.top/2016/07/09/2016-07-09-angular2-architecture-metadata/</id>
    <published>2016-07-09T08:04:00.000Z</published>
    <updated>2016-07-09T13:45:15.194Z</updated>
    
    <content type="html">&lt;style type=&quot;text/css&quot;&gt;
	em {
	    font-style: normal!important;
	    font-weight: bold;
	}
	.l-sub-section {
		margin: 100px 0 32px 0;
		padding: 16px 24px;
		background: #f5f6f7;
		border-left: 4px solid #8BC34A;
		border-radius: 4px;
	}
	.example-title {
	    color: #fff;
	    padding: 0 16px;
	    font-size: 14px;
	    border-color: #1976D2;
	    background: #1976D2;
	    box-shadow: none;
	    line-height: 32px;
	    margin-bottom: -5px;
	    z-index: 1;
	    position: relative;
	    border-bottom-right-radius: 0;
	    border-bottom-left-radius: 0;
        border-width: 2px;
    	border-style: solid;
	    border-radius: 4px;
	}
	.highlight {
		margin: 0!important;
		padding: 0;
	    color: inherit;
	    background: inherit;
	}
&lt;/style&gt;
&lt;h2 id=&quot;metadata&quot;&gt;&lt;a name=&quot;元数据&quot; class=&quot;reference-link&quot;&gt;&lt;/a&gt;元数据&lt;/h2&gt;
&lt;img src=&quot;/resources/metadata.png&quot; alt=&quot;&quot; align=&quot;left&quot; style=&quot;width:240px; margin-right:10px&quot;&gt;
&lt;p style=&quot;padding-top:10px&quot;&gt;元数据告诉Angular如何处理一个类。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;a href=&quot;/2016/07/09/2016-07-09-angular2-architecture-component&quot;&gt;回头看看 &lt;/a&gt;&lt;code&gt;HeroListComponent&lt;/code&gt; 就会明白：它只是一个类。 一点框架的痕迹也没有，里面完全没有出现 &quot;Angular&quot; 的字样。&lt;/p&gt;
&lt;p&gt;实际上，它真的 &lt;strong&gt;只是一个类&lt;/strong&gt; 。直到我们 &lt;strong&gt;告诉 Angular&lt;/strong&gt; 这是一个组件为止。&lt;/p&gt;
&lt;p&gt;只要把 &lt;strong&gt;元数据&lt;/strong&gt; 附加到这个类，就相当于告诉 Angular ： &lt;strong&gt;HeroListComponent&lt;/strong&gt; 是个组件。&lt;/p&gt;
&lt;p&gt;在 TypeScript 中， &lt;strong&gt;装饰器 (decorator)&lt;/strong&gt; 是附加元数据的简易途径。 下面就是 &lt;code&gt;HeroListComponent&lt;/code&gt; 的一些元数据。&lt;/p&gt;
&lt;div class=&quot;example-title&quot;&gt;app/hero-list.component.ts (元数据)&lt;/div&gt;
&lt;pre&gt;
	&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@Component(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  selector:    &amp;apos;hero-list&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  templateUrl: &amp;apos;app/hero-list.component.html&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  directives:  [HeroDetailComponent],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  providers:   [HeroService]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;export class HeroesComponent &amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/pre&gt;
&lt;p&gt;这里看到&lt;code&gt;@Component&lt;/code&gt;装饰器(毫无悬念的)把紧随其后的类标记成了组件类。&lt;/p&gt;
&lt;p&gt;装饰器就是函数，它们通常还带有配置参数。
&lt;code&gt;@Component&lt;/code&gt;装饰器能接受一个配置对象，Angular会基于这些信息创建和展示组件及其视图。&lt;/p&gt;
&lt;p&gt;来看下&lt;code&gt;@Component&lt;/code&gt;中的一些配置项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;selector&lt;/code&gt; - 一个css选择器，它告诉Angular在&lt;em&gt;父级&lt;/em&gt;HTML中寻找一个&lt;code&gt;&amp;lt;hero-list&amp;gt;&lt;/code&gt;标签，然后创建该组件，并插入此标签中。
比如，如果应用“壳”(组件)的模板包含如下代码：&lt;/p&gt;
&lt;pre&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;hero-list&amp;gt;&amp;lt;/hero-list&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/pre&gt;
&lt;p&gt;Angular就会在这些标签中插入&lt;code&gt;HeroListComponent&lt;/code&gt;视图的一个实例。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;templateUrl&lt;/code&gt; - 组件模板的地址，我们在&lt;a href=&quot;/2016/07/09/2016-07-09-angular2-architecture-template&quot;&gt;前面&lt;/a&gt;见过。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;directives&lt;/code&gt; - 一个数组，包含&lt;em&gt;此&lt;/em&gt;模板需要依赖的组件或指令。
看看模板的最后一行，这表示我们期待Angular把&lt;code&gt;HeroDetailComponent&lt;/code&gt;的实例放在&lt;code&gt;&amp;lt;hero-detail&amp;gt;&lt;/code&gt;标签中。
但是，只有在&lt;code&gt;directives&lt;/code&gt;数组中提及到&lt;code&gt;HeroDetailComponent&lt;/code&gt;的时候，Angular才会这么做。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;providers&lt;/code&gt; - 一个数组，包含组件所依赖的服务所需要的&lt;em&gt;依赖注入提供商&lt;/em&gt;。 
这是在告诉Angular：该组件的构造函数需要一个&lt;code&gt;HeroService&lt;/code&gt;服务，这样组件就可以从服务中获得用来显示英雄列表的那些数据。
我们一会儿就讲到了依赖注入。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;/resources/template-metadata-component.png&quot; alt=&quot;&quot; align=&quot;left&quot; style=&quot;height:200px; margin-right:10px&quot;&gt;
&lt;p&gt;&lt;code&gt;@Component&lt;/code&gt;函数接收一个配置对象，并把它转换成元数据，附加到组件类的定义上。
Angular在运行期间会找出这份元数据，并由此知道该如何去“做正确的事”。&lt;/p&gt;
&lt;p&gt;模板、元数据和组件共同描绘出这个视图。&lt;/p&gt;
&lt;p&gt;我们也会沿用类似的风格，用其它元数据装饰器来指导Angular的行为。
比如&lt;code&gt;@Injectable&lt;/code&gt;、&lt;code&gt;@Input&lt;/code&gt;、&lt;code&gt;@Output&lt;/code&gt;和&lt;code&gt;@RouterConfig&lt;/code&gt;等是一些最常用的装饰器。
随着对Angular认识的逐步深化，我们也将逐步掌握它们。&lt;/p&gt;
&lt;p&gt;这种架构所决定的是：必须往代码中添加元数据，以便Angular知道该做什么。&lt;/p&gt;</content>
    
    <summary type="html">
    
      &lt;style type=&quot;text/css&quot;&gt;
	em {
	    font-style: normal!important;
	    font-weight: bold;
	}
	.l-sub-section {
		margin: 100px 0 32px 0;
		padding: 16px 24px;
		background: #f5f6f7;
		border-left: 4px solid #8BC34A;
		border-radius: 4px;
	}
	.example-title {
	    color: #fff;
	    padding: 0 16px;
	    font-size: 14px;
	    border-color: #1976D2;
	    background: #1976D2;
	    box-shadow: none;
	    line-height: 32px;
	    margin-bottom: -5px;
	    z-index: 1;
	    position: relative;
	    border-bottom-right-radius: 0;
	    border-bottom-left-radius: 0;
        border-width: 2px;
    	border-style: solid;
	    border-radius: 4px;
	}
	.highlight {
		margin: 0!important;
		padding: 0;
	    color: inherit;
	    background: inherit;
	}
&lt;/style&gt;
&lt;h2 id=&quot;metadata&quot;&gt;&lt;a name=&quot;元数据&quot; class=&quot;reference-link&quot;&gt;&lt;/a&gt;元数据&lt;/h2&gt;
&lt;img src=&quot;/resources/metadata.png&quot; alt=&quot;&quot; align=&quot;left&quot; style=&quot;width:240px; margin-right:10px&quot;&gt;
&lt;p style=&quot;padding-top:10px&quot;&gt;元数据告诉Angular如何处理一个类。&lt;/p&gt;
    
    </summary>
    
      <category term="Angular2" scheme="http://xiahl.top/categories/Angular2/"/>
    
    
      <category term="Basics" scheme="http://xiahl.top/tags/Basics/"/>
    
      <category term="Architecture" scheme="http://xiahl.top/tags/Architecture/"/>
    
      <category term="Metadata" scheme="http://xiahl.top/tags/Metadata/"/>
    
  </entry>
  
  <entry>
    <title>Angular2-架构-Template</title>
    <link href="http://xiahl.top/2016/07/09/2016-07-09-angular2-architecture-template/"/>
    <id>http://xiahl.top/2016/07/09/2016-07-09-angular2-architecture-template/</id>
    <published>2016-07-09T07:03:00.000Z</published>
    <updated>2016-07-09T13:45:54.381Z</updated>
    
    <content type="html">&lt;style type=&quot;text/css&quot;&gt;
	em {
	    font-style: normal!important;
	    font-weight: bold;
	}
	.l-sub-section {
		margin: 100px 0 32px 0;
		padding: 16px 24px;
		background: #f5f6f7;
		border-left: 4px solid #8BC34A;
		border-radius: 4px;
	}
	.example-title {
	    color: #fff;
	    padding: 0 16px;
	    font-size: 14px;
	    border-color: #1976D2;
	    background: #1976D2;
	    box-shadow: none;
	    line-height: 32px;
	    margin-bottom: -5px;
	    z-index: 1;
	    position: relative;
	    border-bottom-right-radius: 0;
	    border-bottom-left-radius: 0;
        border-width: 2px;
    	border-style: solid;
	    border-radius: 4px;
	}
	.highlight {
		margin: 0!important;
		padding: 0;
	    color: inherit;
	    background: inherit;
	}
&lt;/style&gt;
&lt;h2 id=&quot;template&quot;&gt;&lt;a name=&quot;模板&quot; class=&quot;reference-link&quot;&gt;&lt;/a&gt;模板&lt;/h2&gt;
&lt;img src=&quot;/resources/template.png&quot; alt=&quot;&quot; align=&quot;left&quot; style=&quot;width:240px; margin-right:10px&quot;&gt;
&lt;p&gt;我们通过组件的自带的&lt;strong&gt;模板&lt;/strong&gt;来定义视图。模板以HTML形式存在，用来告诉Angular如何渲染组件(视图)。&lt;/p&gt;
&lt;p&gt;多数情况下，模板看起来很像标准HTML……当然也有一小点儿奇怪的地方。下面是&lt;code&gt;HeroList&lt;/code&gt;组件的一个模板。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;div class=&quot;example-title&quot; style=&quot;margin-top: 80px;&quot;&gt;app/hero-list.component.html&lt;/div&gt;
&lt;pre&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;Hero List&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;i&lt;/span&gt;&amp;gt;&lt;/span&gt;Pick a hero from the list&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;i&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; *&lt;span class=&quot;attr&quot;&gt;ngFor&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;let hero of heroes&quot;&lt;/span&gt; (&lt;span class=&quot;attr&quot;&gt;click&lt;/span&gt;)=&lt;span class=&quot;string&quot;&gt;&quot;selectHero(hero)&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&amp;#123;hero.name&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;hero-detail&lt;/span&gt; *&lt;span class=&quot;attr&quot;&gt;ngIf&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;selectedHero&quot;&lt;/span&gt; [&lt;span class=&quot;attr&quot;&gt;hero&lt;/span&gt;]=&lt;span class=&quot;string&quot;&gt;&quot;selectedHero&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;hero-detail&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/pre&gt;
&lt;p&gt;我们认得&lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt;和&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;。
但另外那些标签/属性是我们在学校里从没听过的。
&lt;code&gt;*ngFor&lt;/code&gt;、&lt;code&gt;&lt;/code&gt;、&lt;code&gt;(click)&lt;/code&gt;、&lt;code&gt;[hero]&lt;/code&gt;和&lt;code&gt;&amp;lt;hero-detail&amp;gt;&lt;/code&gt;都是什么东西？&lt;/p&gt;
&lt;p&gt;这些都是Angular的&lt;a href=&quot;template-syntax.html&quot;&gt;模板语法&lt;/a&gt;例子。
我们会逐渐习惯这些语法，甚至会学着爱上它。
一会儿再解释它。&lt;/p&gt;
&lt;p&gt;在开始前，先仔细看看最后那行。
&lt;code&gt;&amp;lt;hero-detail&amp;gt;&lt;/code&gt;是一个自定义元素的标签，用来表示&lt;code&gt;HeroDetailComponent&lt;/code&gt;组件。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;HeroDetailComponent&lt;/code&gt;跟以前回顾过的&lt;code&gt;HeroListComponent&lt;/code&gt;是&lt;em&gt;不同&lt;/em&gt;的组件。
&lt;code&gt;HeroDetailComponent&lt;/code&gt;(未展示代码)用于展现一个特定英雄的情况，这个英雄是用户从&lt;code&gt;HeroListComponent&lt;/code&gt;列表中选择的。
&lt;code&gt;HeroDetailComponent&lt;/code&gt;是&lt;code&gt;HeroListComponent&lt;/code&gt;的&lt;em&gt;子组件&lt;/em&gt;。&lt;/p&gt;
&lt;img src=&quot;/resources/component-tree.png&quot; alt=&quot;&quot; align=&quot;left&quot; style=&quot;width:240px; margin-right:10px&quot;&gt;
&lt;p&gt;注意：&lt;code&gt;&amp;lt;hero-detail&amp;gt;&lt;/code&gt;竟如此和谐的出现在那些已知的HTML元素中。
在同一个格局中，我们能混用……也将继续混用……自定义组件与原生HTML。&lt;/p&gt;
&lt;p&gt;在这种方式下，我们能够，并且将会组合出复杂的组件树，用来构建那些丰富多彩的应用。&lt;/p&gt;</content>
    
    <summary type="html">
    
      &lt;style type=&quot;text/css&quot;&gt;
	em {
	    font-style: normal!important;
	    font-weight: bold;
	}
	.l-sub-section {
		margin: 100px 0 32px 0;
		padding: 16px 24px;
		background: #f5f6f7;
		border-left: 4px solid #8BC34A;
		border-radius: 4px;
	}
	.example-title {
	    color: #fff;
	    padding: 0 16px;
	    font-size: 14px;
	    border-color: #1976D2;
	    background: #1976D2;
	    box-shadow: none;
	    line-height: 32px;
	    margin-bottom: -5px;
	    z-index: 1;
	    position: relative;
	    border-bottom-right-radius: 0;
	    border-bottom-left-radius: 0;
        border-width: 2px;
    	border-style: solid;
	    border-radius: 4px;
	}
	.highlight {
		margin: 0!important;
		padding: 0;
	    color: inherit;
	    background: inherit;
	}
&lt;/style&gt;
&lt;h2 id=&quot;template&quot;&gt;&lt;a name=&quot;模板&quot; class=&quot;reference-link&quot;&gt;&lt;/a&gt;模板&lt;/h2&gt;
&lt;img src=&quot;/resources/template.png&quot; alt=&quot;&quot; align=&quot;left&quot; style=&quot;width:240px; margin-right:10px&quot;&gt;
&lt;p&gt;我们通过组件的自带的&lt;strong&gt;模板&lt;/strong&gt;来定义视图。模板以HTML形式存在，用来告诉Angular如何渲染组件(视图)。&lt;/p&gt;
&lt;p&gt;多数情况下，模板看起来很像标准HTML……当然也有一小点儿奇怪的地方。下面是&lt;code&gt;HeroList&lt;/code&gt;组件的一个模板。&lt;/p&gt;
    
    </summary>
    
      <category term="Angular2" scheme="http://xiahl.top/categories/Angular2/"/>
    
    
      <category term="Basics" scheme="http://xiahl.top/tags/Basics/"/>
    
      <category term="Architecture" scheme="http://xiahl.top/tags/Architecture/"/>
    
      <category term="Template" scheme="http://xiahl.top/tags/Template/"/>
    
  </entry>
  
  <entry>
    <title>Angular2-架构-Component</title>
    <link href="http://xiahl.top/2016/07/09/2016-07-09-angular2-architecture-component/"/>
    <id>http://xiahl.top/2016/07/09/2016-07-09-angular2-architecture-component/</id>
    <published>2016-07-09T05:48:00.000Z</published>
    <updated>2016-07-09T13:44:12.760Z</updated>
    
    <content type="html">&lt;style type=&quot;text/css&quot;&gt;
	em {
	    font-style: normal!important;
	    font-weight: bold;
	}
	.l-sub-section {
		margin: 100px 0 32px 0;
		padding: 16px 24px;
		background: #f5f6f7;
		border-left: 4px solid #8BC34A;
		border-radius: 4px;
	}
	.example-title {
	    color: #fff;
	    padding: 0 16px;
	    font-size: 14px;
	    border-color: #1976D2;
	    background: #1976D2;
	    box-shadow: none;
	    line-height: 32px;
	    margin-bottom: -5px;
	    z-index: 1;
	    position: relative;
	    border-bottom-right-radius: 0;
	    border-bottom-left-radius: 0;
        border-width: 2px;
    	border-style: solid;
	    border-radius: 4px;
	}
&lt;/style&gt;
&lt;h2 id=&quot;component&quot;&gt;&lt;a name=&quot;组件&quot; class=&quot;reference-link&quot;&gt;&lt;/a&gt;组件&lt;/h2&gt;
&lt;img src=&quot;/resources/hero-component.png&quot; alt=&quot;&quot; align=&quot;left&quot; style=&quot;width:240px; margin-right:10px&quot;&gt;
&lt;p&gt;&lt;strong&gt;组件&lt;/strong&gt;控制屏幕中巴掌大的那么一小块地方，这块地方被称之为&lt;em&gt;视图&lt;/em&gt;。应用的“外壳”包括一些导航链接、英雄列表、英雄编辑器…… 它们都是由组件控制的视图。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;我们在类中定义组件的应用逻辑(它被用来为视图提供支持)。组件通过一些由属性和方法组成的API与视图交互。&lt;/p&gt;
&lt;p&gt;&lt;a id=&quot;component-code&quot;&gt;&lt;/a&gt;比如，在&lt;code&gt;HeroListComponent&lt;/code&gt;组件中，可能有一个&lt;code&gt;heroes&lt;/code&gt;属性，它返回一个英雄的数组，而这些数据是从服务中取得的。它可能还有一个&lt;code&gt;selectHero()&lt;/code&gt;方法，当用户从列表中点击一个英雄时，用它来设置&lt;code&gt;selectedHero&lt;/code&gt;属性。它可能是像这样的一个类：&lt;/p&gt;
&lt;div class=&quot;example-title&quot;&gt;app/hero-list.component.ts&lt;/div&gt;
&lt;pre class=&quot;javascript&quot; style=&quot;color: #c7254e;&quot;&gt;
&lt;code&gt;
export class HeroListComponent implements OnInit {
  heroes: Hero[];
  selectedHero: Hero;
  constructor(private service: HeroService) { }
  ngOnInit() {
    this.heroes = this.service.getHeroes();
  }
  selectHero(hero: Hero) { this.selectedHero = hero; }
}
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;当用户在这个应用中“移动”时，Angular会创建、更新和销毁组件。
开发人员可以通过&lt;strong&gt;生命周期钩子&lt;/strong&gt;在组件生命周期的各个时间点上插入自己的操作。&lt;/p&gt;
&lt;div class=&quot;l-sub-section&quot; style=&quot;margin-top:10px;&quot;&gt;
&lt;p&gt;我们不会在这个例子中展示这些钩子，先在脑子中留个记号，将来再翻出来讲。&lt;/p&gt;
&lt;p&gt;你可能会好奇，谁来调用那个构造函数？谁为服务提供参数？
目前，你只要信任Angular会在合适的时机调用构造函数，并在需要的时候给出一个合适的&lt;code&gt;HeroService&lt;/code&gt;实例。&lt;/p&gt;
&lt;/div&gt;</content>
    
    <summary type="html">
    
      &lt;style type=&quot;text/css&quot;&gt;
	em {
	    font-style: normal!important;
	    font-weight: bold;
	}
	.l-sub-section {
		margin: 100px 0 32px 0;
		padding: 16px 24px;
		background: #f5f6f7;
		border-left: 4px solid #8BC34A;
		border-radius: 4px;
	}
	.example-title {
	    color: #fff;
	    padding: 0 16px;
	    font-size: 14px;
	    border-color: #1976D2;
	    background: #1976D2;
	    box-shadow: none;
	    line-height: 32px;
	    margin-bottom: -5px;
	    z-index: 1;
	    position: relative;
	    border-bottom-right-radius: 0;
	    border-bottom-left-radius: 0;
        border-width: 2px;
    	border-style: solid;
	    border-radius: 4px;
	}
&lt;/style&gt;
&lt;h2 id=&quot;component&quot;&gt;&lt;a name=&quot;组件&quot; class=&quot;reference-link&quot;&gt;&lt;/a&gt;组件&lt;/h2&gt;
&lt;img src=&quot;/resources/hero-component.png&quot; alt=&quot;&quot; align=&quot;left&quot; style=&quot;width:240px; margin-right:10px&quot;&gt;
&lt;p&gt;&lt;strong&gt;组件&lt;/strong&gt;控制屏幕中巴掌大的那么一小块地方，这块地方被称之为&lt;em&gt;视图&lt;/em&gt;。应用的“外壳”包括一些导航链接、英雄列表、英雄编辑器…… 它们都是由组件控制的视图。&lt;/p&gt;
    
    </summary>
    
      <category term="Angular2" scheme="http://xiahl.top/categories/Angular2/"/>
    
    
      <category term="Basics" scheme="http://xiahl.top/tags/Basics/"/>
    
      <category term="Architecture" scheme="http://xiahl.top/tags/Architecture/"/>
    
      <category term="Component" scheme="http://xiahl.top/tags/Component/"/>
    
  </entry>
  
  <entry>
    <title>Angular2-架构-Module</title>
    <link href="http://xiahl.top/2016/07/08/2016-07-08-angular2-architecture-module/"/>
    <id>http://xiahl.top/2016/07/08/2016-07-08-angular2-architecture-module/</id>
    <published>2016-07-08T13:54:00.000Z</published>
    <updated>2016-07-09T13:43:17.558Z</updated>
    
    <content type="html">&lt;style type=&quot;text/css&quot;&gt;
	em {
	    font-style: normal!important;
	    font-weight: bold;
	}
	.l-sub-section {
		margin: 100px 0 32px 0;
		padding: 16px 24px;
		background: #f5f6f7;
		border-left: 4px solid #8BC34A;
		border-radius: 4px;
	}
	.example-title {
	    color: #fff;
	    padding: 0 16px;
	    font-size: 14px;
	    border-color: #1976D2;
	    background: #1976D2;
	    box-shadow: none;
	    line-height: 32px;
	    margin-bottom: -5px;
	    z-index: 1;
	    position: relative;
	    border-bottom-right-radius: 0;
	    border-bottom-left-radius: 0;
        border-width: 2px;
    	border-style: solid;
	    border-radius: 4px;
	}
&lt;/style&gt;
&lt;p&gt;Angular 2 是一个用 HTML 和 JavaScript 构建客户端应用的框架。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;该框架包括一系列紧密合作的库，有些是核心库，有些是可选库。&lt;/p&gt;
&lt;p&gt;我们这样写应用程序：用带 Angular 扩展语法的 HTML 写 &lt;strong&gt;模板&lt;/strong&gt; ，用 &lt;strong&gt;组件&lt;/strong&gt; 类管理这些模板，用 &lt;strong&gt;服务&lt;/strong&gt; 添加应用逻辑，用根组件完成 Angular &lt;strong&gt;启动&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;Angular 在浏览器中接管、展现应用的内容，并根据我们提供的操作指令响应用户的交互。&lt;/p&gt;
&lt;p&gt;当然，这只是冰山一角。随着内容的深入，我们还会学到更多的细节。 我们先来看看宏观图景。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/resources/overview2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这个架构图展现了 Angular 应用中的 8 个主要构造块：&lt;/p&gt;
&lt;ol style=&quot;padding:0;&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;#module&quot; title=&quot;模块 (Module)&quot;&gt;模块 (Module)&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#component&quot; title=&quot;[组件 (Component)]&quot;&gt;组件 (Component)&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#template&quot; title=&quot;[模板 (Template)]&quot;&gt;模板 (Template)&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#metadata&quot; title=&quot;[元数据 (Metadata)]&quot;&gt;元数据 (Metadata)&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#data-binding&quot; title=&quot;[数据绑定 (Data Binding)]&quot;&gt;数据绑定 (Data Binding)&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#directive&quot; title=&quot;[指令 (Directive)]&quot;&gt;指令 (Directive)&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#service&quot; title=&quot;[服务 (Service)]&quot;&gt;服务 (Service)&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#dependency-injection&quot; title=&quot;[依赖注入 (Dependency Injection)]&quot;&gt;依赖注入 (Dependency Injection)&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;掌握这 8 点，我们就可以开始使用 Angular 2 编写应用程序了。&lt;/p&gt;
&lt;blockquote&gt;
    &lt;p&gt;本章所引用的代码可以从这个 &lt;a href=&quot;https://angular.cn/resources/live-examples/architecture/ts/plnkr.html&quot; title=&quot;在线例子&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;在线例子&lt;/a&gt; 中找到。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;module&quot;&gt;&lt;a name=&quot;模块&quot; class=&quot;reference-link&quot;&gt;&lt;/a&gt;模块&lt;/h2&gt;
&lt;img src=&quot;/resources/module.png&quot; alt=&quot;&quot; align=&quot;left&quot; style=&quot;width:240px; margin-right:10px&quot;&gt;
&lt;p&gt;Angular 应用是模块化的。&lt;/p&gt;
&lt;p&gt;应用程序通常都是由很多 &lt;strong&gt;模块&lt;/strong&gt; 组装而成的。&lt;/p&gt;
&lt;p&gt;典型的模块是一个内聚的代码块，用以实现单一的目的。 在这些代码中，模块会 &lt;strong&gt;导出&lt;/strong&gt; 一些东西，最典型的就是类。&lt;/p&gt;
&lt;div class=&quot;l-sub-section&quot;&gt;
    &lt;h3&gt;模块是可选的&lt;/h3&gt;    
    &lt;p&gt;我们强烈推荐使用模块化设计。 TypeScript 对 ES2015 的模块语法支持很好，文档假设我们会利用这些语法来应用模块化方案。这就是为什么要把 &lt;em&gt; 模块 &lt;/em&gt; 列为基本构造块之一。&lt;/p&gt;
    &lt;p&gt; Angular 本身并不需要模块化方案，也不需要使用这种特定的语法。如果你不喜欢，可以不用它。 就算你避开 &lt;code&gt;import&lt;/code&gt; 和 &lt;code&gt;export&lt;/code&gt; 语句，每章也会为你提供很多 ( 知识 ) 。&lt;/p&gt;
    &lt;p&gt;在 JavaScript( 你可以从页面顶部的组合框选择 JavaScript) 分支下，可以找到如何安装和组织的线索。 它示范了如何用老版本的 JavaScript 语言，在没有模块化系统支持的情况下进行 Angular 2 应用程序的开发。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;我们遇到的第一个模块，很可能就是用于导出 &lt;em&gt; 组件 &lt;/em&gt; 类的那个。
组件是 Angular 中的基本构造块之一，我们会编写很多组件。我们将会在下一段继续讨论组件。
目前，只要知道组件类是从模块中导出一种东西就行了。&lt;/p&gt;
&lt;p&gt;大多数应用都有一个 &lt;code&gt;AppComponent&lt;/code&gt; 。按照惯例，它位于一个名叫 &lt;code&gt;app.component.ts&lt;/code&gt; 的文件中。
打开它，我们将会看到一个 &lt;code&gt;export&lt;/code&gt; 语句，就像这样：&lt;/p&gt;
&lt;div class=&quot;example-title&quot;&gt;app/app.component.ts (节选)&lt;/div&gt;
&lt;pre class=&quot;javascript&quot; style=&quot;color: #c7254e;&quot;&gt;&lt;code&gt;export class AppComponent { }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; &lt;code&gt;export&lt;/code&gt; 语句告诉 TypeScript ：这是一个模块，其中 &lt;code&gt;AppComponent&lt;/code&gt; 类是公开的，可以被应用程序中的其它模块访问。&lt;/p&gt;
&lt;p&gt;当需要引用 &lt;code&gt;AppComponent&lt;/code&gt; 时，要像这样 &lt;strong&gt; 导入 &lt;/strong&gt; 它：&lt;/p&gt;
&lt;div class=&quot;example-title&quot;&gt;app/main.ts (节选)&lt;/div&gt;
&lt;pre class=&quot;javascript&quot; style=&quot;color: #c7254e;&quot;&gt;&lt;code&gt;import { AppComponent } from &#39;./app.component&#39;;&lt;/code&gt;&lt;/pre&gt;
&lt;p id=&quot;&quot; class=&quot;translated translated-cn&quot;&gt; &lt;code&gt;import&lt;/code&gt; 语句告诉系统，它能从附近名叫 &lt;code&gt;app.component&lt;/code&gt; 的文件中获得 &lt;code&gt;AppComponent&lt;/code&gt; 组件。
 &lt;strong&gt; 模块名 &lt;/strong&gt;( 又叫模块 ID) 通常和去掉扩展名后的文件名相同。&lt;/p&gt;

&lt;h2 id=&quot;module&quot;&gt;&lt;a name=&quot;模块库&quot; class=&quot;reference-link&quot;&gt;&lt;/a&gt;模块库&lt;/h2&gt;
&lt;img src=&quot;/resources/library-module.png&quot; alt=&quot;&quot; align=&quot;left&quot; style=&quot;width:240px; margin-right:10px&quot;&gt;
&lt;p&gt;有些模块是其它模块的库。&lt;/p&gt;
&lt;p&gt;Angular本身就是通过npm包发布的一组模块库，它们都以&lt;code&gt;@angular&lt;/code&gt;为前缀。
每个Angular库中都包含一个&lt;strong&gt;封装桶&lt;/strong&gt;模块。
它实际上是一个公开的外观层(façade)，囊括了一些逻辑相关的私有模块。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@angular/core&lt;/code&gt;库是主要的Angular模块库，从这里能获得大部分需要的东西。
&lt;br clear=&quot;all&quot;&gt;&lt;/p&gt;
&lt;p&gt;还有另一些重要的Angular模块库，比如&lt;code&gt;@angular/common&lt;/code&gt;、&lt;code&gt;@angular/router&lt;/code&gt; 和 &lt;code&gt;@angular/http&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;从Angular模块库中导入所需内容的方式都差不多。比如，从&lt;em&gt;@angular/core&lt;/em&gt;中导入Angular &lt;strong&gt;&lt;code&gt;Component&lt;/code&gt;&lt;em&gt;函数&lt;/em&gt;&lt;/strong&gt;的代码是这样的：&lt;/p&gt;
&lt;pre class=&quot;javascript&quot; style=&quot;color: #c7254e;&quot;&gt;&lt;code&gt;import { Component } from &#39;@angular/core&#39;;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;比较一下它和前面导入&lt;code&gt;AppComponent&lt;/code&gt;时的语法。&lt;/p&gt;
&lt;pre class=&quot;javascript&quot; style=&quot;color: #c7254e;&quot;&gt;&lt;code&gt;import { AppComponent } from &#39;./app.component&#39;;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意到不同之处了吗？第一种，从Angular模块库中导入时，import语句引用的是“裸”模块名 —— &lt;code&gt;@angular/core&lt;/code&gt; —— &lt;em&gt;不带路径前缀&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;当我们从&lt;em&gt;自己的&lt;/em&gt;文件中导入时，模块名中带有路径前缀。在这个例子中，前缀是一个相对路径(./)。这表示源模块和想导入它的模块位于同一个目录中(./)。如果源模块位于其它位置，我们还可以向上引用应用目录结构中的任意路径(如&lt;code&gt;../../../somewhere/&lt;/code&gt;)。&lt;/p&gt;
&lt;div class=&quot;l-sub-section&quot; style=&quot;margin-top:10px;&quot;&gt;
	&lt;p&gt;这里导入和导出使用的是ECMAScript 2015 (ES2015)的语法。要学习关于此语法的更多知识，参见&lt;a href=&quot;http://www.2ality.com/2014/09/es6-modules-final.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;，在网上很多别的地方也能找到相关资料。&lt;/p&gt;
	&lt;p&gt;“模块加载与导入”背后的基础设施是一个很重要的话题，但它不在Angular简介的范围内。目前的焦点是我们的应用程序，只需要知道&lt;em&gt;import&lt;/em&gt;和&lt;em&gt;export&lt;/em&gt;就够了。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;这里的关键点是：&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;p&gt;Angular应用是由模块组成的。&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;&lt;p&gt;模块导出一些东西 —— 类，函数，值，供其它模块导入。&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;&lt;p&gt;首选的写法是把应用写成一组模块，每个模块只导出一样东西。&lt;/p&gt;
	&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们写的第一个模块将会导出一个组件。&lt;/p&gt;</content>
    
    <summary type="html">
    
      &lt;style type=&quot;text/css&quot;&gt;
	em {
	    font-style: normal!important;
	    font-weight: bold;
	}
	.l-sub-section {
		margin: 100px 0 32px 0;
		padding: 16px 24px;
		background: #f5f6f7;
		border-left: 4px solid #8BC34A;
		border-radius: 4px;
	}
	.example-title {
	    color: #fff;
	    padding: 0 16px;
	    font-size: 14px;
	    border-color: #1976D2;
	    background: #1976D2;
	    box-shadow: none;
	    line-height: 32px;
	    margin-bottom: -5px;
	    z-index: 1;
	    position: relative;
	    border-bottom-right-radius: 0;
	    border-bottom-left-radius: 0;
        border-width: 2px;
    	border-style: solid;
	    border-radius: 4px;
	}
&lt;/style&gt;
&lt;p&gt;Angular 2 是一个用 HTML 和 JavaScript 构建客户端应用的框架。&lt;/p&gt;
    
    </summary>
    
      <category term="Angular2" scheme="http://xiahl.top/categories/Angular2/"/>
    
    
      <category term="Basics" scheme="http://xiahl.top/tags/Basics/"/>
    
      <category term="Architecture" scheme="http://xiahl.top/tags/Architecture/"/>
    
      <category term="Module" scheme="http://xiahl.top/tags/Module/"/>
    
  </entry>
  
  <entry>
    <title>markdown编辑器例子-02</title>
    <link href="http://xiahl.top/2016/07/08/2016-07-08-editor-markdown-02/"/>
    <id>http://xiahl.top/2016/07/08/2016-07-08-editor-markdown-02/</id>
    <published>2016-07-08T13:40:00.000Z</published>
    <updated>2016-07-08T13:41:43.841Z</updated>
    
    <content type="html">&lt;p&gt;Markdown Demo&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;主要特性&quot;&gt;&lt;a href=&quot;#主要特性&quot; class=&quot;headerlink&quot; title=&quot;主要特性&quot;&gt;&lt;/a&gt;主要特性&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;支持“标准”Markdown / CommonMark和Github风格的语法，也可变身为代码编辑器；&lt;/li&gt;
&lt;li&gt;支持实时预览、图片（跨域）上传、预格式文本/代码/表格插入、代码折叠、搜索替换、只读模式、自定义样式主题和多语言语法高亮等功能；&lt;/li&gt;
&lt;li&gt;支持ToC（Table of Contents）、Emoji表情、Task lists、@链接等Markdown扩展语法；&lt;/li&gt;
&lt;li&gt;支持TeX科学公式（基于KaTeX）、流程图 Flowchart 和 时序图 Sequence Diagram;&lt;/li&gt;
&lt;li&gt;支持识别和解析HTML标签，并且支持自定义过滤标签解析，具有可靠的安全性和几乎无限的扩展性；&lt;/li&gt;
&lt;li&gt;支持 AMD / CMD 模块化加载（支持 Require.js &amp;amp; Sea.js），并且支持自定义扩展插件；&lt;/li&gt;
&lt;li&gt;兼容主流的浏览器（IE8+）和Zepto.js，且支持iPad等平板设备；&lt;/li&gt;
&lt;li&gt;支持自定义主题样式；&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Editor-md&quot;&gt;&lt;a href=&quot;#Editor-md&quot; class=&quot;headerlink&quot; title=&quot;Editor.md&quot;&gt;&lt;/a&gt;Editor.md&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://pandao.github.io/editor.md/images/logos/editormd-logo-180x180.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img.shields.io/github/stars/pandao/editor.md.svg&quot; alt=&quot;&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/forks/pandao/editor.md.svg&quot; alt=&quot;&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/tag/pandao/editor.md.svg&quot; alt=&quot;&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/release/pandao/editor.md.svg&quot; alt=&quot;&quot;&gt; &lt;img src=&quot;https://img.shields.io/github/issues/pandao/editor.md.svg&quot; alt=&quot;&quot;&gt; &lt;img src=&quot;https://img.shields.io/bower/v/editor.md.svg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;目录 (Table of Contents)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[TOCM]&lt;/p&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;Heading-1&quot;&gt;&lt;a href=&quot;#Heading-1&quot; class=&quot;headerlink&quot; title=&quot;Heading 1&quot;&gt;&lt;/a&gt;Heading 1&lt;/h1&gt;&lt;h2 id=&quot;Heading-2&quot;&gt;&lt;a href=&quot;#Heading-2&quot; class=&quot;headerlink&quot; title=&quot;Heading 2&quot;&gt;&lt;/a&gt;Heading 2&lt;/h2&gt;&lt;h3 id=&quot;Heading-3&quot;&gt;&lt;a href=&quot;#Heading-3&quot; class=&quot;headerlink&quot; title=&quot;Heading 3&quot;&gt;&lt;/a&gt;Heading 3&lt;/h3&gt;&lt;h4 id=&quot;Heading-4&quot;&gt;&lt;a href=&quot;#Heading-4&quot; class=&quot;headerlink&quot; title=&quot;Heading 4&quot;&gt;&lt;/a&gt;Heading 4&lt;/h4&gt;&lt;h5 id=&quot;Heading-5&quot;&gt;&lt;a href=&quot;#Heading-5&quot; class=&quot;headerlink&quot; title=&quot;Heading 5&quot;&gt;&lt;/a&gt;Heading 5&lt;/h5&gt;&lt;h6 id=&quot;Heading-6&quot;&gt;&lt;a href=&quot;#Heading-6&quot; class=&quot;headerlink&quot; title=&quot;Heading 6&quot;&gt;&lt;/a&gt;Heading 6&lt;/h6&gt;&lt;h1 id=&quot;Heading-1-link-Heading-link&quot;&gt;&lt;a href=&quot;#Heading-1-link-Heading-link&quot; class=&quot;headerlink&quot; title=&quot;Heading 1 link Heading link&quot;&gt;&lt;/a&gt;Heading 1 link &lt;a href=&quot;https://github.com/pandao/editor.md&quot; title=&quot;Heading link&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Heading link&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&quot;Heading-2-link-Heading-link&quot;&gt;&lt;a href=&quot;#Heading-2-link-Heading-link&quot; class=&quot;headerlink&quot; title=&quot;Heading 2 link Heading link&quot;&gt;&lt;/a&gt;Heading 2 link &lt;a href=&quot;https://github.com/pandao/editor.md&quot; title=&quot;Heading link&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Heading link&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&quot;Heading-3-link-Heading-link&quot;&gt;&lt;a href=&quot;#Heading-3-link-Heading-link&quot; class=&quot;headerlink&quot; title=&quot;Heading 3 link Heading link&quot;&gt;&lt;/a&gt;Heading 3 link &lt;a href=&quot;https://github.com/pandao/editor.md&quot; title=&quot;Heading link&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Heading link&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&quot;Heading-4-link-Heading-link-Heading-link-Heading-link&quot;&gt;&lt;a href=&quot;#Heading-4-link-Heading-link-Heading-link-Heading-link&quot; class=&quot;headerlink&quot; title=&quot;Heading 4 link Heading link Heading link Heading link&quot;&gt;&lt;/a&gt;Heading 4 link &lt;a href=&quot;https://github.com/pandao/editor.md&quot; title=&quot;Heading link&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Heading link&lt;/a&gt; Heading link &lt;a href=&quot;https://github.com/pandao/editor.md&quot; title=&quot;Heading link&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Heading link&lt;/a&gt;&lt;/h4&gt;&lt;h5 id=&quot;Heading-5-link-Heading-link&quot;&gt;&lt;a href=&quot;#Heading-5-link-Heading-link&quot; class=&quot;headerlink&quot; title=&quot;Heading 5 link Heading link&quot;&gt;&lt;/a&gt;Heading 5 link &lt;a href=&quot;https://github.com/pandao/editor.md&quot; title=&quot;Heading link&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Heading link&lt;/a&gt;&lt;/h5&gt;&lt;h6 id=&quot;Heading-6-link-Heading-link&quot;&gt;&lt;a href=&quot;#Heading-6-link-Heading-link&quot; class=&quot;headerlink&quot; title=&quot;Heading 6 link Heading link&quot;&gt;&lt;/a&gt;Heading 6 link &lt;a href=&quot;https://github.com/pandao/editor.md&quot; title=&quot;Heading link&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Heading link&lt;/a&gt;&lt;/h6&gt;&lt;h4 id=&quot;标题（用底线的形式）Heading-underline&quot;&gt;&lt;a href=&quot;#标题（用底线的形式）Heading-underline&quot; class=&quot;headerlink&quot; title=&quot;标题（用底线的形式）Heading (underline)&quot;&gt;&lt;/a&gt;标题（用底线的形式）Heading (underline)&lt;/h4&gt;&lt;h1 id=&quot;This-is-an-H1&quot;&gt;&lt;a href=&quot;#This-is-an-H1&quot; class=&quot;headerlink&quot; title=&quot;This is an H1&quot;&gt;&lt;/a&gt;This is an H1&lt;/h1&gt;&lt;h2 id=&quot;This-is-an-H2&quot;&gt;&lt;a href=&quot;#This-is-an-H2&quot; class=&quot;headerlink&quot; title=&quot;This is an H2&quot;&gt;&lt;/a&gt;This is an H2&lt;/h2&gt;&lt;h3 id=&quot;字符效果和横线等&quot;&gt;&lt;a href=&quot;#字符效果和横线等&quot; class=&quot;headerlink&quot; title=&quot;字符效果和横线等&quot;&gt;&lt;/a&gt;字符效果和横线等&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;&lt;del&gt;删除线&lt;/del&gt; &lt;s&gt;删除线（开启识别HTML标签时）&lt;/s&gt;&lt;br&gt;&lt;em&gt;斜体字&lt;/em&gt;      &lt;em&gt;斜体字&lt;/em&gt;&lt;br&gt;&lt;strong&gt;粗体&lt;/strong&gt;  &lt;strong&gt;粗体&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;&lt;em&gt;粗斜体&lt;/em&gt;&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;粗斜体&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;上标：X&lt;sub&gt;2&lt;/sub&gt;，下标：O&lt;sup&gt;2&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缩写(同HTML的abbr标签)&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;即更长的单词或短语的缩写形式，前提是开启识别HTML标签时，已默认开启&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &lt;abbr title=&quot;Hyper Text Markup Language&quot;&gt;HTML&lt;/abbr&gt; specification is maintained by the &lt;abbr title=&quot;World Wide Web Consortium&quot;&gt;W3C&lt;/abbr&gt;.&lt;/p&gt;
&lt;h3 id=&quot;引用-Blockquotes&quot;&gt;&lt;a href=&quot;#引用-Blockquotes&quot; class=&quot;headerlink&quot; title=&quot;引用 Blockquotes&quot;&gt;&lt;/a&gt;引用 Blockquotes&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;引用文本 Blockquotes&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;引用的行内混合 Blockquotes&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;引用：如果想要插入空白换行&lt;code&gt;即&amp;lt;br /&amp;gt;标签&lt;/code&gt;，在插入处先键入两个以上的空格然后回车即可，&lt;a href=&quot;http://localhost/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;普通链接&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;锚点与链接-Links&quot;&gt;&lt;a href=&quot;#锚点与链接-Links&quot; class=&quot;headerlink&quot; title=&quot;锚点与链接 Links&quot;&gt;&lt;/a&gt;锚点与链接 Links&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://localhost/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;普通链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://localhost/&quot; title=&quot;普通链接带标题&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;普通链接带标题&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;直接链接：&lt;a href=&quot;https://github.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.this-anchor-link.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;锚点链接&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;GFM a-tail link @pandao&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;@pandao&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;多语言代码高亮-Codes&quot;&gt;&lt;a href=&quot;#多语言代码高亮-Codes&quot; class=&quot;headerlink&quot; title=&quot;多语言代码高亮 Codes&quot;&gt;&lt;/a&gt;多语言代码高亮 Codes&lt;/h3&gt;&lt;h4 id=&quot;行内代码-Inline-code&quot;&gt;&lt;a href=&quot;#行内代码-Inline-code&quot; class=&quot;headerlink&quot; title=&quot;行内代码 Inline code&quot;&gt;&lt;/a&gt;行内代码 Inline code&lt;/h4&gt;&lt;p&gt;执行命令：&lt;code&gt;npm install marked&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;缩进风格&quot;&gt;&lt;a href=&quot;#缩进风格&quot; class=&quot;headerlink&quot; title=&quot;缩进风格&quot;&gt;&lt;/a&gt;缩进风格&lt;/h4&gt;&lt;p&gt;即缩进四个空格，也做为实现类似&lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt;预格式化文本(Preformatted Text)的功能。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php
    echo &amp;quot;Hello world!&amp;quot;;
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;预格式化文本：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;| First Header  | Second Header |
| ------------- | ------------- |
| Content Cell  | Content Cell  |
| Content Cell  | Content Cell  |
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;JS代码&quot;&gt;&lt;a href=&quot;#JS代码&quot; class=&quot;headerlink&quot; title=&quot;JS代码　&quot;&gt;&lt;/a&gt;JS代码　&lt;/h4&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;Hello world!&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; box = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; box.fn.init();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    box.prototype = box.fn = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        init : &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;box.init()&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		add : &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;str&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			alert(&lt;span class=&quot;string&quot;&gt;&quot;add&quot;&lt;/span&gt;, str);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		remove : &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;str&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			alert(&lt;span class=&quot;string&quot;&gt;&quot;remove&quot;&lt;/span&gt;, str);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    box.fn.init.prototype = box.fn;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.box =box;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; testBox = box();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;testBox.add(&lt;span class=&quot;string&quot;&gt;&quot;jQuery&quot;&lt;/span&gt;).remove(&lt;span class=&quot;string&quot;&gt;&quot;jQuery&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;HTML代码-HTML-codes&quot;&gt;&lt;a href=&quot;#HTML代码-HTML-codes&quot; class=&quot;headerlink&quot; title=&quot;HTML代码 HTML codes&quot;&gt;&lt;/a&gt;HTML代码 HTML codes&lt;/h4&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;mate&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;charest&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;Hello world!&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;Hello world!&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;图片-Images&quot;&gt;&lt;a href=&quot;#图片-Images&quot; class=&quot;headerlink&quot; title=&quot;图片 Images&quot;&gt;&lt;/a&gt;图片 Images&lt;/h3&gt;&lt;p&gt;Image:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pandao.github.io/editor.md/examples/images/4.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Follow your heart.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://pandao.github.io/editor.md/examples/images/8.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;图为：厦门白城沙滩&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;图片加链接 (Image + Link)：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://pandao.github.io/editor.md/examples/images/7.jpg&quot; title=&quot;李健首张专辑《似水流年》封面&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;https://pandao.github.io/editor.md/examples/images/7.jpg&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;图为：李健首张专辑《似水流年》封面&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;列表-Lists&quot;&gt;&lt;a href=&quot;#列表-Lists&quot; class=&quot;headerlink&quot; title=&quot;列表 Lists&quot;&gt;&lt;/a&gt;列表 Lists&lt;/h3&gt;&lt;h4 id=&quot;无序列表（减号）Unordered-Lists&quot;&gt;&lt;a href=&quot;#无序列表（减号）Unordered-Lists&quot; class=&quot;headerlink&quot; title=&quot;无序列表（减号）Unordered Lists (-)&quot;&gt;&lt;/a&gt;无序列表（减号）Unordered Lists (-)&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;列表一&lt;/li&gt;
&lt;li&gt;列表二&lt;/li&gt;
&lt;li&gt;列表三&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;无序列表（星号）Unordered-Lists&quot;&gt;&lt;a href=&quot;#无序列表（星号）Unordered-Lists&quot; class=&quot;headerlink&quot; title=&quot;无序列表（星号）Unordered Lists (*)&quot;&gt;&lt;/a&gt;无序列表（星号）Unordered Lists (*)&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;列表一&lt;/li&gt;
&lt;li&gt;列表二&lt;/li&gt;
&lt;li&gt;列表三&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;无序列表（加号和嵌套）Unordered-Lists&quot;&gt;&lt;a href=&quot;#无序列表（加号和嵌套）Unordered-Lists&quot; class=&quot;headerlink&quot; title=&quot;无序列表（加号和嵌套）Unordered Lists (+)&quot;&gt;&lt;/a&gt;无序列表（加号和嵌套）Unordered Lists (+)&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;列表一&lt;/li&gt;
&lt;li&gt;列表二&lt;ul&gt;
&lt;li&gt;列表二-1&lt;/li&gt;
&lt;li&gt;列表二-2&lt;/li&gt;
&lt;li&gt;列表二-3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;列表三&lt;ul&gt;
&lt;li&gt;列表一&lt;/li&gt;
&lt;li&gt;列表二&lt;/li&gt;
&lt;li&gt;列表三&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;有序列表-Ordered-Lists&quot;&gt;&lt;a href=&quot;#有序列表-Ordered-Lists&quot; class=&quot;headerlink&quot; title=&quot;有序列表 Ordered Lists (-)&quot;&gt;&lt;/a&gt;有序列表 Ordered Lists (-)&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;第一行&lt;/li&gt;
&lt;li&gt;第二行&lt;/li&gt;
&lt;li&gt;第三行&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;GFM-task-list&quot;&gt;&lt;a href=&quot;#GFM-task-list&quot; class=&quot;headerlink&quot; title=&quot;GFM task list&quot;&gt;&lt;/a&gt;GFM task list&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;[x] GFM task list 1&lt;/li&gt;
&lt;li&gt;[x] GFM task list 2&lt;/li&gt;
&lt;li&gt;[ ] GFM task list 3&lt;ul&gt;
&lt;li&gt;[ ] GFM task list 3-1&lt;/li&gt;
&lt;li&gt;[ ] GFM task list 3-2&lt;/li&gt;
&lt;li&gt;[ ] GFM task list 3-3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[ ] GFM task list 4&lt;ul&gt;
&lt;li&gt;[ ] GFM task list 4-1&lt;/li&gt;
&lt;li&gt;[ ] GFM task list 4-2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;绘制表格-Tables&quot;&gt;&lt;a href=&quot;#绘制表格-Tables&quot; class=&quot;headerlink&quot; title=&quot;绘制表格 Tables&quot;&gt;&lt;/a&gt;绘制表格 Tables&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th style=&quot;text-align:right&quot;&gt;价格&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;数量&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;计算机&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;$1600&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;手机&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;$12&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;管线&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;$1&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;234&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;First Header&lt;/th&gt;
&lt;th&gt;Second Header&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;td&gt;Content Cell &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;First Header&lt;/th&gt;
&lt;th&gt;Second Header&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Function name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;help()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Display the help window.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;destroy()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Destroy your computer!&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Left-Aligned&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Center Aligned&lt;/th&gt;
&lt;th style=&quot;text-align:right&quot;&gt;Right Aligned&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;col 3 is&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;some wordy text&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;$1600&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;col 2 is&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;centered&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;$12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;zebra stripes&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;are neat&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;$1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Item&lt;/th&gt;
&lt;th style=&quot;text-align:right&quot;&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Computer&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;$1600&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Phone&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;$12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pipe&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;$1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h4 id=&quot;特殊符号-HTML-Entities-Codes&quot;&gt;&lt;a href=&quot;#特殊符号-HTML-Entities-Codes&quot; class=&quot;headerlink&quot; title=&quot;特殊符号 HTML Entities Codes&quot;&gt;&lt;/a&gt;特殊符号 HTML Entities Codes&lt;/h4&gt;&lt;p&gt;&amp;copy; &amp;amp;  &amp;uml; &amp;trade; &amp;iexcl; &amp;pound;&lt;br&gt;&amp;amp; &amp;lt; &amp;gt; &amp;yen; &amp;euro; &amp;reg; &amp;plusmn; &amp;para; &amp;sect; &amp;brvbar; &amp;macr; &amp;laquo; &amp;middot; &lt;/p&gt;
&lt;p&gt;X&amp;sup2; Y&amp;sup3; &amp;frac34; &amp;frac14;  &amp;times;  &amp;divide;   &amp;raquo;&lt;/p&gt;
&lt;p&gt;18&amp;ordm;C  &amp;quot;  &amp;apos;&lt;/p&gt;
&lt;h3 id=&quot;Emoji表情-smiley&quot;&gt;&lt;a href=&quot;#Emoji表情-smiley&quot; class=&quot;headerlink&quot; title=&quot;Emoji表情 :smiley:&quot;&gt;&lt;/a&gt;Emoji表情 :smiley:&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Blockquotes :star:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;GFM-task-lists-amp-Emoji-amp-fontAwesome-icon-emoji-amp-editormd-logo-emoji-editormd-logo-5x&quot;&gt;&lt;a href=&quot;#GFM-task-lists-amp-Emoji-amp-fontAwesome-icon-emoji-amp-editormd-logo-emoji-editormd-logo-5x&quot; class=&quot;headerlink&quot; title=&quot;GFM task lists &amp;amp; Emoji &amp;amp; fontAwesome icon emoji &amp;amp; editormd logo emoji :editormd-logo-5x:&quot;&gt;&lt;/a&gt;GFM task lists &amp;amp; Emoji &amp;amp; fontAwesome icon emoji &amp;amp; editormd logo emoji :editormd-logo-5x:&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;[x] :smiley: @mentions, :smiley: #refs, &lt;a href=&quot;&quot;&gt;links&lt;/a&gt;, &lt;strong&gt;formatting&lt;/strong&gt;, and &lt;del&gt;tags&lt;/del&gt; supported :editormd-logo:;&lt;/li&gt;
&lt;li&gt;[x] list syntax required (any unordered or ordered list supported) :editormd-logo-3x:;&lt;/li&gt;
&lt;li&gt;[x] [ ] :smiley: this is a complete item :smiley:;&lt;/li&gt;
&lt;li&gt;[ ] []this is an incomplete item &lt;a href=&quot;#&quot;&gt;test link&lt;/a&gt; :fa-star: @pandao; &lt;/li&gt;
&lt;li&gt;[ ] [ ]this is an incomplete item :fa-star: :fa-gear:;&lt;ul&gt;
&lt;li&gt;[ ] :smiley: this is an incomplete item &lt;a href=&quot;#&quot;&gt;test link&lt;/a&gt; :fa-star: :fa-gear:;&lt;/li&gt;
&lt;li&gt;[ ] :smiley: this is  :fa-star: :fa-gear: an incomplete item &lt;a href=&quot;#&quot;&gt;test link&lt;/a&gt;;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;反斜杠-Escape&quot;&gt;&lt;a href=&quot;#反斜杠-Escape&quot; class=&quot;headerlink&quot; title=&quot;反斜杠 Escape&quot;&gt;&lt;/a&gt;反斜杠 Escape&lt;/h4&gt;&lt;p&gt;*literal asterisks*&lt;/p&gt;
&lt;h3 id=&quot;科学公式-TeX-KaTeX&quot;&gt;&lt;a href=&quot;#科学公式-TeX-KaTeX&quot; class=&quot;headerlink&quot; title=&quot;科学公式 TeX(KaTeX)&quot;&gt;&lt;/a&gt;科学公式 TeX(KaTeX)&lt;/h3&gt;&lt;p&gt;$$E=mc^2$$&lt;/p&gt;
&lt;p&gt;行内的公式$$E=mc^2$$行内的公式，行内的$$E=mc^2$$公式。&lt;/p&gt;
&lt;p&gt;$$(\sqrt{3x-1}+(1+x)^2)$$&lt;/p&gt;
&lt;p&gt;$$\sin(\alpha)^{\theta}=\sum_{i=0}^{n}(x^i + \cos(f))$$&lt;/p&gt;
&lt;p&gt;多行公式：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;\displaystyle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;\left( \sum\_&amp;#123;k=1&amp;#125;^n a\_k b\_k \right)^2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;\leq&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;\left( \sum\_&amp;#123;k=1&amp;#125;^n a\_k^2 \right)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;\left( \sum\_&amp;#123;k=1&amp;#125;^n b\_k^2 \right)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;\displaystyle &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    \frac&amp;#123;1&amp;#125;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        \Bigl(\sqrt&amp;#123;\phi \sqrt&amp;#123;5&amp;#125;&amp;#125;-\phi\Bigr) e^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        \frac25 \pi&amp;#125;&amp;#125; = 1+\frac&amp;#123;e^&amp;#123;-2\pi&amp;#125;&amp;#125; &amp;#123;1+\frac&amp;#123;e^&amp;#123;-4\pi&amp;#125;&amp;#125; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        1+\frac&amp;#123;e^&amp;#123;-6\pi&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;1+\frac&amp;#123;e^&amp;#123;-8\pi&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;#123;1+\cdots&amp;#125; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;f(x) = \int_&amp;#123;-\infty&amp;#125;^\infty&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    \hat f(\xi)\,e^&amp;#123;2 \pi i \xi x&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    \,d\xi&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;绘制流程图-Flowchart&quot;&gt;&lt;a href=&quot;#绘制流程图-Flowchart&quot; class=&quot;headerlink&quot; title=&quot;绘制流程图 Flowchart&quot;&gt;&lt;/a&gt;绘制流程图 Flowchart&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;st=&amp;gt;start: 用户登陆&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;op=&amp;gt;operation: 登陆操作&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cond=&amp;gt;condition: 登陆成功 Yes or No?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;e=&amp;gt;end: 进入后台&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;st-&amp;gt;op-&amp;gt;cond&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cond(yes)-&amp;gt;e&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cond(no)-&amp;gt;op&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;绘制序列图-Sequence-Diagram&quot;&gt;&lt;a href=&quot;#绘制序列图-Sequence-Diagram&quot; class=&quot;headerlink&quot; title=&quot;绘制序列图 Sequence Diagram&quot;&gt;&lt;/a&gt;绘制序列图 Sequence Diagram&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Andrew-&amp;gt;China: Says Hello &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Note right of China: China thinks\nabout it &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;China--&amp;gt;Andrew: How are you? &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Andrew-&amp;gt;&amp;gt;China: I am good thanks!&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;End&quot;&gt;&lt;a href=&quot;#End&quot; class=&quot;headerlink&quot; title=&quot;End&quot;&gt;&lt;/a&gt;End&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;Markdown Demo&lt;br&gt;
    
    </summary>
    
      <category term="MarkDown" scheme="http://xiahl.top/categories/MarkDown/"/>
    
    
      <category term="MarkDown" scheme="http://xiahl.top/tags/MarkDown/"/>
    
  </entry>
  
  <entry>
    <title>markdown编辑器介绍-01</title>
    <link href="http://xiahl.top/2016/07/08/2016-07-08-editor-markdown-01/"/>
    <id>http://xiahl.top/2016/07/08/2016-07-08-editor-markdown-01/</id>
    <published>2016-07-08T13:16:00.000Z</published>
    <updated>2016-07-08T13:42:07.983Z</updated>
    
    <content type="html">&lt;p&gt;Markdown语法教程&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&quot;Markdown语法教程-Markdown-syntax-tutorial&quot;&gt;&lt;a href=&quot;#Markdown语法教程-Markdown-syntax-tutorial&quot; class=&quot;headerlink&quot; title=&quot;Markdown语法教程 (Markdown syntax tutorial)&quot;&gt;&lt;/a&gt;Markdown语法教程 (Markdown syntax tutorial)&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://daringfireball.net/projects/markdown/syntax/&quot; title=&quot;Markdown Syntax&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Markdown Syntax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://guides.github.com/features/mastering-markdown/&quot; title=&quot;Mastering Markdown&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mastering Markdown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://help.github.com/articles/markdown-basics/&quot; title=&quot;Markdown Basics&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Markdown Basics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://help.github.com/articles/github-flavored-markdown/&quot; title=&quot;GitHub Flavored Markdown&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub Flavored Markdown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.markdown.cn/&quot; title=&quot;Markdown 语法说明（简体中文）&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Markdown 语法说明（简体中文）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://markdown.tw/&quot; title=&quot;Markdown 語法說明（繁體中文）&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Markdown 語法說明（繁體中文）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;键盘快捷键-Keyboard-shortcuts&quot;&gt;&lt;a href=&quot;#键盘快捷键-Keyboard-shortcuts&quot; class=&quot;headerlink&quot; title=&quot;键盘快捷键 (Keyboard shortcuts)&quot;&gt;&lt;/a&gt;键盘快捷键 (Keyboard shortcuts)&lt;/h5&gt;&lt;blockquote&gt;
&lt;p&gt;If Editor.md code editor is on focus, you can use keyboard shortcuts.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Keyboard shortcuts (键盘快捷键)&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;说明&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;F9&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;切换实时预览&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Switch watch/unwatch&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;F10&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;全屏HTML预览(按 Shift + ESC 退出)&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Full preview HTML (Press Shift + ESC exit)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;F11&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;切换全屏状态&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Switch fullscreen (Press ESC exit)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Ctrl + 1~6 / Command + 1~6&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;插入标题1~6&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Insert heading 1~6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Ctrl + A / Command + A&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;全选&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Select all&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Ctrl + B / Command + B&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;插入粗体&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Insert bold&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Ctrl + D / Command + D&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;插入日期时间&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Insert datetime&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Ctrl + E / Command + E&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;插入Emoji符号&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Insert &amp;#58;emoji&amp;#58;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Ctrl + F / Command + F&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;查找/搜索&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Start searching&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Ctrl + G / Command + G&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;切换到下一个搜索结果项&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Find next search results&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Ctrl + H / Command + H&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;插入水平线&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Insert horizontal rule&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Ctrl + I / Command + I&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;插入斜体&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Insert italic&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Ctrl + K / Command + K&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;插入行内代码&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Insert inline code&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Ctrl + L / Command + L&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;插入链接&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Insert link&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Ctrl + U / Command + U&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;插入无序列表&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Insert unordered list&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Ctrl + Q&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;代码折叠切换&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Switch code fold&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Ctrl + Z / Command + Z&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;撤销&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Undo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Ctrl + Y / Command + Y&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;重做&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Redo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Ctrl + Shift + A&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;插入@链接&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Insert &amp;#64;link&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Ctrl + Shift + C&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;插入行内代码&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Insert inline code&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Ctrl + Shift + E&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;打开插入Emoji表情对话框&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Open emoji dialog&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Ctrl + Shift + F / Command + Option + F&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;替换&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Replace&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Ctrl + Shift + G / Shift + Command + G&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;切换到上一个搜索结果项&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Find previous search results&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Ctrl + Shift + H&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;打开HTML实体字符对话框&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Open HTML Entities dialog&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Ctrl + Shift + I&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;插入图片&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Insert image &amp;#33;[]&amp;#40;&amp;#41;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Ctrl + Shift + K&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;插入TeX(KaTeX)公式符号&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Insert TeX(KaTeX) symbol &amp;#36;&amp;#36;TeX&amp;#36;&amp;#36;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Ctrl + Shift + L&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;打开插入链接对话框&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Open link dialog&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Ctrl + Shift + O&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;插入有序列表&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Insert ordered list&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Ctrl + Shift + P&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;打开插入PRE对话框&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Open Preformatted text dialog&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Ctrl + Shift + Q&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;插入引用&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Insert blockquotes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Ctrl + Shift + R / Shift + Command + Option + F&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;全部替换&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Replace all&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Ctrl + Shift + S&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;插入删除线&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Insert strikethrough&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Ctrl + Shift + T&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;打开插入表格对话框&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Open table dialog&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Ctrl + Shift + U&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;将所选文字转成大写&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Selection text convert to uppercase&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Shift + Alt + C&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;插入```代码&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Insert code blocks (```)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Shift + Alt + H&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;打开使用帮助对话框&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Open help dialog&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Shift + Alt + L&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;将所选文本转成小写&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Selection text convert to lowercase&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Shift + Alt + P&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;插入分页符&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Insert page break&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Alt + L&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;将所选文本转成小写&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Selection text convert to lowercase&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Shift + Alt + U&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;将所选的每个单词的首字母转成大写&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Selection words first letter convert to Uppercase&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Ctrl + Shift + Alt + C&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;打开插入代码块对话框层&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Open code blocks dialog&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Ctrl + Shift + Alt + I&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;打开插入图片对话框层&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Open image dialog&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Ctrl + Shift + Alt + U&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;将所选文本的第一个首字母转成大写&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Selection text first letter convert to uppercase&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Ctrl + Alt + G&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;跳转到指定的行&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Goto line&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&quot;Emoji表情参考-Emoji-reference&quot;&gt;&lt;a href=&quot;#Emoji表情参考-Emoji-reference&quot; class=&quot;headerlink&quot; title=&quot;Emoji表情参考 (Emoji reference)&quot;&gt;&lt;/a&gt;Emoji表情参考 (Emoji reference)&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.emoji-cheat-sheet.com/&quot; title=&quot;Github emoji&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Github emoji&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://twitter.github.io/twemoji/preview.html&quot; title=&quot;Twitter Emoji \(Twemoji\)&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Twitter Emoji (Twemoji)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://fortawesome.github.io/Font-Awesome/icons/&quot; title=&quot;FontAwesome icons emoji&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FontAwesome icons emoji&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;流程图参考-Flowchart-reference&quot;&gt;&lt;a href=&quot;#流程图参考-Flowchart-reference&quot; class=&quot;headerlink&quot; title=&quot;流程图参考 (Flowchart reference)&quot;&gt;&lt;/a&gt;流程图参考 (Flowchart reference)&lt;/h5&gt;&lt;p&gt;&lt;a href=&quot;http://adrai.github.io/flowchart.js/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://adrai.github.io/flowchart.js/&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&quot;时序图参考-SequenceDiagram-reference&quot;&gt;&lt;a href=&quot;#时序图参考-SequenceDiagram-reference&quot; class=&quot;headerlink&quot; title=&quot;时序图参考 (SequenceDiagram reference)&quot;&gt;&lt;/a&gt;时序图参考 (SequenceDiagram reference)&lt;/h5&gt;&lt;p&gt;&lt;a href=&quot;http://bramp.github.io/js-sequence-diagrams/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://bramp.github.io/js-sequence-diagrams/&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&quot;TeX-LaTeX-reference&quot;&gt;&lt;a href=&quot;#TeX-LaTeX-reference&quot; class=&quot;headerlink&quot; title=&quot;TeX/LaTeX reference&quot;&gt;&lt;/a&gt;TeX/LaTeX reference&lt;/h5&gt;&lt;p&gt;&lt;a href=&quot;http://meta.wikimedia.org/wiki/Help:Formula&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://meta.wikimedia.org/wiki/Help:Formula&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Markdown语法教程&lt;br&gt;
    
    </summary>
    
      <category term="MarkDown" scheme="http://xiahl.top/categories/MarkDown/"/>
    
    
      <category term="MarkDown" scheme="http://xiahl.top/tags/MarkDown/"/>
    
  </entry>
  
  <entry>
    <title>更新自身的npm</title>
    <link href="http://xiahl.top/2016/07/07/update-npm/"/>
    <id>http://xiahl.top/2016/07/07/update-npm/</id>
    <published>2016-07-07T15:12:00.000Z</published>
    <updated>2016-07-08T12:57:07.777Z</updated>
    
    <content type="html">&lt;p&gt;如果想升级npm自身，需要在nodejs的安装目录下局部升级npm。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;D: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd &amp;quot;Program Files\nodejs&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm update npm&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;如果想升级npm自身，需要在nodejs的安装目录下局部升级npm。&lt;br&gt;
    
    </summary>
    
      <category term="NPM" scheme="http://xiahl.top/categories/NPM/"/>
    
    
      <category term="Node" scheme="http://xiahl.top/tags/Node/"/>
    
      <category term="npm" scheme="http://xiahl.top/tags/npm/"/>
    
  </entry>
  
</feed>
