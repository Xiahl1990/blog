<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Angular2-架构-Wrapup]]></title>
      <url>http://xiahl.top/icarus/2016/07/09/2016-07-09-angular2-architecture-wrap-up/</url>
      <content type="html"><![CDATA[<style type="text/css">
	em {
	    font-style: normal!important;
	    font-weight: bold;
	}
	ul,ol {
		padding-left: 0;
	}
	.l-sub-section {
		margin: 100px 0 32px 0;
		padding: 16px 24px;
		background: #f5f6f7;
		border-left: 4px solid #8BC34A;
		border-radius: 4px;
	}
	.example-title {
	    color: #fff;
	    padding: 0 16px;
	    font-size: 14px;
	    border-color: #1976D2;
	    background: #1976D2;
	    box-shadow: none;
	    line-height: 32px;
	    margin-bottom: -5px;
	    z-index: 1;
	    position: relative;
	    border-bottom-right-radius: 0;
	    border-bottom-left-radius: 0;
        border-width: 2px;
    	border-style: solid;
	    border-radius: 4px;
	}
	.highlight {
		margin: 0!important;
		padding: 0;
	    color: inherit;
	    background: inherit;
	}
</style>
<h2 id="wrap-up"><a name="总结" class="reference-link"></a>总结</h2>
<p>我们学到的这些只是关于Angular应用程序的八个主要构造块的一点皮毛</p>
<ol>
	<li><p><a href="/2016/07/08/2016-07-08-angular2-architecture-module">模块</a>   </p>
	</li>
	<li><p><a href="/2016/07/09/2016-07-09-angular2-architecture-component">组件</a></p>
	</li>
	<li><p><a href="/2016/07/09/2016-07-09-angular2-architecture-template">模板</a></p>
	</li>
	<li><p><a href="/2016/07/09/2016-07-09-angular2-architecture-metadata">元数据</a></p>
	</li>
	<li><p><a href="/2016/07/09/2016-07-09-angular2-architecture-databinding">数据绑定</a></p>
	</li>
	<li><p><a href="/2016/07/09/2016-07-09-angular2-architecture-directive">指令</a></p>
	</li>
	<li><p><a href="/2016/07/09/2016-07-09-angular2-architecture-service">服务</a></p>
	</li>
	<li><p><a href="/2016/07/09/2016-07-09-angular2-architecture-dependency-injection">依赖注入</a></p>
	</li>
</ol>
<p>这是Angular应用程序中所有其它东西的基础，要使用Angular 2，以这些作为开端就绰绰有余了。
但它仍然没有包含我们需要的或想知道的全部。</p>
<h2 id="-">其它东西</h2>
<p>这里是一个简短的、按字母排序的列表，列出了其它重要的Angular特性和服务。
它们大多数已经(或即将)包括在这个《开发指南》中：</p>
<blockquote>
<p><strong>动画Animations</strong> - 即将到来的动画库。它能让开发人员更轻易的给组件添加动画行为，而不需要对动画技术或css有深入的了解。</p>
<p><strong>引导Bootstrap</strong> - 配置和引导应用的根组件的方法。</p>
<p><strong>变更检测Change Detection</strong> - 学会Angular是如何决定组件的属性值变化和什么时候该更新到屏幕的。 
学会它如何使用<strong>zones</strong>来拦截异步行为和它如何执行变更检测策略。</p>
<p><strong><a href="https://angular.cn/docs/ts/latest/guide/router.html" target="_blank" rel="external">组件路由Component Router</a></strong> - 通过组件路由服务，可以让用户使用浏览器中熟悉的URL形式，在多屏应用之间导航。</p>
<p><strong>事件Events</strong> - DOM能触发事件，组件和服务也能。Angular提供的事件发布与订阅机制还包括<a href="https://github.com/zenparsing/es-observable" target="_blank" rel="external">RxJS可观察Observable</a>方案的一个实施。</p>
<p><strong><a href="https://angular.cn/docs/ts/latest/guide/forms.html" target="_blank" rel="external">表单Forms</a></strong> - 通过基于HTML的验证和脏检查机制支持复杂的数据输入场景。</p>
<p><strong><a href="https://angular.cn/docs/ts/latest/guide/server-communication.html" target="_blank" rel="external">HTTP</a></strong> - 通过这个Angular HTTP客户端，可以与服务器通讯，以获得数据、保存数据和触发服务端动作。</p>
<p><strong><a href="https://angular.cn/docs/ts/latest/guide/lifecycle-hooks.html" target="_blank" rel="external">生命周期钩子Lifecycle Hooks</a></strong> - 通过实现“生命周期钩子”接口，可以切入组件生命中的几个关键点：从创建到销毁。</p>
<p><strong><a href="https://angular.cn/docs/ts/latest/guide/pipes.html" target="_blank" rel="external">管道Pipes</a></strong> - 这种服务会转换值以供显示。可以把管道放在模板中，以增强用户体验。比如这个<code>currency</code>管道表达式，</p>
<pre>
	<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">price | currency:&apos;USD&apos;:true</span><br></pre></td></tr></table></figure>

</pre>
<p>把&quot;42.33&quot;显示为<code>$42.33</code>。</p>
<p><strong><a href="https://angular.cn/docs/ts/latest/guide/testing.html" target="_blank" rel="external">Testing</a></strong> - Angular提供了一个测试库，在程序各个部分与Angular框架交互同时，用来“单元测试”它们。</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Angular2-架构-DependencyInjection]]></title>
      <url>http://xiahl.top/icarus/2016/07/09/2016-07-09-angular2-architecture-dependency-injection/</url>
      <content type="html"><![CDATA[<style type="text/css">
	em {
	    font-style: normal!important;
	    font-weight: bold;
	}
	ul {
		padding-left: 0;
	}
	.l-sub-section {
		margin: 100px 0 32px 0;
		padding: 16px 24px;
		background: #f5f6f7;
		border-left: 4px solid #8BC34A;
		border-radius: 4px;
	}
	.example-title {
	    color: #fff;
	    padding: 0 16px;
	    font-size: 14px;
	    border-color: #1976D2;
	    background: #1976D2;
	    box-shadow: none;
	    line-height: 32px;
	    margin-bottom: -5px;
	    z-index: 1;
	    position: relative;
	    border-bottom-right-radius: 0;
	    border-bottom-left-radius: 0;
        border-width: 2px;
    	border-style: solid;
	    border-radius: 4px;
	}
	.highlight {
		margin: 0!important;
		padding: 0;
	    color: inherit;
	    background: inherit;
	}
</style>
<h2 id="dependency-injection"><a name="依赖注入" class="reference-link"></a>依赖注入</h2>
<img src="/resources/dependency-injection.png" alt="" align="left" style="width:240px; margin-right:10px">
<p>“依赖注入”是提供类的新实例的一种方式，还负责处理好类所需的全部依赖。大多数依赖都是服务。
Angular也使用依赖注入提供我们需要的组件以及这些组件所需的服务。</p>
<br clear="all">
<p>在TypeScript里，Angular能通过查看构造函数的参数类型，来得知组件需要哪些服务。
例如，<code>HeroListComponent</code>组件的构造函数需要<code>HeroService</code>：</p>
<div class="example-title" style="margin-top:0px;">app/hero-list.component (构造函数)</div>
<pre>
	<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">constructor(private service: HeroService) &#123; &#125;</span><br></pre></td></tr></table></figure>

</pre>
<p>当Angular创建组件时，会首先为组件所需的服务找一个<strong>注入器Injector</strong>。</p>
<p>注入器是一个维护服务实例的容器，存放着以前创建的实例。如果容器中还没有所请求的服务实例，注入器就会创建一个服务实例，并且添加到容器中，然后把这个服务返回给Angular。
当所有的服务都被解析完并返回时，Angular会以这些服务为参数去调用组件的构造函数。
这就是我们所说的<em>依赖注入</em> 。</p>
<p><code>HeroService</code>注入的过程看起来有点像这样：</p>
<img src="/resources/injector-injects.png" alt="">
<p>如果注入器还没有<code>HeroService</code>，它怎么知道该如何创建一个呢？</p>
<p>简单的说，必须在要求注入<code>HeroService</code>之前，注册一个<code>HeroService</code>的<strong>提供商Provider</strong>到注入器。
提供商可以创建并返回服务，通常返回的就是这个“服务类”本身。</p>
<p>可以在应用程序的组件树中的任何级别上注册提供商。
当需要一个服务的同一个实例在任何地方都是可用时，我们通常在应用引导程序中注册它。</p>
<div class="example-title" style="margin-top:0px;">app/main.ts (节选)</div>
<pre>
	<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bootstrap(AppComponent, [BackendService, HeroService, Logger]);</span><br></pre></td></tr></table></figure>

</pre>
<p>或者，也可以把它注册在组件层……</p>
<pre>
	<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Component(&#123;</span><br><span class="line">  providers:   [HeroService]</span><br><span class="line">&#125;)</span><br><span class="line">export class HeroesComponent &#123; ... &#125;</span><br></pre></td></tr></table></figure>

</pre>
<p>... 在这种情况下，那个组件的每一个新实例都会有一个(在该组件注册的)服务的新实例。</p>
<p>在这个概览中，我们过度简化了依赖注入机制。
在<a href="#">依赖注入</a>一章中，我们能学到关于它更详尽的知识。</p>
<p>需要记住的要点是：</p>
<ul>
	<li><p>依赖注入渗透在整个框架中，并且被到处使用。</p>
	</li>
	<li><p>注入器<code>Injector</code>是本机制的核心。</p>
		<ul>
			<li><p>注入器负责维护一个<em>容器</em>，用于存放它创建过的服务实例。</p>
			</li>
			<li><p>注入器能使用<em>提供商</em>创建一个新的服务实例。</p>
			</li>
		</ul>
	</li>
	<li><p><em>提供商</em>是一个用于创建服务的“配方”。</p>
	</li>
	<li><p>把<em>提供商</em>注册到注入器。</p>
	</li>
</ul>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Angular2-架构-Service]]></title>
      <url>http://xiahl.top/icarus/2016/07/09/2016-07-09-angular2-architecture-service/</url>
      <content type="html"><![CDATA[<style type="text/css">
	em {
	    font-style: normal!important;
	    font-weight: bold;
	}
	ul {
		padding-left: 0;
	}
	.l-sub-section {
		margin: 100px 0 32px 0;
		padding: 16px 24px;
		background: #f5f6f7;
		border-left: 4px solid #8BC34A;
		border-radius: 4px;
	}
	.example-title {
	    color: #fff;
	    padding: 0 16px;
	    font-size: 14px;
	    border-color: #1976D2;
	    background: #1976D2;
	    box-shadow: none;
	    line-height: 32px;
	    margin-bottom: -5px;
	    z-index: 1;
	    position: relative;
	    border-bottom-right-radius: 0;
	    border-bottom-left-radius: 0;
        border-width: 2px;
    	border-style: solid;
	    border-radius: 4px;
	}
	.highlight {
		margin: 0!important;
		padding: 0;
	    color: inherit;
	    background: inherit;
	}
</style>
<h2 id="service"><a name="服务" class="reference-link"></a>服务</h2>
<img src="/resources/service.png" alt="" align="left" style="width:240px; margin-right:10px">
<p>“服务”分为很多种，包括：值、函数，以及应用所需的特性。</p>
<p>几乎任何东西都可以是一个服务。
典型的服务是一个类，具有专注的、良好定义的用途。它应该做一件具体的事情，把它做好。</p>
<br clear="all">
<p>例如：</p>
<ul>
<li><p>日志服务</p>
</li>
<li><p>数据服务</p>
</li>
<li><p>消息总线</p>
</li>
<li><p>税款计算器</p>
</li>
<li><p>应用程序配置</p>
</li>
</ul>
<p>服务没有什么特别属于Angular的特性。Angular本身对于服务也没有什么定义。
它甚至都没有<em>ServiceBase</em>类。</p>
<p>即便如此，服务仍然是任何Angular应用的基础。</p>
<p>这里是一个“服务”类的范例，用于把日志记录到浏览器的控制台：</p>
<div class="example-title" style="margin-top:0px;">app/logger.service.ts (只有类)</div>
<pre>
	<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export class Logger &#123;</span><br><span class="line">  log(msg: any)   &#123; console.log(msg); &#125;</span><br><span class="line">  error(msg: any) &#123; console.error(msg); &#125;</span><br><span class="line">  warn(msg: any)  &#123; console.warn(msg); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</pre>
<p>下面是<code>HeroService</code>类，用于获取英雄数据，并通过一个已解析的<a href="http://exploringjs.com/es6/ch_promises.html" target="_blank" rel="external">承诺Promise</a>返回它们。
<code>HeroService</code>还依赖于<code>Logger</code>服务和另一个用来处理服务器通讯工作的<code>BackendService</code>服务。</p>
<div class="example-title" style="margin-top:0px;">app/hero.service.ts (只有类)</div>
<pre>
	<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">export class HeroService &#123;</span><br><span class="line">  private heroes: Hero[] = [];</span><br><span class="line"></span><br><span class="line">  constructor(</span><br><span class="line">    private backend: BackendService,</span><br><span class="line">    private logger: Logger) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  getHeroes() &#123;</span><br><span class="line">    this.backend.getAll(Hero).then( (heroes: Hero[]) =&gt; &#123;</span><br><span class="line">      this.logger.log(`Fetched $&#123;heroes.length&#125; heroes.`);</span><br><span class="line">      this.heroes.push(...heroes); // fill cache</span><br><span class="line">    &#125;);</span><br><span class="line">    return this.heroes;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</pre>
<p>服务无处不在。</p>
<p>组件是服务的主要消费者。它们依赖服务来处理大多数“苦差事”。
它们自己不需要从服务器获得数据，不需要验证输入，不需要直接往控制台写日志。
它们把这些任务委托给服务。</p>
<p>组件的任务就是提供用户体验，仅此而已。它介于视图(由模板渲染)和应用逻辑(通常包括“模型model”的观念)之间。
设计良好的组件为数据绑定提供属性和方法，把那些其他对它们不重要的事情都委托给服务。</p>
<p>Angular不会<em>强制要求</em>我们遵循这些原则。
即使我们花3000行代码写了一个“厨房洗碗槽”组件，它也不会抱怨什么。</p>
<p>Angular帮助我们<em>追随</em>这些原则 —— 它让我们能更轻易的把应用逻辑拆分到服务，并通过<em>依赖注入</em>来在组件中使用这些服务。</p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Angular2-架构-Directive]]></title>
      <url>http://xiahl.top/icarus/2016/07/09/2016-07-09-angular2-architecture-directive/</url>
      <content type="html"><![CDATA[<style type="text/css">
	em {
	    font-style: normal!important;
	    font-weight: bold;
	}
	ul {
		padding-left: 0;
	}
	.l-sub-section {
		margin: 0px 0 32px 0;
		padding: 16px 24px;
		background: #f5f6f7;
		border-left: 4px solid #8BC34A;
		border-radius: 4px;
	}
	.example-title {
	    color: #fff;
	    padding: 0 16px;
	    font-size: 14px;
	    border-color: #1976D2;
	    background: #1976D2;
	    box-shadow: none;
	    line-height: 32px;
	    margin-bottom: -5px;
	    z-index: 1;
	    position: relative;
	    border-bottom-right-radius: 0;
	    border-bottom-left-radius: 0;
        border-width: 2px;
    	border-style: solid;
	    border-radius: 4px;
	}
	.highlight {
		margin: 0!important;
		padding: 0;
	    color: inherit;
	    background: inherit;
	}
</style>
<h2 id="directive"><a name="指令" class="reference-link"></a>指令</h2>
<img src="/resources/directive.png" alt="" align="left" style="width:240px; margin-right:10px">
<p>Angular模板是<em>动态的</em>。当Angular渲染它们时，它会根据<strong>指令</strong>提供的操作指南对DOM进行修改。</p>
<p>指令是一个带有“指令元数据”的类。在TypeScript中，要通过<code>@Directive</code>装饰器把元数据附加到类上。</p>
<br clear="all">
<p>我们已经遇到过指令的形式之一：组件。组件是一个<em>带模板的指令</em>，而且<code>@Component</code>装饰器实际上就是一个<code>@Directive</code>装饰器，只是扩展了一些面向模板的属性。</p>
<div class="l-sub-section">
<p>虽然<strong>组件从技术角度上就是一个指令</strong>，但是组件非常独特，并在Angular中位于中心地位，以至于在架构介绍中，我们把组件从指令中单独开来。</p>
</div>
<p>有两种<em>其它</em>类型的指令，我们称之为“结构型”指令和“属性(attribute)型”指令。</p>
<p>它们往往像属性(attribute)一样出现在元素标签中，偶尔会以名字的形式出现(参见<a href="#">一次性绑定</a>)，但多数时候还是作为赋值目标或绑定目标出现。</p>
<p><strong>结构型指令</strong>通过在DOM中添加、移除和替换元素来修改布局。</p>
<p>我们在<a href="/2016/07/09/2016-07-09-angular2-architecture-template">范例</a>模板中会看到两个内建的结构型指令。</p>
<pre>
	<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div *ngFor=&quot;let hero of heroes&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;hero-detail *ngIf=&quot;selectedHero&quot;&gt;&lt;/hero-detail&gt;</span><br></pre></td></tr></table></figure>

</pre>
<ul>
	<li><p><a href="displaying-data.html#ngFor"><code>*ngFor</code></a>告诉Angular为<code>heroes</code>列表中的每个英雄生成一个<code>&lt;div&gt;</code>标签。</p>
	</li>
	<li><p><a href="displaying-data.html#ngIf"><code>*ngIf</code></a>表示只有在选择的英雄存在时，才会包含<code>HeroDetail</code>组件。</p>
	</li>
</ul>
<p><strong>属性型指令</strong> 修改一个现有元素的外观或行为。在模板中，它们看起来就像是标准的HTML属性，故名。</p>
<p><code>ngModel</code>指令就是属性型指令的一个例子，它实现了双向数据绑定。</p>
<p>它修改了现有元素(典型的<code>&lt;input&gt;</code>)的行为：它设置了显示属性值，并对change事件做出相应回应。</p>
<p>Angular内置了一些其它指令，它们或者修改结构布局(如<a href="#">ngSwitch</a>)，或者修改DOM元素和组件的各个方面
(如<a href="#">ngStyle</a>和<a href="#">ngClass</a>)。</p>
<p>当然，我们也能编写自己的指令。</p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Angular2-架构-Databinding]]></title>
      <url>http://xiahl.top/icarus/2016/07/09/2016-07-09-angular2-architecture-databinding/</url>
      <content type="html"><![CDATA[<style type="text/css">
	em {
	    font-style: normal!important;
	    font-weight: bold;
	}
	ul {
		padding-left: 0;
	}
	.l-sub-section {
		margin: 100px 0 32px 0;
		padding: 16px 24px;
		background: #f5f6f7;
		border-left: 4px solid #8BC34A;
		border-radius: 4px;
	}
	.example-title {
	    color: #fff;
	    padding: 0 16px;
	    font-size: 14px;
	    border-color: #1976D2;
	    background: #1976D2;
	    box-shadow: none;
	    line-height: 32px;
	    margin-bottom: -5px;
	    z-index: 1;
	    position: relative;
	    border-bottom-right-radius: 0;
	    border-bottom-left-radius: 0;
        border-width: 2px;
    	border-style: solid;
	    border-radius: 4px;
	}
	.highlight {
		margin: 0!important;
		padding: 0;
	    color: inherit;
	    background: inherit;
	}
</style>
<h2 id="data-binding"><a name="数据绑定" class="reference-link"></a>数据绑定</h2>
<p>如果没有框架，我们就得自己把数据值推送到HTML控件中，并把用户的反馈转换成动作和值更新。
如果手工写代码来实现这些推/拉逻辑，肯定会枯燥乏味、容易出错，读起来简直是噩梦 —— 写过jQuery的程序员大概都对此深有体会。</p>
<img src="/resources/databinding.png" alt="" align="left" style="width:240px; margin-right:10px">
<p>Angular支持<strong>数据绑定</strong>，一种让模板的各部分与组件的各部分相互合作的机制。
我们往模板HTML中添加绑定标记，来告诉Angular如何连接两者。</p>
<p>数据绑定的语法有四种形式。每种形式都有一个方向 —— 从DOM来、到DOM去、双向，就像图中的箭头所示意的。</p>
<p>在<a href="/2016/07/09/2016-07-09-angular2-architecture-template">范例</a>模板中，我们看到了数据绑定的三种形式：</p>
<div class="example-title" style="margin-top:100px;">app/hero-list.component.html (节选)</div>
<pre>
	<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;&#123;&#123;hero.name&#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;hero-detail [hero]=&quot;selectedHero&quot;&gt;&lt;/hero-detail&gt;</span><br><span class="line">&lt;div (click)=&quot;selectHero(hero)&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

</pre>
<ul>
	<li><p><code>{ { hero.name } }</code><a href="#"><em>插值表达式</em></a>：在<code>&lt;div&gt;</code>标签中显示了组件的<code>hero.name</code>属性的值。 </p>
	</li>
	<li><p><code>[hero]</code><a href="#"><em>属性绑定</em></a>：把父组件<code>HeroListComponent</code>的<code>selectedHero</code>传到子组件<code>HeroDetailComponent</code>的<code>hero</code>属性中。</p>
	</li>
	<li><p><code>(click)</code><a href="#"><em>事件绑定</em></a>：当用户点击英雄的名字时，调用组件的<code>selectHero</code>方法。</p>
	</li>
	<li><p><strong>双向数据绑定</strong>：这是很重要的第四种绑定形式，它在<code>ngModel</code>指令这个单一标记中同时实现了属性绑定和事件绑定的功能。
	在<code>HeroListComponent</code>模板中没有双向绑定，下面是一个来自<code>HeroDetailComponent</code>模板的范例(以前没展示过)：</p>
	</li>
</ul>
<pre>
	<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input [(ngModel)]=&quot;hero.name&quot;&gt;</span><br></pre></td></tr></table></figure>

</pre>
<p>在双向绑定中，数据属性的值会从具有属性绑定的组件传到输入框。通过事件绑定，用户的修改被传回到组件，把属性值设置为最新的值。</p>
<p>Angular在每个JavaScript事件周期中一次性处理<em>所有的</em>数据绑定，它会从组件树的根部开始，用深度优先的方式处理。</p>
<img src="/resources/component-databinding.png" alt="" align="left" style="width:240px; margin-right:10px">
<p>虽然还不清楚所有细节，但是我们从这些范例中至少弄明白一点：数据绑定在模板与对应组件的交互中扮演了一个很重要的角色。</p>
<br clear="all">
<img src="/resources/parent-child-binding.png" alt="" align="left" style="width:240px; margin-right:10px">
<p>...在父组件与子组件的通讯中<strong><em>也同样如此</em></strong>。</p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Angular2-架构-Metadata]]></title>
      <url>http://xiahl.top/icarus/2016/07/09/2016-07-09-angular2-architecture-metadata/</url>
      <content type="html"><![CDATA[<style type="text/css">
	em {
	    font-style: normal!important;
	    font-weight: bold;
	}
	ul {
		padding-left: 0;
	}
	.l-sub-section {
		margin: 100px 0 32px 0;
		padding: 16px 24px;
		background: #f5f6f7;
		border-left: 4px solid #8BC34A;
		border-radius: 4px;
	}
	.example-title {
	    color: #fff;
	    padding: 0 16px;
	    font-size: 14px;
	    border-color: #1976D2;
	    background: #1976D2;
	    box-shadow: none;
	    line-height: 32px;
	    margin-bottom: -5px;
	    z-index: 1;
	    position: relative;
	    border-bottom-right-radius: 0;
	    border-bottom-left-radius: 0;
        border-width: 2px;
    	border-style: solid;
	    border-radius: 4px;
	}
	.highlight {
		margin: 0!important;
		padding: 0;
	    color: inherit;
	    background: inherit;
	}
</style>
<h2 id="metadata"><a name="元数据" class="reference-link"></a>元数据</h2>
<img src="/resources/metadata.png" alt="" align="left" style="width:240px; margin-right:10px">
<p style="padding-top:10px">元数据告诉Angular如何处理一个类。</p>
<p><a href="/2016/07/09/2016-07-09-angular2-architecture-component">回头看看 </a><code>HeroListComponent</code> 就会明白：它只是一个类。 一点框架的痕迹也没有，里面完全没有出现 "Angular" 的字样。</p>
<p>实际上，它真的 <strong>只是一个类</strong> 。直到我们 <strong>告诉 Angular</strong> 这是一个组件为止。</p>
<p>只要把 <strong>元数据</strong> 附加到这个类，就相当于告诉 Angular ： <strong>HeroListComponent</strong> 是个组件。</p>
<p>在 TypeScript 中， <strong>装饰器 (decorator)</strong> 是附加元数据的简易途径。 下面就是 <code>HeroListComponent</code> 的一些元数据。</p>
<div class="example-title">app/hero-list.component.ts (元数据)</div>
<pre>
	<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Component(&#123;</span><br><span class="line">  selector:    &apos;hero-list&apos;,</span><br><span class="line">  templateUrl: &apos;app/hero-list.component.html&apos;,</span><br><span class="line">  directives:  [HeroDetailComponent],</span><br><span class="line">  providers:   [HeroService]</span><br><span class="line">&#125;)</span><br><span class="line">export class HeroesComponent &#123; ... &#125;</span><br></pre></td></tr></table></figure>

</pre>
<p>这里看到<code>@Component</code>装饰器(毫无悬念的)把紧随其后的类标记成了组件类。</p>
<p>装饰器就是函数，它们通常还带有配置参数。
<code>@Component</code>装饰器能接受一个配置对象，Angular会基于这些信息创建和展示组件及其视图。</p>
<p>来看下<code>@Component</code>中的一些配置项：</p>
<ul>
<li>
<p><code>selector</code> - 一个css选择器，它告诉Angular在<em>父级</em>HTML中寻找一个<code>&lt;hero-list&gt;</code>标签，然后创建该组件，并插入此标签中。
比如，如果应用“壳”(组件)的模板包含如下代码：</p>
<pre>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;hero-list&gt;&lt;/hero-list&gt;</span><br></pre></td></tr></table></figure>

</pre>
<p>Angular就会在这些标签中插入<code>HeroListComponent</code>视图的一个实例。</p>
</li>
<li><p><code>templateUrl</code> - 组件模板的地址，我们在<a href="/2016/07/09/2016-07-09-angular2-architecture-template">前面</a>见过。</p>
</li>
<li><p><code>directives</code> - 一个数组，包含<em>此</em>模板需要依赖的组件或指令。
看看模板的最后一行，这表示我们期待Angular把<code>HeroDetailComponent</code>的实例放在<code>&lt;hero-detail&gt;</code>标签中。
但是，只有在<code>directives</code>数组中提及到<code>HeroDetailComponent</code>的时候，Angular才会这么做。</p>
</li>
<li><p><code>providers</code> - 一个数组，包含组件所依赖的服务所需要的<em>依赖注入提供商</em>。 
这是在告诉Angular：该组件的构造函数需要一个<code>HeroService</code>服务，这样组件就可以从服务中获得用来显示英雄列表的那些数据。
我们一会儿就讲到了依赖注入。</p>
</li>
</ul>
<img src="/resources/template-metadata-component.png" alt="" align="left" style="height:200px; margin-right:10px">
<p><code>@Component</code>函数接收一个配置对象，并把它转换成元数据，附加到组件类的定义上。
Angular在运行期间会找出这份元数据，并由此知道该如何去“做正确的事”。</p>
<p>模板、元数据和组件共同描绘出这个视图。</p>
<p>我们也会沿用类似的风格，用其它元数据装饰器来指导Angular的行为。
比如<code>@Injectable</code>、<code>@Input</code>、<code>@Output</code>和<code>@RouterConfig</code>等是一些最常用的装饰器。
随着对Angular认识的逐步深化，我们也将逐步掌握它们。</p>
<p>这种架构所决定的是：必须往代码中添加元数据，以便Angular知道该做什么。</p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Angular2-架构-Template]]></title>
      <url>http://xiahl.top/icarus/2016/07/09/2016-07-09-angular2-architecture-template/</url>
      <content type="html"><![CDATA[<style type="text/css">
	em {
	    font-style: normal!important;
	    font-weight: bold;
	}
	ul {
		padding-left: 0;
	}
	.l-sub-section {
		margin: 100px 0 32px 0;
		padding: 16px 24px;
		background: #f5f6f7;
		border-left: 4px solid #8BC34A;
		border-radius: 4px;
	}
	.example-title {
	    color: #fff;
	    padding: 0 16px;
	    font-size: 14px;
	    border-color: #1976D2;
	    background: #1976D2;
	    box-shadow: none;
	    line-height: 32px;
	    margin-bottom: -5px;
	    z-index: 1;
	    position: relative;
	    border-bottom-right-radius: 0;
	    border-bottom-left-radius: 0;
        border-width: 2px;
    	border-style: solid;
	    border-radius: 4px;
	}
	.highlight {
		margin: 0!important;
		padding: 0;
	    color: inherit;
	    background: inherit;
	}
</style>
<h2 id="template"><a name="模板" class="reference-link"></a>模板</h2>
<img src="/resources/template.png" alt="" align="left" style="width:240px; margin-right:10px">
<p>我们通过组件的自带的<strong>模板</strong>来定义视图。模板以HTML形式存在，用来告诉Angular如何渲染组件(视图)。</p>
<p>多数情况下，模板看起来很像标准HTML……当然也有一小点儿奇怪的地方。下面是<code>HeroList</code>组件的一个模板。</p>
<div class="example-title" style="margin-top: 80px;">app/hero-list.component.html</div>
<pre>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Hero List<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>Pick a hero from the list<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngFor</span>=<span class="string">"let hero of heroes"</span> (<span class="attr">click</span>)=<span class="string">"selectHero(hero)"</span>&gt;</span></span><br><span class="line">  &#123;&#123;hero.name&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hero-detail</span> *<span class="attr">ngIf</span>=<span class="string">"selectedHero"</span> [<span class="attr">hero</span>]=<span class="string">"selectedHero"</span>&gt;</span><span class="tag">&lt;/<span class="name">hero-detail</span>&gt;</span></span><br></pre></td></tr></table></figure>

</pre>
<p>我们认得<code>&lt;h2&gt;</code>和<code>&lt;div&gt;</code>。
但另外那些标签/属性是我们在学校里从没听过的。
<code>*ngFor</code>、<code></code>、<code>(click)</code>、<code>[hero]</code>和<code>&lt;hero-detail&gt;</code>都是什么东西？</p>
<p>这些都是Angular的<a href="template-syntax.html">模板语法</a>例子。
我们会逐渐习惯这些语法，甚至会学着爱上它。
一会儿再解释它。</p>
<p>在开始前，先仔细看看最后那行。
<code>&lt;hero-detail&gt;</code>是一个自定义元素的标签，用来表示<code>HeroDetailComponent</code>组件。</p>
<p><code>HeroDetailComponent</code>跟以前回顾过的<code>HeroListComponent</code>是<em>不同</em>的组件。
<code>HeroDetailComponent</code>(未展示代码)用于展现一个特定英雄的情况，这个英雄是用户从<code>HeroListComponent</code>列表中选择的。
<code>HeroDetailComponent</code>是<code>HeroListComponent</code>的<em>子组件</em>。</p>
<img src="/resources/component-tree.png" alt="" align="left" style="width:240px; margin-right:10px">
<p>注意：<code>&lt;hero-detail&gt;</code>竟如此和谐的出现在那些已知的HTML元素中。
在同一个格局中，我们能混用……也将继续混用……自定义组件与原生HTML。</p>
<p>在这种方式下，我们能够，并且将会组合出复杂的组件树，用来构建那些丰富多彩的应用。</p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Angular2-架构-Component]]></title>
      <url>http://xiahl.top/icarus/2016/07/09/2016-07-09-angular2-architecture-component/</url>
      <content type="html"><![CDATA[<style type="text/css">
	em {
	    font-style: normal!important;
	    font-weight: bold;
	}
	ul {
		padding-left: 0;
	}
	.l-sub-section {
		margin: 100px 0 32px 0;
		padding: 16px 24px;
		background: #f5f6f7;
		border-left: 4px solid #8BC34A;
		border-radius: 4px;
	}
	.example-title {
	    color: #fff;
	    padding: 0 16px;
	    font-size: 14px;
	    border-color: #1976D2;
	    background: #1976D2;
	    box-shadow: none;
	    line-height: 32px;
	    margin-bottom: -5px;
	    z-index: 1;
	    position: relative;
	    border-bottom-right-radius: 0;
	    border-bottom-left-radius: 0;
        border-width: 2px;
    	border-style: solid;
	    border-radius: 4px;
	}
</style>
<h2 id="component"><a name="组件" class="reference-link"></a>组件</h2>
<img src="/resources/hero-component.png" alt="" align="left" style="width:240px; margin-right:10px">
<p><strong>组件</strong>控制屏幕中巴掌大的那么一小块地方，这块地方被称之为<em>视图</em>。应用的“外壳”包括一些导航链接、英雄列表、英雄编辑器…… 它们都是由组件控制的视图。</p>
<p>我们在类中定义组件的应用逻辑(它被用来为视图提供支持)。组件通过一些由属性和方法组成的API与视图交互。</p>
<p><a id="component-code"></a>比如，在<code>HeroListComponent</code>组件中，可能有一个<code>heroes</code>属性，它返回一个英雄的数组，而这些数据是从服务中取得的。它可能还有一个<code>selectHero()</code>方法，当用户从列表中点击一个英雄时，用它来设置<code>selectedHero</code>属性。它可能是像这样的一个类：</p>
<div class="example-title">app/hero-list.component.ts</div>
<pre class="javascript" style="color: #c7254e;">
<code>
export class HeroListComponent implements OnInit {
  heroes: Hero[];
  selectedHero: Hero;
  constructor(private service: HeroService) { }
  ngOnInit() {
    this.heroes = this.service.getHeroes();
  }
  selectHero(hero: Hero) { this.selectedHero = hero; }
}
</code>
</pre>
<p>当用户在这个应用中“移动”时，Angular会创建、更新和销毁组件。
开发人员可以通过<strong>生命周期钩子</strong>在组件生命周期的各个时间点上插入自己的操作。</p>
<div class="l-sub-section" style="margin-top:10px;">
<p>我们不会在这个例子中展示这些钩子，先在脑子中留个记号，将来再翻出来讲。</p>
<p>你可能会好奇，谁来调用那个构造函数？谁为服务提供参数？
目前，你只要信任Angular会在合适的时机调用构造函数，并在需要的时候给出一个合适的<code>HeroService</code>实例。</p>
</div>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Angular2-架构-Module]]></title>
      <url>http://xiahl.top/icarus/2016/07/08/2016-07-08-angular2-architecture-module/</url>
      <content type="html"><![CDATA[<style type="text/css">
	em {
	    font-style: normal!important;
	    font-weight: bold;
	}
	ul {
		padding-left: 0;
	}
	.l-sub-section {
		margin: 100px 0 32px 0;
		padding: 16px 24px;
		background: #f5f6f7;
		border-left: 4px solid #8BC34A;
		border-radius: 4px;
	}
	.example-title {
	    color: #fff;
	    padding: 0 16px;
	    font-size: 14px;
	    border-color: #1976D2;
	    background: #1976D2;
	    box-shadow: none;
	    line-height: 32px;
	    margin-bottom: -5px;
	    z-index: 1;
	    position: relative;
	    border-bottom-right-radius: 0;
	    border-bottom-left-radius: 0;
        border-width: 2px;
    	border-style: solid;
	    border-radius: 4px;
	}
</style>
<p>Angular 2 是一个用 HTML 和 JavaScript 构建客户端应用的框架。</p>
<p>该框架包括一系列紧密合作的库，有些是核心库，有些是可选库。</p>
<p>我们这样写应用程序：用带 Angular 扩展语法的 HTML 写 <strong>模板</strong> ，用 <strong>组件</strong> 类管理这些模板，用 <strong>服务</strong> 添加应用逻辑，用根组件完成 Angular <strong>启动</strong> 。</p>
<p>Angular 在浏览器中接管、展现应用的内容，并根据我们提供的操作指令响应用户的交互。</p>
<p>当然，这只是冰山一角。随着内容的深入，我们还会学到更多的细节。 我们先来看看宏观图景。</p>
<p><img src="/resources/overview2.png" alt=""></p>
<p>这个架构图展现了 Angular 应用中的 8 个主要构造块：</p>
<ol style="padding:0;">
    <li><a href="#module" title="模块 (Module)">模块 (Module)</a></li>
    <li><a href="#component" title="[组件 (Component)]">组件 (Component)</a></li>
    <li><a href="#template" title="[模板 (Template)]">模板 (Template)</a></li>
    <li><a href="#metadata" title="[元数据 (Metadata)]">元数据 (Metadata)</a></li>
    <li><a href="#data-binding" title="[数据绑定 (Data Binding)]">数据绑定 (Data Binding)</a></li>
    <li><a href="#directive" title="[指令 (Directive)]">指令 (Directive)</a></li>
    <li><a href="#service" title="[服务 (Service)]">服务 (Service)</a></li>
    <li><a href="#dependency-injection" title="[依赖注入 (Dependency Injection)]">依赖注入 (Dependency Injection)</a></li>
</ol>
<p>掌握这 8 点，我们就可以开始使用 Angular 2 编写应用程序了。</p>
<blockquote>
    <p>本章所引用的代码可以从这个 <a href="https://angular.cn/resources/live-examples/architecture/ts/plnkr.html" title="在线例子" target="_blank" rel="external">在线例子</a> 中找到。</p>
</blockquote>
<h2 id="module"><a name="模块" class="reference-link"></a>模块</h2>
<img src="/resources/module.png" alt="" align="left" style="width:240px; margin-right:10px">
<p>Angular 应用是模块化的。</p>
<p>应用程序通常都是由很多 <strong>模块</strong> 组装而成的。</p>
<p>典型的模块是一个内聚的代码块，用以实现单一的目的。 在这些代码中，模块会 <strong>导出</strong> 一些东西，最典型的就是类。</p>
<div class="l-sub-section">
    <h3>模块是可选的</h3>    
    <p>我们强烈推荐使用模块化设计。 TypeScript 对 ES2015 的模块语法支持很好，文档假设我们会利用这些语法来应用模块化方案。这就是为什么要把 <em> 模块 </em> 列为基本构造块之一。</p>
    <p> Angular 本身并不需要模块化方案，也不需要使用这种特定的语法。如果你不喜欢，可以不用它。 就算你避开 <code>import</code> 和 <code>export</code> 语句，每章也会为你提供很多 ( 知识 ) 。</p>
    <p>在 JavaScript( 你可以从页面顶部的组合框选择 JavaScript) 分支下，可以找到如何安装和组织的线索。 它示范了如何用老版本的 JavaScript 语言，在没有模块化系统支持的情况下进行 Angular 2 应用程序的开发。</p>
</div>
<p>我们遇到的第一个模块，很可能就是用于导出 <em> 组件 </em> 类的那个。
组件是 Angular 中的基本构造块之一，我们会编写很多组件。我们将会在下一段继续讨论组件。
目前，只要知道组件类是从模块中导出一种东西就行了。</p>
<p>大多数应用都有一个 <code>AppComponent</code> 。按照惯例，它位于一个名叫 <code>app.component.ts</code> 的文件中。
打开它，我们将会看到一个 <code>export</code> 语句，就像这样：</p>
<div class="example-title">app/app.component.ts (节选)</div>
<pre class="javascript" style="color: #c7254e;"><code>export class AppComponent { }</code></pre>
<p> <code>export</code> 语句告诉 TypeScript ：这是一个模块，其中 <code>AppComponent</code> 类是公开的，可以被应用程序中的其它模块访问。</p>
<p>当需要引用 <code>AppComponent</code> 时，要像这样 <strong> 导入 </strong> 它：</p>
<div class="example-title">app/main.ts (节选)</div>
<pre class="javascript" style="color: #c7254e;"><code>import { AppComponent } from './app.component';</code></pre>
<p id="" class="translated translated-cn"> <code>import</code> 语句告诉系统，它能从附近名叫 <code>app.component</code> 的文件中获得 <code>AppComponent</code> 组件。
 <strong> 模块名 </strong>( 又叫模块 ID) 通常和去掉扩展名后的文件名相同。</p>

<h2 id="module"><a name="模块库" class="reference-link"></a>模块库</h2>
<img src="/resources/library-module.png" alt="" align="left" style="width:240px; margin-right:10px">
<p>有些模块是其它模块的库。</p>
<p>Angular本身就是通过npm包发布的一组模块库，它们都以<code>@angular</code>为前缀。
每个Angular库中都包含一个<strong>封装桶</strong>模块。
它实际上是一个公开的外观层(façade)，囊括了一些逻辑相关的私有模块。</p>
<p><code>@angular/core</code>库是主要的Angular模块库，从这里能获得大部分需要的东西。
<br clear="all"></p>
<p>还有另一些重要的Angular模块库，比如<code>@angular/common</code>、<code>@angular/router</code> 和 <code>@angular/http</code>。</p>
<p>从Angular模块库中导入所需内容的方式都差不多。比如，从<em>@angular/core</em>中导入Angular <strong><code>Component</code><em>函数</em></strong>的代码是这样的：</p>
<pre class="javascript" style="color: #c7254e;"><code>import { Component } from '@angular/core';</code></pre>
<p>比较一下它和前面导入<code>AppComponent</code>时的语法。</p>
<pre class="javascript" style="color: #c7254e;"><code>import { AppComponent } from './app.component';</code></pre>
<p>注意到不同之处了吗？第一种，从Angular模块库中导入时，import语句引用的是“裸”模块名 —— <code>@angular/core</code> —— <em>不带路径前缀</em>。</p>
<p>当我们从<em>自己的</em>文件中导入时，模块名中带有路径前缀。在这个例子中，前缀是一个相对路径(./)。这表示源模块和想导入它的模块位于同一个目录中(./)。如果源模块位于其它位置，我们还可以向上引用应用目录结构中的任意路径(如<code>../../../somewhere/</code>)。</p>
<div class="l-sub-section" style="margin-top:10px;">
	<p>这里导入和导出使用的是ECMAScript 2015 (ES2015)的语法。要学习关于此语法的更多知识，参见<a href="http://www.2ality.com/2014/09/es6-modules-final.html" target="_blank" rel="external">这里</a>，在网上很多别的地方也能找到相关资料。</p>
	<p>“模块加载与导入”背后的基础设施是一个很重要的话题，但它不在Angular简介的范围内。目前的焦点是我们的应用程序，只需要知道<em>import</em>和<em>export</em>就够了。</p>
</div>
<p>这里的关键点是：</p>
<ul>
	<li><p>Angular应用是由模块组成的。</p>
	</li>
	<li><p>模块导出一些东西 —— 类，函数，值，供其它模块导入。</p>
	</li>
	<li><p>首选的写法是把应用写成一组模块，每个模块只导出一样东西。</p>
	</li>
</ul>
<p>我们写的第一个模块将会导出一个组件。</p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[markdown编辑器例子-02]]></title>
      <url>http://xiahl.top/icarus/2016/07/08/2016-07-08-editor-markdown-02/</url>
      <content type="html"><![CDATA[<p>Markdown Demo<br><a id="more"></a></p>
<h3 id="主要特性"><a href="#主要特性" class="headerlink" title="主要特性"></a>主要特性</h3><ul>
<li>支持“标准”Markdown / CommonMark和Github风格的语法，也可变身为代码编辑器；</li>
<li>支持实时预览、图片（跨域）上传、预格式文本/代码/表格插入、代码折叠、搜索替换、只读模式、自定义样式主题和多语言语法高亮等功能；</li>
<li>支持ToC（Table of Contents）、Emoji表情、Task lists、@链接等Markdown扩展语法；</li>
<li>支持TeX科学公式（基于KaTeX）、流程图 Flowchart 和 时序图 Sequence Diagram;</li>
<li>支持识别和解析HTML标签，并且支持自定义过滤标签解析，具有可靠的安全性和几乎无限的扩展性；</li>
<li>支持 AMD / CMD 模块化加载（支持 Require.js &amp; Sea.js），并且支持自定义扩展插件；</li>
<li>兼容主流的浏览器（IE8+）和Zepto.js，且支持iPad等平板设备；</li>
<li>支持自定义主题样式；</li>
</ul>
<h1 id="Editor-md"><a href="#Editor-md" class="headerlink" title="Editor.md"></a>Editor.md</h1><p><img src="https://pandao.github.io/editor.md/images/logos/editormd-logo-180x180.png" alt=""></p>
<p><img src="https://img.shields.io/github/stars/pandao/editor.md.svg" alt=""> <img src="https://img.shields.io/github/forks/pandao/editor.md.svg" alt=""> <img src="https://img.shields.io/github/tag/pandao/editor.md.svg" alt=""> <img src="https://img.shields.io/github/release/pandao/editor.md.svg" alt=""> <img src="https://img.shields.io/github/issues/pandao/editor.md.svg" alt=""> <img src="https://img.shields.io/bower/v/editor.md.svg" alt=""></p>
<p><strong>目录 (Table of Contents)</strong></p>
<p>[TOCM]</p>
<p>[TOC]</p>
<h1 id="Heading-1"><a href="#Heading-1" class="headerlink" title="Heading 1"></a>Heading 1</h1><h2 id="Heading-2"><a href="#Heading-2" class="headerlink" title="Heading 2"></a>Heading 2</h2><h3 id="Heading-3"><a href="#Heading-3" class="headerlink" title="Heading 3"></a>Heading 3</h3><h4 id="Heading-4"><a href="#Heading-4" class="headerlink" title="Heading 4"></a>Heading 4</h4><h5 id="Heading-5"><a href="#Heading-5" class="headerlink" title="Heading 5"></a>Heading 5</h5><h6 id="Heading-6"><a href="#Heading-6" class="headerlink" title="Heading 6"></a>Heading 6</h6><h1 id="Heading-1-link-Heading-link"><a href="#Heading-1-link-Heading-link" class="headerlink" title="Heading 1 link Heading link"></a>Heading 1 link <a href="https://github.com/pandao/editor.md" title="Heading link" target="_blank" rel="external">Heading link</a></h1><h2 id="Heading-2-link-Heading-link"><a href="#Heading-2-link-Heading-link" class="headerlink" title="Heading 2 link Heading link"></a>Heading 2 link <a href="https://github.com/pandao/editor.md" title="Heading link" target="_blank" rel="external">Heading link</a></h2><h3 id="Heading-3-link-Heading-link"><a href="#Heading-3-link-Heading-link" class="headerlink" title="Heading 3 link Heading link"></a>Heading 3 link <a href="https://github.com/pandao/editor.md" title="Heading link" target="_blank" rel="external">Heading link</a></h3><h4 id="Heading-4-link-Heading-link-Heading-link-Heading-link"><a href="#Heading-4-link-Heading-link-Heading-link-Heading-link" class="headerlink" title="Heading 4 link Heading link Heading link Heading link"></a>Heading 4 link <a href="https://github.com/pandao/editor.md" title="Heading link" target="_blank" rel="external">Heading link</a> Heading link <a href="https://github.com/pandao/editor.md" title="Heading link" target="_blank" rel="external">Heading link</a></h4><h5 id="Heading-5-link-Heading-link"><a href="#Heading-5-link-Heading-link" class="headerlink" title="Heading 5 link Heading link"></a>Heading 5 link <a href="https://github.com/pandao/editor.md" title="Heading link" target="_blank" rel="external">Heading link</a></h5><h6 id="Heading-6-link-Heading-link"><a href="#Heading-6-link-Heading-link" class="headerlink" title="Heading 6 link Heading link"></a>Heading 6 link <a href="https://github.com/pandao/editor.md" title="Heading link" target="_blank" rel="external">Heading link</a></h6><h4 id="标题（用底线的形式）Heading-underline"><a href="#标题（用底线的形式）Heading-underline" class="headerlink" title="标题（用底线的形式）Heading (underline)"></a>标题（用底线的形式）Heading (underline)</h4><h1 id="This-is-an-H1"><a href="#This-is-an-H1" class="headerlink" title="This is an H1"></a>This is an H1</h1><h2 id="This-is-an-H2"><a href="#This-is-an-H2" class="headerlink" title="This is an H2"></a>This is an H2</h2><h3 id="字符效果和横线等"><a href="#字符效果和横线等" class="headerlink" title="字符效果和横线等"></a>字符效果和横线等</h3><hr>
<p><del>删除线</del> <s>删除线（开启识别HTML标签时）</s><br><em>斜体字</em>      <em>斜体字</em><br><strong>粗体</strong>  <strong>粗体</strong><br><strong><em>粗斜体</em></strong> <strong><em>粗斜体</em></strong></p>
<p>上标：X<sub>2</sub>，下标：O<sup>2</sup></p>
<p><strong>缩写(同HTML的abbr标签)</strong></p>
<blockquote>
<p>即更长的单词或短语的缩写形式，前提是开启识别HTML标签时，已默认开启</p>
</blockquote>
<p>The <abbr title="Hyper Text Markup Language">HTML</abbr> specification is maintained by the <abbr title="World Wide Web Consortium">W3C</abbr>.</p>
<h3 id="引用-Blockquotes"><a href="#引用-Blockquotes" class="headerlink" title="引用 Blockquotes"></a>引用 Blockquotes</h3><blockquote>
<p>引用文本 Blockquotes</p>
</blockquote>
<p>引用的行内混合 Blockquotes</p>
<blockquote>
<p>引用：如果想要插入空白换行<code>即&lt;br /&gt;标签</code>，在插入处先键入两个以上的空格然后回车即可，<a href="http://localhost/" target="_blank" rel="external">普通链接</a>。</p>
</blockquote>
<h3 id="锚点与链接-Links"><a href="#锚点与链接-Links" class="headerlink" title="锚点与链接 Links"></a>锚点与链接 Links</h3><p><a href="http://localhost/" target="_blank" rel="external">普通链接</a></p>
<p><a href="http://localhost/" title="普通链接带标题" target="_blank" rel="external">普通链接带标题</a></p>
<p>直接链接：<a href="https://github.com" target="_blank" rel="external">https://github.com</a></p>
<p><a href="http://www.this-anchor-link.com/" target="_blank" rel="external">锚点链接</a> </p>
<p>GFM a-tail link @pandao</p>
<blockquote>
<p>@pandao</p>
</blockquote>
<h3 id="多语言代码高亮-Codes"><a href="#多语言代码高亮-Codes" class="headerlink" title="多语言代码高亮 Codes"></a>多语言代码高亮 Codes</h3><h4 id="行内代码-Inline-code"><a href="#行内代码-Inline-code" class="headerlink" title="行内代码 Inline code"></a>行内代码 Inline code</h4><p>执行命令：<code>npm install marked</code></p>
<h4 id="缩进风格"><a href="#缩进风格" class="headerlink" title="缩进风格"></a>缩进风格</h4><p>即缩进四个空格，也做为实现类似<code>&lt;pre&gt;</code>预格式化文本(Preformatted Text)的功能。</p>
<pre><code>&lt;?php
    echo &quot;Hello world!&quot;;
?&gt;
</code></pre><p>预格式化文本：</p>
<pre><code>| First Header  | Second Header |
| ------------- | ------------- |
| Content Cell  | Content Cell  |
| Content Cell  | Content Cell  |
</code></pre><h4 id="JS代码"><a href="#JS代码" class="headerlink" title="JS代码　"></a>JS代码　</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"Hello world!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> box = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> box.fn.init();</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    box.prototype = box.fn = &#123;</span><br><span class="line">        init : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'box.init()'</span>);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">		add : <span class="function"><span class="keyword">function</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">			alert(<span class="string">"add"</span>, str);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">		&#125;,</span><br><span class="line"></span><br><span class="line">		remove : <span class="function"><span class="keyword">function</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">			alert(<span class="string">"remove"</span>, str);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">		&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    box.fn.init.prototype = box.fn;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">window</span>.box =box;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> testBox = box();</span><br><span class="line">testBox.add(<span class="string">"jQuery"</span>).remove(<span class="string">"jQuery"</span>);</span><br></pre></td></tr></table></figure>
<h4 id="HTML代码-HTML-codes"><a href="#HTML代码-HTML-codes" class="headerlink" title="HTML代码 HTML codes"></a>HTML代码 HTML codes</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mate</span> <span class="attr">charest</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="图片-Images"><a href="#图片-Images" class="headerlink" title="图片 Images"></a>图片 Images</h3><p>Image:</p>
<p><img src="https://pandao.github.io/editor.md/examples/images/4.jpg" alt=""></p>
<blockquote>
<p>Follow your heart.</p>
</blockquote>
<p><img src="https://pandao.github.io/editor.md/examples/images/8.jpg" alt=""></p>
<blockquote>
<p>图为：厦门白城沙滩</p>
</blockquote>
<p>图片加链接 (Image + Link)：</p>
<p><a href="https://pandao.github.io/editor.md/examples/images/7.jpg" title="李健首张专辑《似水流年》封面" target="_blank" rel="external"><img src="https://pandao.github.io/editor.md/examples/images/7.jpg" alt=""></a></p>
<blockquote>
<p>图为：李健首张专辑《似水流年》封面</p>
</blockquote>
<hr>
<h3 id="列表-Lists"><a href="#列表-Lists" class="headerlink" title="列表 Lists"></a>列表 Lists</h3><h4 id="无序列表（减号）Unordered-Lists"><a href="#无序列表（减号）Unordered-Lists" class="headerlink" title="无序列表（减号）Unordered Lists (-)"></a>无序列表（减号）Unordered Lists (-)</h4><ul>
<li>列表一</li>
<li>列表二</li>
<li>列表三</li>
</ul>
<h4 id="无序列表（星号）Unordered-Lists"><a href="#无序列表（星号）Unordered-Lists" class="headerlink" title="无序列表（星号）Unordered Lists (*)"></a>无序列表（星号）Unordered Lists (*)</h4><ul>
<li>列表一</li>
<li>列表二</li>
<li>列表三</li>
</ul>
<h4 id="无序列表（加号和嵌套）Unordered-Lists"><a href="#无序列表（加号和嵌套）Unordered-Lists" class="headerlink" title="无序列表（加号和嵌套）Unordered Lists (+)"></a>无序列表（加号和嵌套）Unordered Lists (+)</h4><ul>
<li>列表一</li>
<li>列表二<ul>
<li>列表二-1</li>
<li>列表二-2</li>
<li>列表二-3</li>
</ul>
</li>
<li>列表三<ul>
<li>列表一</li>
<li>列表二</li>
<li>列表三</li>
</ul>
</li>
</ul>
<h4 id="有序列表-Ordered-Lists"><a href="#有序列表-Ordered-Lists" class="headerlink" title="有序列表 Ordered Lists (-)"></a>有序列表 Ordered Lists (-)</h4><ol>
<li>第一行</li>
<li>第二行</li>
<li>第三行</li>
</ol>
<h4 id="GFM-task-list"><a href="#GFM-task-list" class="headerlink" title="GFM task list"></a>GFM task list</h4><ul>
<li>[x] GFM task list 1</li>
<li>[x] GFM task list 2</li>
<li>[ ] GFM task list 3<ul>
<li>[ ] GFM task list 3-1</li>
<li>[ ] GFM task list 3-2</li>
<li>[ ] GFM task list 3-3</li>
</ul>
</li>
<li>[ ] GFM task list 4<ul>
<li>[ ] GFM task list 4-1</li>
<li>[ ] GFM task list 4-2</li>
</ul>
</li>
</ul>
<hr>
<h3 id="绘制表格-Tables"><a href="#绘制表格-Tables" class="headerlink" title="绘制表格 Tables"></a>绘制表格 Tables</h3><table>
<thead>
<tr>
<th>项目</th>
<th style="text-align:right">价格</th>
<th style="text-align:center">数量</th>
</tr>
</thead>
<tbody>
<tr>
<td>计算机</td>
<td style="text-align:right">$1600</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td>手机</td>
<td style="text-align:right">$12</td>
<td style="text-align:center">12</td>
</tr>
<tr>
<td>管线</td>
<td style="text-align:right">$1</td>
<td style="text-align:center">234</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>First Header</th>
<th>Second Header</th>
</tr>
</thead>
<tbody>
<tr>
<td>Content Cell</td>
<td>Content Cell</td>
</tr>
<tr>
<td>Content Cell</td>
<td>Content Cell </td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>First Header</th>
<th>Second Header</th>
</tr>
</thead>
<tbody>
<tr>
<td>Content Cell</td>
<td>Content Cell</td>
</tr>
<tr>
<td>Content Cell</td>
<td>Content Cell</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>Function name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>help()</code></td>
<td>Display the help window.</td>
</tr>
<tr>
<td><code>destroy()</code></td>
<td><strong>Destroy your computer!</strong></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:left">Left-Aligned</th>
<th style="text-align:center">Center Aligned</th>
<th style="text-align:right">Right Aligned</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">col 3 is</td>
<td style="text-align:center">some wordy text</td>
<td style="text-align:right">$1600</td>
</tr>
<tr>
<td style="text-align:left">col 2 is</td>
<td style="text-align:center">centered</td>
<td style="text-align:right">$12</td>
</tr>
<tr>
<td style="text-align:left">zebra stripes</td>
<td style="text-align:center">are neat</td>
<td style="text-align:right">$1</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>Item</th>
<th style="text-align:right">Value</th>
</tr>
</thead>
<tbody>
<tr>
<td>Computer</td>
<td style="text-align:right">$1600</td>
</tr>
<tr>
<td>Phone</td>
<td style="text-align:right">$12</td>
</tr>
<tr>
<td>Pipe</td>
<td style="text-align:right">$1</td>
</tr>
</tbody>
</table>
<hr>
<h4 id="特殊符号-HTML-Entities-Codes"><a href="#特殊符号-HTML-Entities-Codes" class="headerlink" title="特殊符号 HTML Entities Codes"></a>特殊符号 HTML Entities Codes</h4><p>&copy; &amp;  &uml; &trade; &iexcl; &pound;<br>&amp; &lt; &gt; &yen; &euro; &reg; &plusmn; &para; &sect; &brvbar; &macr; &laquo; &middot; </p>
<p>X&sup2; Y&sup3; &frac34; &frac14;  &times;  &divide;   &raquo;</p>
<p>18&ordm;C  &quot;  &apos;</p>
<h3 id="Emoji表情-smiley"><a href="#Emoji表情-smiley" class="headerlink" title="Emoji表情 :smiley:"></a>Emoji表情 :smiley:</h3><blockquote>
<p>Blockquotes :star:</p>
</blockquote>
<h4 id="GFM-task-lists-amp-Emoji-amp-fontAwesome-icon-emoji-amp-editormd-logo-emoji-editormd-logo-5x"><a href="#GFM-task-lists-amp-Emoji-amp-fontAwesome-icon-emoji-amp-editormd-logo-emoji-editormd-logo-5x" class="headerlink" title="GFM task lists &amp; Emoji &amp; fontAwesome icon emoji &amp; editormd logo emoji :editormd-logo-5x:"></a>GFM task lists &amp; Emoji &amp; fontAwesome icon emoji &amp; editormd logo emoji :editormd-logo-5x:</h4><ul>
<li>[x] :smiley: @mentions, :smiley: #refs, <a href="">links</a>, <strong>formatting</strong>, and <del>tags</del> supported :editormd-logo:;</li>
<li>[x] list syntax required (any unordered or ordered list supported) :editormd-logo-3x:;</li>
<li>[x] [ ] :smiley: this is a complete item :smiley:;</li>
<li>[ ] []this is an incomplete item <a href="#">test link</a> :fa-star: @pandao; </li>
<li>[ ] [ ]this is an incomplete item :fa-star: :fa-gear:;<ul>
<li>[ ] :smiley: this is an incomplete item <a href="#">test link</a> :fa-star: :fa-gear:;</li>
<li>[ ] :smiley: this is  :fa-star: :fa-gear: an incomplete item <a href="#">test link</a>;</li>
</ul>
</li>
</ul>
<h4 id="反斜杠-Escape"><a href="#反斜杠-Escape" class="headerlink" title="反斜杠 Escape"></a>反斜杠 Escape</h4><p>*literal asterisks*</p>
<h3 id="科学公式-TeX-KaTeX"><a href="#科学公式-TeX-KaTeX" class="headerlink" title="科学公式 TeX(KaTeX)"></a>科学公式 TeX(KaTeX)</h3><p>$$E=mc^2$$</p>
<p>行内的公式$$E=mc^2$$行内的公式，行内的$$E=mc^2$$公式。</p>
<p>$$(\sqrt{3x-1}+(1+x)^2)$$</p>
<p>$$\sin(\alpha)^{\theta}=\sum_{i=0}^{n}(x^i + \cos(f))$$</p>
<p>多行公式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">\displaystyle</span><br><span class="line">\left( \sum\_&#123;k=1&#125;^n a\_k b\_k \right)^2</span><br><span class="line">\leq</span><br><span class="line">\left( \sum\_&#123;k=1&#125;^n a\_k^2 \right)</span><br><span class="line">\left( \sum\_&#123;k=1&#125;^n b\_k^2 \right)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">\displaystyle </span><br><span class="line">    \frac&#123;1&#125;&#123;</span><br><span class="line">        \Bigl(\sqrt&#123;\phi \sqrt&#123;5&#125;&#125;-\phi\Bigr) e^&#123;</span><br><span class="line">        \frac25 \pi&#125;&#125; = 1+\frac&#123;e^&#123;-2\pi&#125;&#125; &#123;1+\frac&#123;e^&#123;-4\pi&#125;&#125; &#123;</span><br><span class="line">        1+\frac&#123;e^&#123;-6\pi&#125;&#125;</span><br><span class="line">        &#123;1+\frac&#123;e^&#123;-8\pi&#125;&#125;</span><br><span class="line">         &#123;1+\cdots&#125; &#125;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f(x) = \int_&#123;-\infty&#125;^\infty</span><br><span class="line">    \hat f(\xi)\,e^&#123;2 \pi i \xi x&#125;</span><br><span class="line">    \,d\xi</span><br></pre></td></tr></table></figure>
<h3 id="绘制流程图-Flowchart"><a href="#绘制流程图-Flowchart" class="headerlink" title="绘制流程图 Flowchart"></a>绘制流程图 Flowchart</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: 用户登陆</span><br><span class="line">op=&gt;operation: 登陆操作</span><br><span class="line">cond=&gt;condition: 登陆成功 Yes or No?</span><br><span class="line">e=&gt;end: 进入后台</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure>
<h3 id="绘制序列图-Sequence-Diagram"><a href="#绘制序列图-Sequence-Diagram" class="headerlink" title="绘制序列图 Sequence Diagram"></a>绘制序列图 Sequence Diagram</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Andrew-&gt;China: Says Hello </span><br><span class="line">Note right of China: China thinks\nabout it </span><br><span class="line">China--&gt;Andrew: How are you? </span><br><span class="line">Andrew-&gt;&gt;China: I am good thanks!</span><br></pre></td></tr></table></figure>
<h3 id="End"><a href="#End" class="headerlink" title="End"></a>End</h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[markdown编辑器介绍-01]]></title>
      <url>http://xiahl.top/icarus/2016/07/08/2016-07-08-editor-markdown-01/</url>
      <content type="html"><![CDATA[<p>Markdown语法教程<br><a id="more"></a></p>
<h5 id="Markdown语法教程-Markdown-syntax-tutorial"><a href="#Markdown语法教程-Markdown-syntax-tutorial" class="headerlink" title="Markdown语法教程 (Markdown syntax tutorial)"></a>Markdown语法教程 (Markdown syntax tutorial)</h5><ul>
<li><a href="http://daringfireball.net/projects/markdown/syntax/" title="Markdown Syntax" target="_blank" rel="external">Markdown Syntax</a></li>
<li><a href="https://guides.github.com/features/mastering-markdown/" title="Mastering Markdown" target="_blank" rel="external">Mastering Markdown</a></li>
<li><a href="https://help.github.com/articles/markdown-basics/" title="Markdown Basics" target="_blank" rel="external">Markdown Basics</a></li>
<li><a href="https://help.github.com/articles/github-flavored-markdown/" title="GitHub Flavored Markdown" target="_blank" rel="external">GitHub Flavored Markdown</a></li>
<li><a href="http://www.markdown.cn/" title="Markdown 语法说明（简体中文）" target="_blank" rel="external">Markdown 语法说明（简体中文）</a></li>
<li><a href="http://markdown.tw/" title="Markdown 語法說明（繁體中文）" target="_blank" rel="external">Markdown 語法說明（繁體中文）</a></li>
</ul>
<h5 id="键盘快捷键-Keyboard-shortcuts"><a href="#键盘快捷键-Keyboard-shortcuts" class="headerlink" title="键盘快捷键 (Keyboard shortcuts)"></a>键盘快捷键 (Keyboard shortcuts)</h5><blockquote>
<p>If Editor.md code editor is on focus, you can use keyboard shortcuts.</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:left">Keyboard shortcuts (键盘快捷键)</th>
<th style="text-align:left">说明</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">F9</td>
<td style="text-align:left">切换实时预览</td>
<td style="text-align:left">Switch watch/unwatch</td>
</tr>
<tr>
<td style="text-align:left">F10</td>
<td style="text-align:left">全屏HTML预览(按 Shift + ESC 退出)</td>
<td style="text-align:left">Full preview HTML (Press Shift + ESC exit)</td>
</tr>
<tr>
<td style="text-align:left">F11</td>
<td style="text-align:left">切换全屏状态</td>
<td style="text-align:left">Switch fullscreen (Press ESC exit)</td>
</tr>
<tr>
<td style="text-align:left">Ctrl + 1~6 / Command + 1~6</td>
<td style="text-align:left">插入标题1~6</td>
<td style="text-align:left">Insert heading 1~6</td>
</tr>
<tr>
<td style="text-align:left">Ctrl + A / Command + A</td>
<td style="text-align:left">全选</td>
<td style="text-align:left">Select all</td>
</tr>
<tr>
<td style="text-align:left">Ctrl + B / Command + B</td>
<td style="text-align:left">插入粗体</td>
<td style="text-align:left">Insert bold</td>
</tr>
<tr>
<td style="text-align:left">Ctrl + D / Command + D</td>
<td style="text-align:left">插入日期时间</td>
<td style="text-align:left">Insert datetime</td>
</tr>
<tr>
<td style="text-align:left">Ctrl + E / Command + E</td>
<td style="text-align:left">插入Emoji符号</td>
<td style="text-align:left">Insert &#58;emoji&#58;</td>
</tr>
<tr>
<td style="text-align:left">Ctrl + F / Command + F</td>
<td style="text-align:left">查找/搜索</td>
<td style="text-align:left">Start searching</td>
</tr>
<tr>
<td style="text-align:left">Ctrl + G / Command + G</td>
<td style="text-align:left">切换到下一个搜索结果项</td>
<td style="text-align:left">Find next search results</td>
</tr>
<tr>
<td style="text-align:left">Ctrl + H / Command + H</td>
<td style="text-align:left">插入水平线</td>
<td style="text-align:left">Insert horizontal rule</td>
</tr>
<tr>
<td style="text-align:left">Ctrl + I / Command + I</td>
<td style="text-align:left">插入斜体</td>
<td style="text-align:left">Insert italic</td>
</tr>
<tr>
<td style="text-align:left">Ctrl + K / Command + K</td>
<td style="text-align:left">插入行内代码</td>
<td style="text-align:left">Insert inline code</td>
</tr>
<tr>
<td style="text-align:left">Ctrl + L / Command + L</td>
<td style="text-align:left">插入链接</td>
<td style="text-align:left">Insert link</td>
</tr>
<tr>
<td style="text-align:left">Ctrl + U / Command + U</td>
<td style="text-align:left">插入无序列表</td>
<td style="text-align:left">Insert unordered list</td>
</tr>
<tr>
<td style="text-align:left">Ctrl + Q</td>
<td style="text-align:left">代码折叠切换</td>
<td style="text-align:left">Switch code fold</td>
</tr>
<tr>
<td style="text-align:left">Ctrl + Z / Command + Z</td>
<td style="text-align:left">撤销</td>
<td style="text-align:left">Undo</td>
</tr>
<tr>
<td style="text-align:left">Ctrl + Y / Command + Y</td>
<td style="text-align:left">重做</td>
<td style="text-align:left">Redo</td>
</tr>
<tr>
<td style="text-align:left">Ctrl + Shift + A</td>
<td style="text-align:left">插入@链接</td>
<td style="text-align:left">Insert &#64;link</td>
</tr>
<tr>
<td style="text-align:left">Ctrl + Shift + C</td>
<td style="text-align:left">插入行内代码</td>
<td style="text-align:left">Insert inline code</td>
</tr>
<tr>
<td style="text-align:left">Ctrl + Shift + E</td>
<td style="text-align:left">打开插入Emoji表情对话框</td>
<td style="text-align:left">Open emoji dialog</td>
</tr>
<tr>
<td style="text-align:left">Ctrl + Shift + F / Command + Option + F</td>
<td style="text-align:left">替换</td>
<td style="text-align:left">Replace</td>
</tr>
<tr>
<td style="text-align:left">Ctrl + Shift + G / Shift + Command + G</td>
<td style="text-align:left">切换到上一个搜索结果项</td>
<td style="text-align:left">Find previous search results</td>
</tr>
<tr>
<td style="text-align:left">Ctrl + Shift + H</td>
<td style="text-align:left">打开HTML实体字符对话框</td>
<td style="text-align:left">Open HTML Entities dialog</td>
</tr>
<tr>
<td style="text-align:left">Ctrl + Shift + I</td>
<td style="text-align:left">插入图片</td>
<td style="text-align:left">Insert image &#33;[]&#40;&#41;</td>
</tr>
<tr>
<td style="text-align:left">Ctrl + Shift + K</td>
<td style="text-align:left">插入TeX(KaTeX)公式符号</td>
<td style="text-align:left">Insert TeX(KaTeX) symbol &#36;&#36;TeX&#36;&#36;</td>
</tr>
<tr>
<td style="text-align:left">Ctrl + Shift + L</td>
<td style="text-align:left">打开插入链接对话框</td>
<td style="text-align:left">Open link dialog</td>
</tr>
<tr>
<td style="text-align:left">Ctrl + Shift + O</td>
<td style="text-align:left">插入有序列表</td>
<td style="text-align:left">Insert ordered list</td>
</tr>
<tr>
<td style="text-align:left">Ctrl + Shift + P</td>
<td style="text-align:left">打开插入PRE对话框</td>
<td style="text-align:left">Open Preformatted text dialog</td>
</tr>
<tr>
<td style="text-align:left">Ctrl + Shift + Q</td>
<td style="text-align:left">插入引用</td>
<td style="text-align:left">Insert blockquotes</td>
</tr>
<tr>
<td style="text-align:left">Ctrl + Shift + R / Shift + Command + Option + F</td>
<td style="text-align:left">全部替换</td>
<td style="text-align:left">Replace all</td>
</tr>
<tr>
<td style="text-align:left">Ctrl + Shift + S</td>
<td style="text-align:left">插入删除线</td>
<td style="text-align:left">Insert strikethrough</td>
</tr>
<tr>
<td style="text-align:left">Ctrl + Shift + T</td>
<td style="text-align:left">打开插入表格对话框</td>
<td style="text-align:left">Open table dialog</td>
</tr>
<tr>
<td style="text-align:left">Ctrl + Shift + U</td>
<td style="text-align:left">将所选文字转成大写</td>
<td style="text-align:left">Selection text convert to uppercase</td>
</tr>
<tr>
<td style="text-align:left">Shift + Alt + C</td>
<td style="text-align:left">插入```代码</td>
<td style="text-align:left">Insert code blocks (```)</td>
</tr>
<tr>
<td style="text-align:left">Shift + Alt + H</td>
<td style="text-align:left">打开使用帮助对话框</td>
<td style="text-align:left">Open help dialog</td>
</tr>
<tr>
<td style="text-align:left">Shift + Alt + L</td>
<td style="text-align:left">将所选文本转成小写</td>
<td style="text-align:left">Selection text convert to lowercase</td>
</tr>
<tr>
<td style="text-align:left">Shift + Alt + P</td>
<td style="text-align:left">插入分页符</td>
<td style="text-align:left">Insert page break</td>
</tr>
<tr>
<td style="text-align:left">Alt + L</td>
<td style="text-align:left">将所选文本转成小写</td>
<td style="text-align:left">Selection text convert to lowercase</td>
</tr>
<tr>
<td style="text-align:left">Shift + Alt + U</td>
<td style="text-align:left">将所选的每个单词的首字母转成大写</td>
<td style="text-align:left">Selection words first letter convert to Uppercase</td>
</tr>
<tr>
<td style="text-align:left">Ctrl + Shift + Alt + C</td>
<td style="text-align:left">打开插入代码块对话框层</td>
<td style="text-align:left">Open code blocks dialog</td>
</tr>
<tr>
<td style="text-align:left">Ctrl + Shift + Alt + I</td>
<td style="text-align:left">打开插入图片对话框层</td>
<td style="text-align:left">Open image dialog</td>
</tr>
<tr>
<td style="text-align:left">Ctrl + Shift + Alt + U</td>
<td style="text-align:left">将所选文本的第一个首字母转成大写</td>
<td style="text-align:left">Selection text first letter convert to uppercase</td>
</tr>
<tr>
<td style="text-align:left">Ctrl + Alt + G</td>
<td style="text-align:left">跳转到指定的行</td>
<td style="text-align:left">Goto line</td>
</tr>
</tbody>
</table>
<h5 id="Emoji表情参考-Emoji-reference"><a href="#Emoji表情参考-Emoji-reference" class="headerlink" title="Emoji表情参考 (Emoji reference)"></a>Emoji表情参考 (Emoji reference)</h5><ul>
<li><a href="http://www.emoji-cheat-sheet.com/" title="Github emoji" target="_blank" rel="external">Github emoji</a></li>
<li><a href="http://twitter.github.io/twemoji/preview.html" title="Twitter Emoji \(Twemoji\)" target="_blank" rel="external">Twitter Emoji (Twemoji)</a></li>
<li><a href="http://fortawesome.github.io/Font-Awesome/icons/" title="FontAwesome icons emoji" target="_blank" rel="external">FontAwesome icons emoji</a></li>
</ul>
<h5 id="流程图参考-Flowchart-reference"><a href="#流程图参考-Flowchart-reference" class="headerlink" title="流程图参考 (Flowchart reference)"></a>流程图参考 (Flowchart reference)</h5><p><a href="http://adrai.github.io/flowchart.js/" target="_blank" rel="external">http://adrai.github.io/flowchart.js/</a></p>
<h5 id="时序图参考-SequenceDiagram-reference"><a href="#时序图参考-SequenceDiagram-reference" class="headerlink" title="时序图参考 (SequenceDiagram reference)"></a>时序图参考 (SequenceDiagram reference)</h5><p><a href="http://bramp.github.io/js-sequence-diagrams/" target="_blank" rel="external">http://bramp.github.io/js-sequence-diagrams/</a></p>
<h5 id="TeX-LaTeX-reference"><a href="#TeX-LaTeX-reference" class="headerlink" title="TeX/LaTeX reference"></a>TeX/LaTeX reference</h5><p><a href="http://meta.wikimedia.org/wiki/Help:Formula" target="_blank" rel="external">http://meta.wikimedia.org/wiki/Help:Formula</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[更新自身的npm]]></title>
      <url>http://xiahl.top/icarus/2016/07/07/update-npm/</url>
      <content type="html"><![CDATA[<p>如果想升级npm自身，需要在nodejs的安装目录下局部升级npm。<br><a id="more"></a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">D: </span><br><span class="line">cd &quot;Program Files\nodejs&quot;</span><br><span class="line">npm update npm</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
  
  
</search>
