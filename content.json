{"meta":{"title":"夏红林的网络日志","subtitle":null,"description":null,"author":"Xiahl","url":"http://xiahl.top"},"pages":[{"title":"关于我","date":"1940-10-24T02:26:18.955Z","updated":"2016-11-19T14:58:12.000Z","comments":true,"path":"about/index.html","permalink":"http://xiahl.top/about/index.html","excerpt":"","content":"在前端路上坚持不懈，乐于分享最平凡的人生！"},{"title":"分类归档","date":"1940-10-24T02:26:18.955Z","updated":"2016-12-03T04:51:08.000Z","comments":true,"path":"categories/index.html","permalink":"http://xiahl.top/categories/index.html","excerpt":"","content":""},{"title":"标签","date":"1940-10-24T02:26:18.955Z","updated":"2016-11-19T03:44:40.000Z","comments":true,"path":"tags/index.html","permalink":"http://xiahl.top/tags/index.html","excerpt":"","content":""}],"posts":[{"title":"let,const介绍","slug":"2016-12-04.es6-let-const-01","date":"2016-12-04T07:39:00.000Z","updated":"2016-12-04T13:43:40.000Z","comments":true,"path":"2016/12/04/2016-12-04.es6-let-const-01/","link":"","permalink":"http://xiahl.top/2016/12/04/2016-12-04.es6-let-const-01/","excerpt":".article-entry { word-break: break-all; } .article-entry h2 { text-align: left; } .article-entry h2::before, .article-entry h2::after { content: \"\"; } 前言简单介绍es6/es2015的let和const。","content":".article-entry { word-break: break-all; } .article-entry h2 { text-align: left; } .article-entry h2::before, .article-entry h2::after { content: \"\"; } 前言简单介绍es6/es2015的let和const。 let定义：let是完美的var。用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效。123456789&#123; let p1 = &quot;xiahl01&quot;; var p2 = &quot;xiahl02&quot;;&#125;p1//Uncaught ReferenceError: p1 is not defined// at &lt;anonymous&gt;:1:1p2xiahl02 说明let命令申明的p1只在{}代码块内有效。 特点：let与var的异同。不存在变量提升（Hoisting） var申明的变量在代码运行之前都存在，即“变量提升”；let申明的变量则不存在“变量提升”，必须先申明后使用！ 不允许重复声明 let不允许在同个作用域内，重复声明同一个变量，否则会报错。1234567891011121314151617181920function a1() &#123; var a1 = &quot;a1&quot;; let a1 = &quot;a10&quot;;&#125;//Uncaught SyntaxError: Identifier &apos;a1&apos; has already been declaredfunction a2() &#123; let a2 = &quot;a2&quot;; var a2 = &quot;a20&quot;;&#125;//Uncaught SyntaxError: Identifier &apos;a2&apos; has already been declaredfunction a3() &#123; let a3 = &quot;a3&quot;; let a3 = &quot;a30&quot;;&#125;//Uncaught SyntaxError: Identifier &apos;a3&apos; has already been declaredfunction a4() &#123; var a4 = &quot;a4&quot;; var a4 = &quot;a40&quot;;&#125;//undefined 暂时性死区（Temporal dead zone，简称TDZ） 在代码块内使用let命令声明的变量，如果在该变量之前被使用就进入了TDZ。123456var p1 = &quot;xiahl&quot;;&#123; p1 = &apos;temp&apos;; let p1;&#125;//Uncaught ReferenceError: p1 is not defined(…) 块级作用域（Block-level scope） 内外层代码块作用域互不影响，类似于CSS中的BFC1234567891011function f1() &#123; let _num = 5; if (true) &#123; let _num = 10; console.log(_num); &#125; console.log(_num);&#125;f1()//10//5 const定义：声明一个只读的常量。一旦声明，必须赋值并且常量的值就不能改变。其中特点同let命令。1234const NAME = &quot;xiahl&quot;;NAMENAME = &quot;xxx&quot;;//Uncaught TypeError: Assignment to constant variable.(…) 小结ES5声明变量的方法：var命令和function命令。 ES6声明变量的方法：var命令和function命令，新添加的let、const命令、import命令和class命令。 （完）","categories":[{"name":"ES6","slug":"ES6","permalink":"http://xiahl.top/categories/ES6/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://xiahl.top/tags/javascript/"},{"name":"es6","slug":"es6","permalink":"http://xiahl.top/tags/es6/"},{"name":"let","slug":"let","permalink":"http://xiahl.top/tags/let/"},{"name":"const","slug":"const","permalink":"http://xiahl.top/tags/const/"},{"name":"es2015","slug":"es2015","permalink":"http://xiahl.top/tags/es2015/"}]},{"title":"npm基础","slug":"2016-11-23.node-npm-01","date":"2016-11-22T23:53:00.000Z","updated":"2016-12-03T04:57:12.000Z","comments":true,"path":"2016/11/23/2016-11-23.node-npm-01/","link":"","permalink":"http://xiahl.top/2016/11/23/2016-11-23.node-npm-01/","excerpt":".article-entry { word-break: break-all; } .article-entry h2 { text-align: left; } .article-entry h2::before, .article-entry h2::after { content: \"\"; } 前言简单介绍node的npm相关的知识，环境是window7、node(v6.2.0)、npm(v3.8.9)。","content":".article-entry { word-break: break-all; } .article-entry h2 { text-align: left; } .article-entry h2::before, .article-entry h2::after { content: \"\"; } 前言简单介绍node的npm相关的知识，环境是window7、node(v6.2.0)、npm(v3.8.9)。 npm 配置类型以及优先级1.命令行参数： 1$ npm install xxx --save --proxy http://server:port 2.环境变量: 以 npmconfig 为前缀的环境变量将会被认为是npm的配置属性。 1npm_config_proxy=http://server:port 3.用户配置文件:可以通过 npm config get userconfig 查看文件路径。 12$ npm config get userconfigC:\\Users\\Administrator\\.npmrc 4.全局配置文件。可以通过 npm config get globalconfig 查看文件路径。 12$ npm config get globalconfigC:\\Users\\Administrator\\AppData\\Roaming\\npm\\etc\\npmrc 5.内置配置文件。安装npm的目录下的npmrc文件。 6.默认配置。 npm本身有默认配置参数，如果以上5条都没设置，则npm会使用默认配置参数。 npm 全局环境变量配置例如我希望将npm的“全局模块的存放路径”以及“cache的路径”两个文件夹放在NodeJS的主目录下，如下图： 1.在NodeJs下建立”node_global”及”node_cache”两个文件夹。执行如下命令：12$ mkdir node_global$ mkdir node_cache 2.设置.npmrc文件配置项。接着执行如下命令：12$ npm config set cache &quot;D:\\B-Soft\\Node\\node_cache&quot;$ npm config set prefix &quot;D:\\B-Soft\\Node\\node_global&quot; 查看“用户配置文件”中的.npmrc，如下图： 3.增加NOEDE_PATH(全局变量模块存放位置) “我的电脑”右键“属性”-“高级系统设置”-“高级”-“环境变量”，进入环境变量对话框，进行如下设置： 在“系统变量”下新建”NODE_PATH”，输入”D:\\B-Soft\\Node\\node_global\\node_modules”。 在“用户变量”的”PATH”后面添加“D:\\B-Soft\\Node\\node_global”。 否则在使用module的时候会导致输入命令出现“xxx不是内部或外部命令，也不是可运行的程序或批处理文件”这个错误。 4.测试(以安装babel-cli为例：Babel提供babel-cli工具，用于命令行转码。) 它的安装命令如下：1$ npm install --global babel-cli 检查babel-cli是否安装在全局模块“D:\\B-Soft\\Node\\node_global”，如下图： 检查babel-cli是否可用，输出版本号就表示babel模块安装成功并可用12$ babel version6.18.0 (babel-core 6.18.2) npm 代理设置1.基本设置12$ npm config set proxy http: //server :port$ npm config set https-proxy http: //server :port 2.其它认证设置12$ npm config set proxy http: //username :password@server:port$ npm config set https-proxy http: //username :pawword@server:port npm 相关问题1.错误：“moudle不是内部或外部命令，也不是可运行的程序或批处理文件” 解决：检查“用户变量”的”PATH”是否设置正确，具体见全局环境变量配置 2.错误：出现npm config set prefix “xxx” 或者 npm config set cache “xxx”，一直没反应。 解决：检查在设置.npmrc文件配置项是否有错误，比如路径错误","categories":[{"name":"node","slug":"node","permalink":"http://xiahl.top/categories/node/"}],"tags":[{"name":"node","slug":"node","permalink":"http://xiahl.top/tags/node/"},{"name":"npm","slug":"npm","permalink":"http://xiahl.top/tags/npm/"},{"name":"javascript","slug":"javascript","permalink":"http://xiahl.top/tags/javascript/"}]},{"title":"介绍开发Hexo博客小结","slug":"2016-11-19.introduce-hexo-blog-01","date":"2016-11-19T04:39:00.000Z","updated":"2016-12-03T04:57:24.000Z","comments":true,"path":"2016/11/19/2016-11-19.introduce-hexo-blog-01/","link":"","permalink":"http://xiahl.top/2016/11/19/2016-11-19.introduce-hexo-blog-01/","excerpt":".article-entry { word-break: break-all; } .article-entry h2 { text-align: left; } .article-entry h2::before, .article-entry h2::after { content: \"\"; } 前言简单介绍用 Hexo 搭建博客需要的准备工作，以及主题搭配和发布预览命令。","content":".article-entry { word-break: break-all; } .article-entry h2 { text-align: left; } .article-entry h2::before, .article-entry h2::after { content: \"\"; } 前言简单介绍用 Hexo 搭建博客需要的准备工作，以及主题搭配和发布预览命令。 准备工作1.安装Node 2.安装Git 3.选择编辑器(个人采用Atom) 4.配置GitHub中的SSH ：http://www.cnblogs.com/xiahl/p/5289139.html 5.安装Hexo : 具体教程参考中文、英文 博客主题1.自己开发 ：https://github.com/Xiahl1990/hexo-theme-tianxiamucun 2.选择他人 ：https://github.com/MOxFIVE/hexo-theme-yelee，推荐这个 博客开发12345npm install hexo-cli -ghexo init blogcd blognpm installhexo server 用命令 hexo init blog 创建的Blog用的是官方的默认主题landscape 如果要使用第三方主题，首先把主题克隆在themes文件夹下； 然后在blog根目录下修改Hexo配置文件_config.yml,把66行修改成第三方主题，博主用的是hexo-theme-yelee 如下图 发布预览12345hexo clean // 删除dbrm -rf .deploy_git // 删除发布数据hexo g // 生成静态文件hexo d // 发布hexo s -p 8082 // 预览 （完）","categories":[{"name":"Hexo系列","slug":"Hexo系列","permalink":"http://xiahl.top/categories/Hexo系列/"}],"tags":[{"name":"环境搭建","slug":"环境搭建","permalink":"http://xiahl.top/tags/环境搭建/"},{"name":"hexo","slug":"hexo","permalink":"http://xiahl.top/tags/hexo/"},{"name":"blog","slug":"blog","permalink":"http://xiahl.top/tags/blog/"}]},{"title":"关于GitHub静态网站域名申请","slug":"2016-11-19.apply-website-domain-02","date":"2016-11-19T01:12:00.000Z","updated":"2016-12-03T04:57:30.000Z","comments":true,"path":"2016/11/19/2016-11-19.apply-website-domain-02/","link":"","permalink":"http://xiahl.top/2016/11/19/2016-11-19.apply-website-domain-02/","excerpt":".article-entry { word-break: break-all; } .article-entry h2 { text-align: left; } .article-entry h2::before, .article-entry h2::after { content: \"\"; } 前言简单介绍用 Hexo 搭建博客的时候域名申请问题。比如说，我们在创建github的gh-pages的时候，域名是xxxxxxxx.github.io.怎么才能换个有个性的域名呢？","content":".article-entry { word-break: break-all; } .article-entry h2 { text-align: left; } .article-entry h2::before, .article-entry h2::after { content: \"\"; } 前言简单介绍用 Hexo 搭建博客的时候域名申请问题。比如说，我们在创建github的gh-pages的时候，域名是xxxxxxxx.github.io.怎么才能换个有个性的域名呢？ 域名提供商选择1.阿里云(个人选择)：自己购买了个便宜的 博客域名，学习用用就可以了…… 2.域名解析：大概等10分钟生效 GitHub域名映射1.进入个人GitHuB项目,添加CNAME文件，内容是”XXXXXX”(自己申请的域名) 注意：CNAME文件可以放在resources文件夹下，在生成发布博客的时候会自动放在GitHUb网站根目录下； 图1 “CNAME”文件 图2 “CNAME”文件的内容 2.在”Settings”中找到”GitHub Pages”项，设置域名 图3 “Settings”标签图4 “GitHub Page”项 （完）","categories":[{"name":"Hexo系列","slug":"Hexo系列","permalink":"http://xiahl.top/categories/Hexo系列/"}],"tags":[{"name":"GitHub","slug":"GitHub","permalink":"http://xiahl.top/tags/GitHub/"},{"name":"域名","slug":"域名","permalink":"http://xiahl.top/tags/域名/"},{"name":"静态网站","slug":"静态网站","permalink":"http://xiahl.top/tags/静态网站/"},{"name":"DNS","slug":"DNS","permalink":"http://xiahl.top/tags/DNS/"},{"name":"DNS解析","slug":"DNS解析","permalink":"http://xiahl.top/tags/DNS解析/"}]}]}