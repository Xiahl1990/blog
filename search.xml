<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[let,const介绍]]></title>
      <url>http://xiahl.top/2016/12/04/2016-12-04.es6-let-const-01/</url>
      <content type="html"><![CDATA[<style>
    .article-entry {
      word-break: break-all;
    }
    .article-entry h2 {
      text-align: left;
    }
    .article-entry h2::before, .article-entry h2::after {
      content: "";
    }
</style>

<p></p><h2 id="intro">前言</h2>简单介绍es6/es2015的let和const。<br><a id="more"></a><p></p>
<h2 id="let"><a href="#let" class="headerlink" title="let"></a>let</h2><h3 id="定义：let是完美的var。用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效。"><a href="#定义：let是完美的var。用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效。" class="headerlink" title="定义：let是完美的var。用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效。"></a>定义：let是完美的var。用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  let p1 = &quot;xiahl01&quot;;</div><div class="line">  var p2 = &quot;xiahl02&quot;;</div><div class="line">&#125;</div><div class="line">p1</div><div class="line">//Uncaught ReferenceError: p1 is not defined</div><div class="line">//    at &lt;anonymous&gt;:1:1</div><div class="line">p2</div><div class="line">xiahl02</div></pre></td></tr></table></figure>
<ul>
<li>说明let命令申明的p1只在{}代码块内有效。</li>
</ul>
<h3 id="特点：let与var的异同。"><a href="#特点：let与var的异同。" class="headerlink" title="特点：let与var的异同。"></a>特点：let与var的异同。</h3><h4 id="不存在变量提升（Hoisting）"><a href="#不存在变量提升（Hoisting）" class="headerlink" title="不存在变量提升（Hoisting）"></a>不存在变量提升（Hoisting）</h4><blockquote>
<p>var申明的变量在代码运行之前都存在，即“变量提升”；<br>let申明的变量则不存在“变量提升”，必须先申明后使用！</p>
</blockquote>
<h4 id="不允许重复声明"><a href="#不允许重复声明" class="headerlink" title="不允许重复声明"></a>不允许重复声明</h4><blockquote>
<p>let不允许在同个作用域内，重复声明同一个变量，否则会报错。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">function a1() &#123;</div><div class="line">  var a1 = &quot;a1&quot;;</div><div class="line">  let a1 = &quot;a10&quot;;</div><div class="line">&#125;</div><div class="line">//Uncaught SyntaxError: Identifier &apos;a1&apos; has already been declared</div><div class="line">function a2() &#123;</div><div class="line">  let a2 = &quot;a2&quot;;</div><div class="line">  var a2 = &quot;a20&quot;;</div><div class="line">&#125;</div><div class="line">//Uncaught SyntaxError: Identifier &apos;a2&apos; has already been declared</div><div class="line">function a3() &#123;</div><div class="line">  let a3 = &quot;a3&quot;;</div><div class="line">  let a3 = &quot;a30&quot;;</div><div class="line">&#125;</div><div class="line">//Uncaught SyntaxError: Identifier &apos;a3&apos; has already been declared</div><div class="line">function a4() &#123;</div><div class="line">  var a4 = &quot;a4&quot;;</div><div class="line">  var a4 = &quot;a40&quot;;</div><div class="line">&#125;</div><div class="line">//undefined</div></pre></td></tr></table></figure></p>
</blockquote>
<h4 id="暂时性死区（Temporal-dead-zone，简称TDZ）"><a href="#暂时性死区（Temporal-dead-zone，简称TDZ）" class="headerlink" title="暂时性死区（Temporal dead zone，简称TDZ）"></a>暂时性死区（Temporal dead zone，简称TDZ）</h4><blockquote>
<p>在代码块内使用let命令声明的变量，如果在该变量之前被使用就进入了TDZ。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var p1 = &quot;xiahl&quot;;</div><div class="line">&#123;</div><div class="line">  p1 = &apos;temp&apos;;</div><div class="line">  let p1;</div><div class="line">&#125;</div><div class="line">//Uncaught ReferenceError: p1 is not defined(…)</div></pre></td></tr></table></figure></p>
</blockquote>
<h4 id="块级作用域（Block-level-scope）"><a href="#块级作用域（Block-level-scope）" class="headerlink" title="块级作用域（Block-level scope）"></a>块级作用域（Block-level scope）</h4><blockquote>
<p>内外层代码块作用域互不影响，类似于CSS中的BFC<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">function f1() &#123;</div><div class="line">  let _num = 5;</div><div class="line">  if (true) &#123;</div><div class="line">    let _num = 10;</div><div class="line">    console.log(_num);</div><div class="line">  &#125;</div><div class="line">  console.log(_num);</div><div class="line">&#125;</div><div class="line">f1()</div><div class="line">//10</div><div class="line">//5</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><h3 id="定义：声明一个只读的常量。一旦声明，必须赋值并且常量的值就不能改变。其中特点同let命令。"><a href="#定义：声明一个只读的常量。一旦声明，必须赋值并且常量的值就不能改变。其中特点同let命令。" class="headerlink" title="定义：声明一个只读的常量。一旦声明，必须赋值并且常量的值就不能改变。其中特点同let命令。"></a>定义：声明一个只读的常量。一旦声明，必须赋值并且常量的值就不能改变。其中特点同let命令。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">const NAME = &quot;xiahl&quot;;</div><div class="line">NAME</div><div class="line">NAME = &quot;xxx&quot;;</div><div class="line">//Uncaught TypeError: Assignment to constant variable.(…)</div></pre></td></tr></table></figure>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>ES5声明变量的方法：var命令和function命令。</p>
<p>ES6声明变量的方法：var命令和function命令，新添加的<code>let</code>、<code>const</code>命令、<code>import</code>命令和<code>class</code>命令。</p>
<p>（完）</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[npm基础]]></title>
      <url>http://xiahl.top/2016/11/23/2016-11-23.node-npm-01/</url>
      <content type="html"><![CDATA[<style>
    .article-entry {
      word-break: break-all;
    }
    .article-entry h2 {
      text-align: left;
    }
    .article-entry h2::before, .article-entry h2::after {
      content: "";
    }
</style>

<p></p><h2 id="intro">前言</h2>简单介绍node的npm相关的知识，环境是window7、node(v6.2.0)、npm(v3.8.9)。<br><a id="more"></a><p></p>
<h2 id="npm-配置类型以及优先级"><a href="#npm-配置类型以及优先级" class="headerlink" title="npm 配置类型以及优先级"></a>npm 配置类型以及优先级</h2><p>1.命令行参数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install xxx --save --proxy http://server:port</div></pre></td></tr></table></figure>
<p>2.环境变量: 以 npm<em>config</em> 为前缀的环境变量将会被认为是npm的配置属性。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm_config_proxy=http://server:port</div></pre></td></tr></table></figure>
<p>3.用户配置文件:可以通过 npm config get userconfig 查看文件路径。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm config get userconfig</div><div class="line">C:\Users\Administrator\.npmrc</div></pre></td></tr></table></figure>
<p>4.全局配置文件。可以通过 npm config get globalconfig 查看文件路径。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm config get globalconfig</div><div class="line">C:\Users\Administrator\AppData\Roaming\npm\etc\npmrc</div></pre></td></tr></table></figure>
<p>5.内置配置文件。安装npm的目录下的npmrc文件。</p>
<p>6.默认配置。 npm本身有默认配置参数，如果以上5条都没设置，则npm会使用默认配置参数。</p>
<h2 id="npm-全局环境变量配置"><a href="#npm-全局环境变量配置" class="headerlink" title="npm 全局环境变量配置"></a>npm 全局环境变量配置</h2><p>例如我希望将npm的“全局模块的存放路径”以及“cache的路径”两个文件夹放在NodeJS的主目录下，如下图：</p>
<p><img src="/resources/GitHub-node-npm-config.jpg" alt=""></p>
<p>1.在NodeJs下建立”node_global”及”node_cache”两个文件夹。执行如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ mkdir node_global</div><div class="line">$ mkdir node_cache</div></pre></td></tr></table></figure></p>
<p>2.设置.npmrc文件配置项。接着执行如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm config set cache &quot;D:\B-Soft\Node\node_cache&quot;</div><div class="line">$ npm config set prefix &quot;D:\B-Soft\Node\node_global&quot;</div></pre></td></tr></table></figure></p>
<p>查看“用户配置文件”中的.npmrc，如下图：<br><img src="/resources/GitHub-npmrc.png" alt=""></p>
<p>3.增加NOEDE_PATH(全局变量模块存放位置)</p>
<ul>
<li>“我的电脑”右键“属性”-“高级系统设置”-“高级”-“环境变量”，进入环境变量对话框，进行如下设置：</li>
</ul>
<blockquote>
<p>在“系统变量”下新建”NODE_PATH”，输入”D:\B-Soft\Node\node_global\node_modules”。</p>
<p>在“用户变量”的”PATH”后面添加“D:\B-Soft\Node\node_global”。</p>
</blockquote>
<ul>
<li>否则在使用module的时候会导致输入命令出现“xxx不是内部或外部命令，也不是可运行的程序或批处理文件”这个<a href="#npm-相关问题">错误</a>。</li>
</ul>
<p>4.测试(以安装babel-cli为例：Babel提供babel-cli工具，用于命令行转码。)</p>
<p>它的安装命令如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --global babel-cli</div></pre></td></tr></table></figure></p>
<ul>
<li>检查babel-cli是否安装在全局模块“D:\B-Soft\Node\node_global”，如下图：</li>
</ul>
<p><img src="/resources/GitHub-moudle-babel-cli.png" alt=""></p>
<ul>
<li>检查babel-cli是否可用，输出版本号就表示babel模块安装成功并可用<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ babel version</div><div class="line">6.18.0 (babel-core 6.18.2)</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="npm-代理设置"><a href="#npm-代理设置" class="headerlink" title="npm 代理设置"></a>npm 代理设置</h2><p>1.基本设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm config set proxy http: //server :port</div><div class="line">$ npm config set https-proxy http: //server :port</div></pre></td></tr></table></figure></p>
<p>2.其它认证设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm config set proxy http: //username :password@server:port</div><div class="line">$ npm config set https-proxy http: //username :pawword@server:port</div></pre></td></tr></table></figure></p>
<h2 id="npm-相关问题"><a href="#npm-相关问题" class="headerlink" title="npm 相关问题"></a>npm 相关问题</h2><p>1.错误：“moudle不是内部或外部命令，也不是可运行的程序或批处理文件”</p>
<ul>
<li>解决：检查“用户变量”的”PATH”是否设置正确，具体见<a href="#npm-全局环境变量配置">全局环境变量配置</a></li>
</ul>
<p>2.错误：出现<code>npm config set prefix “xxx” </code>或者 <code>npm config set cache “xxx”</code>，一直没反应。</p>
<ul>
<li>解决：检查在设置.npmrc文件配置项是否有错误，比如路径错误</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[介绍开发Hexo博客小结]]></title>
      <url>http://xiahl.top/2016/11/19/2016-11-19.introduce-hexo-blog-01/</url>
      <content type="html"><![CDATA[<style>
    .article-entry {
      word-break: break-all;
    }
    .article-entry h2 {
      text-align: left;
    }
    .article-entry h2::before, .article-entry h2::after {
      content: "";
    }
</style>

<p></p><h2 id="intro">前言</h2>简单介绍用 Hexo 搭建博客需要的准备工作，以及主题搭配和发布预览命令。<br><a id="more"></a><p></p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>1.安装Node</p>
<p>2.安装Git</p>
<p>3.选择编辑器(个人采用Atom)</p>
<p>4.配置GitHub中的SSH ：<a href="http://www.cnblogs.com/xiahl/p/5289139.html" target="_blank" rel="external">http://www.cnblogs.com/xiahl/p/5289139.html</a></p>
<p>5.安装Hexo : 具体教程参考<a href="https://hexo.io/zh-cn/" target="_blank" rel="external">中文</a>、<a href="https://hexo.io/" target="_blank" rel="external">英文</a></p>
<h2 id="博客主题"><a href="#博客主题" class="headerlink" title="博客主题"></a>博客主题</h2><p>1.自己开发 ：<a href="https://github.com/Xiahl1990/hexo-theme-tianxiamucun" target="_blank" rel="external">https://github.com/Xiahl1990/hexo-theme-tianxiamucun</a></p>
<p>2.选择他人 ：<a href="https://github.com/MOxFIVE/hexo-theme-yelee，推荐这个" target="_blank" rel="external">https://github.com/MOxFIVE/hexo-theme-yelee，推荐这个</a></p>
<h2 id="博客开发"><a href="#博客开发" class="headerlink" title="博客开发"></a>博客开发</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">npm install hexo-cli -g</div><div class="line">hexo init blog</div><div class="line">cd blog</div><div class="line">npm install</div><div class="line">hexo server</div></pre></td></tr></table></figure>
<ul>
<li>用命令 <code>hexo init blog</code> 创建的Blog用的是官方的默认主题landscape</li>
<li>如果要使用第三方主题，首先把主题克隆在themes文件夹下；</li>
<li>然后在blog根目录下修改Hexo配置文件_config.yml,把66行修改成第三方主题，博主用的是hexo-theme-yelee</li>
</ul>
<blockquote>
<p>如下图<br><img src="/resources/modify-theme.jpg" alt=""></p>
</blockquote>
<h2 id="发布预览"><a href="#发布预览" class="headerlink" title="发布预览"></a>发布预览</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">hexo clean // 删除db</div><div class="line">rm -rf .deploy_git // 删除发布数据</div><div class="line">hexo g // 生成静态文件</div><div class="line">hexo d // 发布</div><div class="line">hexo s -p 8082 // 预览</div></pre></td></tr></table></figure>
<p>（完）</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于GitHub静态网站域名申请]]></title>
      <url>http://xiahl.top/2016/11/19/2016-11-19.apply-website-domain-02/</url>
      <content type="html"><![CDATA[<style>
    .article-entry {
      word-break: break-all;
    }
    .article-entry h2 {
      text-align: left;
    }
    .article-entry h2::before, .article-entry h2::after {
      content: "";
    }
</style>

<p></p><h2 id="intro">前言</h2>简单介绍用 Hexo 搭建博客的时候域名申请问题。比如说，我们在创建github的gh-pages的时候，域名是xxxxxxxx.github.io.怎么才能换个有个性的域名呢？<p></p>
<a id="more"></a>
<h2 id="域名提供商选择"><a href="#域名提供商选择" class="headerlink" title="域名提供商选择"></a>域名提供商选择</h2><p>1.阿里云(个人选择)：自己购买了个便宜的 <a href="http://xiahl.top/">博客域名</a>，学习用用就可以了……</p>
<p>2.域名解析：大概等10分钟生效</p>
<p><img src="/resources/domainJ.jpg" alt=""></p>
<h2 id="GitHub域名映射"><a href="#GitHub域名映射" class="headerlink" title="GitHub域名映射"></a>GitHub域名映射</h2><p>1.进入个人GitHuB项目,添加CNAME文件，内容是”XXXXXX”(自己申请的域名)</p>
<ul>
<li>注意：CNAME文件可以放在resources文件夹下，在生成发布博客的时候会自动放在GitHUb网站根目录下；</li>
</ul>
<blockquote>
<p>图1 “CNAME”文件<br><img src="/resources/CNAME-file.jpg" alt=""></p>
<p>图2 “CNAME”文件的内容<br><img src="/resources/CNAME-file-content.jpg" alt=""></p>
</blockquote>
<p>2.在”Settings”中找到”GitHub Pages”项，设置域名</p>
<blockquote>
<p>图3 “Settings”标签<br><img src="/resources/GitHub-settings.jpg" alt=""><br>图4 “GitHub Page”项<br><img src="/resources/GitHub-domain.jpg" alt=""></p>
</blockquote>
<p>（完）</p>
]]></content>
    </entry>
    
  
  
</search>
