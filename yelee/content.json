{"meta":{"title":"夏红林","subtitle":null,"description":"夏红林的个人博客","author":"夏红林","url":"http://xiahl.top"},"pages":[{"title":"About","date":"2016-07-09T13:25:09.350Z","updated":"2016-07-09T13:25:09.350Z","comments":false,"path":"about/index.html","permalink":"http://xiahl.top/about/index.html","excerpt":"","text":"hexo-theme-tianxiamucun&emsp;&emsp;Theme tianxiamucun relies on Hexo-Theme-icarus and AdminLTE, thanks for the author ppoffice and Almsaeed Studio. Fix some bugs, change lots of styles, add several features. And then I made the theme. tianxiamucun is mainly designed for fluent text reading. I change styles and add functions, meanwhile, try hard to keep this theme simple, stupid and clear. Theme DEMO: Xiahl1990’s Blog"},{"title":"Editor","date":"2016-06-28T13:51:37.225Z","updated":"2016-06-28T13:51:37.225Z","comments":true,"path":"editor/index.html","permalink":"http://xiahl.top/editor/index.html","excerpt":"","text":""},{"title":"Categories","date":"2016-06-27T12:27:36.068Z","updated":"2016-06-27T12:27:36.068Z","comments":false,"path":"categories/index.html","permalink":"http://xiahl.top/categories/index.html","excerpt":"","text":""},{"title":"","date":"2016-06-28T15:12:33.038Z","updated":"2016-06-28T15:08:26.259Z","comments":true,"path":"resources/duosuo.css","permalink":"http://xiahl.top/resources/duosuo.css","excerpt":"","text":"/*More info: http://moxfive.xyz/2015/09/29/duosuo-style*/ /*UA Start*/ span.ua { display: inline-block !important; margin: auto 1px .3em !important; color: #fff !important; } .os_other { background-color: #bdb2a7!important; color: #fff; border: 1px solid #BBB!important; border-radius: 4px; padding: 0 5px!important; opacity: .4; } .ua_other { background-color: #bdb2a7!important; color: #fff; border: 1px solid #BBB!important; border-radius: 4px; padding: 0 5px!important; opacity: .4; } .ua_other { opacity: 1; } .os_other:hover { opacity: 1; } .ua_ie { background-color: #428bca!important; border-color: #357ebd!important; border-radius: 4px; padding: 0 5px!important; opacity: .4; } .ua_ie:hover { opacity: 1; } .ua_firefox { background-color: #f0ad4e!important; border-color: #eea236!important; border-radius: 4px; padding: 0 5px!important; opacity: .4; } .ua_firefox:hover { opacity: 1; } .ua_maxthon { background-color: #7373B9!important; border-color: #7373B9!important; border-radius: 4px; padding: 0 5px!important; opacity: .4; } .ua_maxthon:hover { opacity: 1; } .ua_ucweb { background-color: #FF740F!important; border-color: #d43f3a!important; border-radius: 4px; padding: 0 5px!important; opacity: .4; } .ua_ucweb:hover { opacity: 1; } .ua_sogou { background-color: #78ACE9!important; border-color: #4cae4c!important; border-radius: 4px; padding: 0 5px!important; opacity: .4; } .ua_sogou:hover { opacity: 1; } .ua_2345explorer { background-color: #2478B8!important; border-color: #4cae4c!important; border-radius: 4px; padding: 0 5px!important; opacity: .4; } .ua_2345explorer:hover { opacity: 1; } .ua_2345chrome { background-color: #F9D024!important; border-color: #4cae4c!important; border-radius: 4px; padding: 0 5px!important; opacity: .4; } .ua_2345chrome:hover { opacity: 1; } .ua_mi { background-color: #FF4A00!important; border-color: #4cae4c!important; border-radius: 4px; padding: 0 5px!important; opacity: .4; } .ua_mi:hover { opacity: 1; } .ua_lbbrowser { background-color: #FC9D2E!important; border-color: #4cae4c!important; border-radius: 4px; padding: 0 5px!important; opacity: .4; } .ua_lbbrowser:hover { opacity: 1; } .ua_chrome { background-color: #EE6252!important; border-color: #4cae4c!important; border-radius: 4px; padding: 0 5px!important; opacity: .4; } .ua_chrome:hover { opacity: 1; } .ua_qq { background-color: #3D88A8!important; border-color: #4cae4c!important; border-radius: 4px; padding: 0 5px!important; opacity: .4; } .ua_qq:hover { opacity: 1; } .ua_apple { background-color: #E95620!important; border-color: #4cae4c!important; border-radius: 4px; padding: 0 5px!important; opacity: .4; } .ua_apple:hover { opacity: 1; } .ua_opera { background-color: #d9534f!important; border-color: #d43f3a!important; border-radius: 4px; padding: 0 5px!important; opacity: .4; } .ua_opera:hover { opacity: 1; } .os_vista,.os_2000,.os_windows,.os_xp,.os_7,.os_8,.os_8_1 { background-color: #39b3d7!important; border-color: #46b8da!important; border-radius: 4px; padding: 0 5px!important; opacity: .4; } .os_vista:hover,.os_2000:hover,.os_windows:hover,.os_xp:hover,.os_7:hover,.os_8:hover,.os_8_1:hover { opacity: 1; } .os_android { background-color: #98C13D!important; border-color: #01B171!important; border-radius: 4px; padding: 0 5px!important; opacity: .4; } .os_android:hover { opacity: 1; } .os_ubuntu { background-color: #DD4814!important; border-color: #01B171!important; border-radius: 4px; padding: 0 5px!important; opacity: .4; } .os_ubuntu:hover { opacity: 1; } .os_linux { background-color: #3A3A3A!important; border-color: #1F1F1F!important; border-radius: 4px; padding: 0 5px!important; opacity: .4; } .os_linux:hover { opacity: 1; } .os_mac { background-color: #666666!important; border-color: #1F1F1F!important; border-radius: 4px; padding: 0 5px!important; opacity: .4; } .os_mac:hover { opacity: 1; } .os_unix { background-color: #006600!important; border-color: #1F1F1F!important; border-radius: 4px; padding: 0 5px!important; opacity: .4; } .os_unix:hover { opacity: 1; } .os_nokia { background-color: #014485!important; border-color: #1F1F1F!important; border-radius: 4px; padding: 0 5px!important; opacity: .4; } .os_nokia:hover { opacity: 1; } /*UA End*/ /*博主标记*/ .sskadmin { background-color: #00a67c!important; border-color: #01B171!important; border-radius: 4px; padding: 0 5px!important; opacity: .4; } .sskadmin:hover { opacity: 1; } /*头像样式*/ #ds-reset .ds-avatar{background:none !important; box-shadow:none !important;} #ds-reset .ds-avatar img , #ds-thread #ds-reset ul.ds-children .ds-avatar img{width:50px !important;height: 50px !important;-webkit-transition: .9s;-moz-transition: .9s;-o-transition: .9s;-ms-transition: .9s;padding: 2px;border: 1px solid #ddd;background: #fff;} /*鼠标悬停旋转头像*/ .ds-post:hover .ds-avatar img{transform:rotate(360deg);-webkit-transform:rotate(360deg);-moz-transform:rotate(360deg);-o-transform:rotate(360deg);-ms-transform:rotate(360deg);border-radius:30px !important;} #ds-reset .ds-avatar img:hover{transform:rotate(360deg);-webkit-transform:rotate(360deg);-moz-transform:rotate(360deg);-o-transform:rotate(360deg);-ms-transform:rotate(360deg);border-radius:30px !important;} /*通用样式*/ #ds-thread #ds-reset .ds-comment-body, #ds-thread #ds-reset ul.ds-children .ds-comment-body{padding-left:70px !important;} #ds-thread #ds-reset .ds-comment-body, #ds-thread #ds-reset ul.ds-children .ds-comment-body{padding-left:70px !important;} .ds-post:hover{background:#eee !important;} #ds-thread #ds-reset ul.ds-children .ds-avatar{width:50px !important;} #ds-thread #ds-reset .ds-replybox{padding: 0 0 0 80px !important;} #ds-reset #ds-ctx .ds-ctx-entry .ds-ctx-body{margin-left: 68px !important;} #ds-recent-comments li.ds-comment:nth-of-type(1){border:none !important;} #ds-thread{ border-radius: 3px; } /** 多说最近留言样式 **/ #ds-recent-comments .ds-avatar img{ width:54px;height:54px; border-radius: 50%; -webkit-border-radius: 50%; -moz-border-radius: 50%; box-shadow: inset 0 -1px 0 #3333sf;/*设置图像阴影效果*/ -webkit-box-shadow: inset 0 -1px 0 #3333sf; -webkit-transition: 0.4s; -webkit-transition: -webkit-transform 0.4s ease-out; transition: transform 0.4s ease-out; -moz-transition: -moz-transform 0.4s ease-out; } #ds-recent-comments .ds-avatar img:hover{ box-shadow: 0 0 10px #fff; rgba(255,255,255,.6), inset 0 0 20px rgba(255,255,255,1); -webkit-box-shadow: 0 0 10px #fff; rgba(255,255,255,.6), inset 0 0 20px rgba(255,255,255,1); transform: rotateZ(360deg); -webkit-transform: rotateZ(360deg); -moz-transform: rotateZ(360deg); } /*喜欢按钮样式*/ .ds-meta { opacity: .5; } .ds-meta:hover { opacity: 1; } #ds-thread #ds-reset a.ds-like-thread-button { background-image: none; background-color: #fee2d3; border: none; text-shadow: none; font-family: inherit; } /*社交账号登陆透明度*/ #ds-thread #ds-reset .ds-login-buttons { opacity: .45 !important; } #ds-thread #ds-reset .ds-login-buttons:hover { opacity: 1 !important; } /*评论、文本框字体*/ #ds-thread #ds-reset .ds-comment-body p, #ds-thread #ds-reset .ds-textarea-wrapper textarea { font-size: 1.15em; color: #717171; font-family: inherit; } /*用户名等超链接颜色*/ #ds-thread #ds-reset .ds-highlight { color: #ef7c6c !important; } /*未登录用户名字颜色*/ #ds-thread #ds-reset .ds-user-name { color: #ef7c6c !important; } /*输入框背景*/ #ds-thread #ds-reset .ds-textarea-wrapper textarea { background: url(\"/resources/Mihawk-s.png\") bottom right no-repeat; } /*评论框背景*/ #ds-thread #ds-reset .ds-textarea-wrapper { background: rgba(255, 255, 255, .5); } /*工具栏背景*/ #ds-reset .ds-gradient-bg { background: rgba(255, 255, 255, .5); } /*\"发布\"按钮背景*/ #ds-thread #ds-reset .ds-post-button { background-image: none; background: rgba(136, 172, 219, .2); text-shadow: none; } /*评论列表背景*/ #ds-thread #ds-reset li.ds-post { background: rgba(255, 255, 255, .2); } #ds-thread #ds-reset li.ds-post:hover { background-color: rgba(255, 255, 255, .5) !important; } /*评论数标签*/ #ds-thread #ds-reset li.ds-tab a.ds-current { background: rgba(255, 255, 255, .2); }"},{"title":"Tags","date":"2016-06-27T12:27:40.506Z","updated":"2016-06-27T12:27:40.506Z","comments":false,"path":"tags/index.html","permalink":"http://xiahl.top/tags/index.html","excerpt":"","text":""},{"title":"","date":"2016-06-28T15:12:33.042Z","updated":"2016-06-28T15:08:26.262Z","comments":true,"path":"resources/embed.js","permalink":"http://xiahl.top/resources/embed.js","excerpt":"","text":"//HelloDog - http://wsgzao.github.io/post/duoshuo/ //More info: http://moxfive.xyz/2015/09/29/duosuo-style //移动客户端判断开始 function checkMobile() { var isiPad = navigator.userAgent.match(/iPad/i) != null; if (isiPad) { return false; } var isMobile = navigator.userAgent.match(/iphone|android|phone|mobile|wap|netfront|java|opera mobi|opera mini|ucweb|windows ce|symbian|symbianos|series|webos|sony|blackberry|dopod|nokia|samsung|palmsource|xda|pieplus|meizu|midp|cldc|motorola|foma|docomo|up.browser|up.link|blazer|helio|hosin|huawei|novarra|coolpad|webos|techfaith|palmsource|alcatel|amoi|ktouch|nexian|ericsson|philips|sagem|wellcom|bunjalloo|maui|smartphone|iemobile|spice|bird|zte-|longcos|pantech|gionee|portalmmm|jig browser|hiptop|benq|haier|^lct|320x320|240x320|176x220/i) != null; if (isMobile) { return true; } return false; } //移动客户端判断结束 //管理员判断开始 function sskadmin(e) { var ssk = ''; if (e.user_id == 13232586) { if (checkMobile()) { ssk = '博主'; } else { ssk = '博主'; } } else { if (checkMobile()) { ssk = ''; } } return ssk; } //管理员判断结束 //显UA开始 function ua(e) { var r = new Array; var outputer = ''; if (r = e.match(/FireFox\\/([^\\s]+)/ig)) { var r1 = r[0].split(\"/\"); outputer = ' FireFox' } else if (r = e.match(/Maxthon([\\d]*)\\/([^\\s]+)/ig)) { var r1 = r[0].split(\"/\"); outputer = ' Maxthon' } else if (r = e.match(/BIDUBrowser([\\d]*)\\/([^\\s]+)/ig)) { var r1 = r[0].split(\"/\"); outputer = ' 百度浏览器' } else if (r = e.match(/UBrowser([\\d]*)\\/([^\\s]+)/ig)) { var r1 = r[0].split(\"/\"); outputer = ' UCBrowser' } else if (r = e.match(/UCBrowser([\\d]*)\\/([^\\s]+)/ig)) { var r1 = r[0].split(\"/\"); outputer = ' UCBrowser' } else if (r = e.match(/MetaSr/ig)) { outputer = ' 搜狗浏览器' } else if (r = e.match(/2345Explorer/ig)) { outputer = ' 2345王牌浏览器' } else if (r = e.match(/2345chrome/ig)) { outputer = ' 2345加速浏览器' } else if (r = e.match(/LBBROWSER/ig)) { outputer = ' 猎豹安全浏览器' } else if (r = e.match(/MicroMessenger\\/([^\\s]+)/ig)) { var r1 = r[0].split(\"/\"); outputer = ' 微信' /*.split('/')[0]*/ } else if (r = e.match(/QQBrowser\\/([^\\s]+)/ig)) { var r1 = r[0].split(\"/\"); outputer = ' QQ浏览器' /*.split('/')[0]*/ } else if (r = e.match(/QQ\\/([^\\s]+)/ig)) { var r1 = r[0].split(\"/\"); outputer = ' QQ浏览器' /*.split('/')[0]*/ } else if (r = e.match(/MiuiBrowser\\/([^\\s]+)/ig)) { var r1 = r[0].split(\"/\"); outputer = ' Miui浏览器' /*.split('/')[0]*/ } else if (r = e.match(/Chrome([\\d]*)\\/([^\\s]+)/ig)) { var r1 = r[0].split(\"/\"); outputer = ' Chrome' /*.split('.')[0]*/ } else if (r = e.match(/safari\\/([^\\s]+)/ig)) { var r1 = r[0].split(\"/\"); outputer = ' Safari' } else if (r = e.match(/Opera[\\s|\\/]([^\\s]+)/ig)) { var r1 = r[0].split(\"/\"); outputer = ' Opera' } else if (r = e.match(/Trident\\/7.0/gi)) { outputer = ' IE 11' } else if (r = e.match(/MSIE\\s([^\\s|;]+)/gi)) { outputer = ' IE' + ' ' + r[0] /*.replace('MSIE', '').split('.')[0]*/ } else { outputer = ' 其它浏览器' } if (checkMobile()) { Mobile = ''; } else { Mobile = ''; } return outputer + \"\" + Mobile; } function os(e) { var os = ''; if (e.match(/win/ig)) { if (e.match(/nt 5.1/ig)) { os = ' Windows XP' } else if (e.match(/nt 6.1/ig)) { os = ' Windows 7' } else if (e.match(/nt 6.2/ig)) { os = ' Windows 8' } else if (e.match(/nt 6.3/ig)) { os = ' Windows 8.1' } else if (e.match(/nt 10.0/ig)) { os = ' Windows 10' } else if (e.match(/nt 6.0/ig)) { os = ' Windows Vista' } else if (e.match(/nt 5/ig)) { os = ' Windows 2000' } else { os = ' Windows' } } else if (e.match(/android/ig)) { os = ' Android' } else if (e.match(/ubuntu/ig)) { os = ' Ubuntu' } else if (e.match(/linux/ig)) { os = ' Linux' } else if (e.match(/mac/ig)) { os = ' Mac OS X' } else if (e.match(/unix/ig)) { os = ' Unix' } else if (e.match(/symbian/ig)) { os = ' Nokia SymbianOS' } else { os = ' 其它操作系统' } return os + \"\"; } //显UA结束 (function(e, t, n) { function at(e, t) { for (var n in t) t[n] && (e[n] ? e[n].set(t[n]) : e[n] = new et(t[n])) } function ft(e, t) { for (var n in t) e[n] = t[n] } function lt() { if (u.checkPermission()) return; var t; while (t = O.shift()) { var n = u.createNotification(t.iconUrl, t.title, t.body), i = t.url; try { n.onclick = function() { e.focus(), r.href = i, n.cancel() } } catch(s) {} n.show(), setTimeout(function() { n.cancel && n.cancel() }, 8e3) } } function ct() { return rt.data.user_id == 0 } function ht(e, t, n) { if (o) try { o.removeItem(e), o.removeItem(e + \":timestamp\"), o[e] = i.stringify(t), o[e + \":timestamp\"] = Math.floor(n) } catch(r) {} } function pt(e) { w.theme = e, e != \"none\" && w.injectStylesheet(b + \"/styles/embed\" + (e ? \".\" + e + \".css?\" + y[e] : \".\" + short_name) + \".css\") } if (e.DUOSHUO) return; var r = e.location, i = e.JSON, s = e.XMLHttpRequest, o = i && i.stringify && e.localStorage, u = e.webkitNotifications, a = t.getElementsByTagName(\"head\")[0] || t.getElementsByTagName(\"body\")[0], f = e.navigator.userAgent, l = t.location.protocol == \"https:\" ? \"https:\": \"http:\", c = 0, h, p = function() { var e = { \"\": \"&gt;\", '\"': \"&quot;\", \"'\": \"&#x27;\", \"`\": \"&#x60;\" }, t = /&(?!\\w+;)|[\"'`]/g, n = /[&\"'`]/, r = function(t) { return e[t] || \"&amp;\" }; return function(e) { return e == null || e === !1 ? \"\": n.test(e) ? e.replace(t, r) : e } } (), d = function(e) { if (e.match(/^(http|https):/)) return e; var n = t.createElement(\"a\"); return n.href = e, x.hrefNormalized ? n.href: n.getAttribute(\"href\", 4) }, v = { start: 0, end: 0 }, m = function(e) { var n = this, r = 0, i = 0, s, o, u, a, f; t.selection && (o = t.selection.createRange(), o && o.parentElement() == n && (a = n.value.length, s = n.value.replace(/\\r\\n/g, \"\\n\"), u = n.createTextRange(), u.moveToBookmark(o.getBookmark()), f = n.createTextRange(), f.collapse(!1), u.compareEndPoints(\"StartToEnd\", f) > -1 ? r = i = a: (r = -u.moveStart(\"character\", -a), r += s.slice(0, r).split(\"\\n\").length - 1, u.compareEndPoints(\"EndToEnd\", f) > -1 ? i = a: (i = -u.moveEnd(\"character\", -a), i += s.slice(0, i).split(\"\\n\").length - 1)))), v.start = r, v.end = i }, g = function(e) { return function() { return e } }, y = { \"default\": \"d6149e1c\", dark: \"c11b5925\", bluebox: \"dbc0a9af\" }, b = l + \"//static.duoshuo.com\", w = e.DUOSHUO = { DOMAIN: \"duoshuo.com\", REMOTE: \"http://duoshuo.com\", version: 140327, loaded: { jQuery: typeof jQuery != \"undefined\" && jQuery.fn.jquery >= \"1.5\", smilies: !1, mzadxN: typeof mzadxN != \"undefined\" }, libs: { jQuery: b + \"/libs/embed.compat.js?24f8ca3f.js\", smilies: b + \"/libs/smilies.js?921e8eda.js\", mzadxN: \"http://js.miaozhen.com/mz_ad_serving.js\" }, sourceName: { weibo: \"\\u65b0\\u6d6a\\u5fae\\u535a\", qq: \"QQ\", qzone: \"QQ\\u7a7a\\u95f4\", qqt: \"\\u817e\\u8baf\\u5fae\\u535a\", renren: \"\\u4eba\\u4eba\\u7f51\", douban: \"\\u8c46\\u74e3\\u7f51\", netease: \"\\u7f51\\u6613\\u5fae\\u535a\", kaixin: \"\\u5f00\\u5fc3\\u7f51\", sohu: \"\\u641c\\u72d0\\u5fae\\u535a\", baidu: \"\\u767e\\u5ea6\", taobao: \"\\u6dd8\\u5b9d\", msn: \"MSN\", google: \"\\u8c37\\u6b4c\" }, serviceNames: { weibo: \"\\u5fae\\u535a\", qq: \"QQ\", douban: \"\\u8c46\\u74e3\", renren: \"\\u4eba\\u4eba\", netease: \"\\u7f51\\u6613\", kaixin: \"\\u5f00\\u5fc3\", sohu: \"\\u641c\\u72d0\", baidu: \"\\u767e\\u5ea6\", taobao: \"\\u6dd8\\u5b9d\", msn: \"MSN\", google: \"\\u8c37\\u6b4c\" }, parseDate: function(e) { return e.parse(\"2011-10-28T00:00:00+08:00\") && function(t) { return new e(t) } || e.parse(\"2011/10/28T00:00:00+0800\") && function(t) { return new e(t.replace(/-/g, \"/\").replace(/:(\\d\\d)$/, \"$1\")) } || e.parse(\"2011/10/28 00:00:00+0800\") && function(t) { return new e(t.replace(/-/g, \"/\").replace(/:(\\d\\d)$/, \"$1\").replace(\"T\", \" \")) } || function(t) { return new e(t) } } (Date), fullTime: function(e) { var t = w.parseDate(e); return t.getFullYear() + \"\\u5e74\" + (t.getMonth() + 1) + \"\\u6708\" + t.getDate() + \"\\u65e5 \" + t.toLocaleTimeString() }, elapsedTime: function(e) { var t = w.parseDate(e), n = new Date, r = (n - c - t) / 1e3; return r < 10 ? \"\\u521a\\u521a\": r < 60 ? Math.round(r) + \"\\u79d2\\u524d\": r < 3600 ? Math.round(r / 60) + \"\\u5206\\u949f\\u524d\": r < 86400 ? Math.round(r / 3600) + \"\\u5c0f\\u65f6\\u524d\": (n.getFullYear() == t.getFullYear() ? \"\": t.getFullYear() + \"\\u5e74\") + (t.getMonth() + 1) + \"\\u6708\" + t.getDate() + \"\\u65e5\" }, require: function(e, t) { if (typeof e == \"string\") w.loaded[e] ? t() : F(w.libs[e], function() { w.loaded[e] = !0, t() }); else if (typeof e == \"object\") { var n, r = !0; for (n = 0; n < e.length; n++)(function(i) { if (w.loaded[e[n]]) return; r = !1, F(w.libs[i], function() { w.loaded[i] = !0; for (var n = 0; n < e.length; n++) if (!w.loaded[e[n]]) return; t() }) })(e[n]); r && t() } }, getCookie: function(e) { var r = \" \" + e + \"=\", i = t.cookie.split(\";\"), s = 0, o, u, a; for (; s < i.length; s++) { o = \" \" + i[s], u = o.indexOf(r); if (u >= 0 && u + r.length == (a = o.indexOf(\"=\") + 1)) return decodeURIComponent(o.substring(a, o.length).replace(/\\+/g, \"\")) } return n }, param: function(e) { var t = []; for (var r in e) e[r] != n && t.push(r + \"=\" + encodeURIComponent(e[r])); return t.join(\"&\") }, ajax: function(e, t, r, o, u) { var a = w.getCookie(\"duoshuo_token\"); r.v = w.version, a ? r.jwt = a: z.remote_auth && (r.remote_auth = z.remote_auth); if (s && i && i.parse) { var f = new s; if ( !! f && \"withCredentials\" in f) { var l; function c(e, t, n, r) { var s, a, f, l = t; if (e >= 200 && e < 300 || e === 304) if (e === 304) l = \"notmodified\", s = !0; else try { a = i.parse(n), l = \"success\", s = !0 } catch(c) { l = \"parsererror\", f = c } else { f = l; if (!l || e) l = \"error\", e < 0 && (e = 0); try { a = i.parse(n) } catch(c) { l = \"parsererror\", f = c } } s ? o(a) : l === \"parseerror\" ? I(\"\\u89e3\\u6790\\u9519\\u8bef: \" + n) : (u && u(a), I(\"\\u51fa\\u9519\\u5566(\" + a.code + \"): \" + a.errorMessage), a.errorTrace && I(a.errorTrace)) } f.open(e, w.hostUrl + t + \".json\" + (e == \"GET\" ? \"?\" + w.param(r) : \"\"), !0), f.withCredentials = !0, f.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded; charset=UTF-8\"), f.send(e == \"GET\" ? null: w.param(r)), l = function(e, t) { var r, i, s, o; try { if (l && (t || f.readyState === 4)) { l = n; if (t) f.readyState !== 4 && f.abort(); else { r = f.status, s = f.getAllResponseHeaders(); try { o = f.responseText } catch(e) {} try { i = f.statusText } catch(u) { i = \"\" } } } } catch(a) { t || c( - 1, a) } o && c(r, i, o, s) }, f.readyState === 4 ? l() : f.onreadystatechange = l; return } } e != \"GET\" && (r._method = \"POST\"); var h = \"cb_\" + Math.round(Math.random() * 1e6); w[h] = function(e) { switch (e.code) { case 0: o(e); break; default: u && u(e), I(\"\\u51fa\\u9519\\u5566(\" + e.code + \"): \" + e.errorMessage), e.errorTrace && I(e.errorTrace) } }, r.callback = \"DUOSHUO['\" + h + \"']\", F(w.hostUrl + t + \".jsonp?\" + w.param(r)) }, injectStylesheet: function(e) { var n = t.createElement(\"link\"); n.type = \"text/css\", n.rel = \"stylesheet\", n.href = e, a.appendChild(n) }, setCustomStyle: function(e) { h || (h = t.createElement(\"style\"), h.type = \"text/css\", a.appendChild(h)), e = e.replace(/\\}/g, \"}\\n\"); if (h.styleSheet) h.styleSheet.cssText = e; else { while (h.firstChild) h.removeChild(h.firstChild); h.appendChild(t.createTextNode(e)) } }, compileStyle: function(e) { var t = \"\", n = { textbox: \"#ds-thread #ds-reset .ds-replybox .ds-textarea-wrapper\" }; if (e) for (var r in e) t += n[r] + \"{\" + e[r] + \"}\\n\"; return t }, init: function(e, t) { e && !N[e] && (N[e] = t || { type: \"EmbedThread\" }), w.initView && w.initView() } }, E = t.all, S, x = w.support = function() { var n = t.createElement(\"div\"); n.innerHTML = 'a'; var i = n.getElementsByTagName(\"a\")[0], o = n.getElementsByTagName(\"input\")[0], u = { placeholder: \"placeholder\" in o, touch: \"ontouchstart\" in e || \"onmsgesturechange\" in e, hrefNormalized: i.getAttribute(\"href\") === \"/a\", iOS: f.match(/ \\((iPad|iPhone|iPod);( U;)? CPU( iPhone)? OS /), android: f.match(/ \\(Linux; U; Android /) }; return S = !s && typeof n.style.maxHeight == \"undefined\", u.authInWin = e.postMessage && e.screen.width > 800 && !u.iOS && !u.android && r.origin, u } (), T = function(e, n) { var r = (t.body || t.documentElement).style; if (typeof r == \"undefined\") return ! 1; if (typeof r[e] == \"string\") return n ? e: !0; var i = [\"Moz\", \"Webkit\", \"ms\"], e = e.charAt(0).toUpperCase() + e.substr(1), s = 0; for (; s < i.length; s++) if (typeof r[i[s] + e] == \"string\") return n ? i[s] + e: !0 }, N = w.selectors = { \".ds-thread\": { type: \"EmbedThread\" }, \".ds-recent-comments\": { type: \"RecentComments\" }, \".ds-recent-visitors\": { type: \"RecentVisitors\" }, \".ds-top-users\": { type: \"TopUsers\" }, \".ds-top-threads\": { type: \"TopThreads\" }, \".ds-login\": { type: \"LoginWidget\" }, \".ds-thread-count\": { type: \"ThreadCount\" } }, C = w.pagelets = [], k = { post: \"\\u53d1\\u5e03\", posting: \"\\u6b63\\u5728\\u53d1\\u5e03\", settings: \"\\u8bbe\\u7f6e\", reply: \"\\u56de\\u590d\", like: \"\\u9876\", repost: \"\\u8f6c\\u53d1\", report: \"\\u4e3e\\u62a5\", \"delete\": \"\\u5220\\u9664\", reply_to: \"\\u56de\\u590d \", reposts: \"\\u8f6c\\u53d1\", comments: \"\\u8bc4\\u8bba\", floor: \"\\u697c\", latest: \"\\u6700\\u65b0\", earliest: \"\\u6700\\u65e9\", hottest: \"\\u6700\\u70ed\", share_to: \"\\u5206\\u4eab\\u5230:\", leave_a_message: \"\\u8bf4\\u70b9\\u4ec0\\u4e48\\u5427\\u2026\", no_comments_yet: \"\\u8fd8\\u6ca1\\u6709\\u8bc4\\u8bba\\uff0c\\u6c99\\u53d1\\u7b49\\u4f60\\u6765\\u62a2\", repost_reason: \"\\u8bf7\\u8f93\\u5165\\u8f6c\\u53d1\\u7406\\u7531\", hot_posts_title: \"\\u88ab\\u9876\\u8d77\\u6765\\u7684\\u8bc4\\u8bba\", comments_zero: \"\\u6682\\u65e0\\u8bc4\\u8bba\", comments_one: \"1\\u6761\\u8bc4\\u8bba\", comments_multiple: \"{num}\\u6761\\u8bc4\\u8bba\", reposts_zero: \"\\u6682\\u65e0\\u8f6c\\u53d1\", reposts_one: \"1\\u6761\\u8f6c\\u53d1\", reposts_multiple: \"{num}\\u6761\\u8f6c\\u53d1\", weibo_reposts_zero: \"\\u6682\\u65e0\\u65b0\\u6d6a\\u5fae\\u535a\", weibo_reposts_one: \"1\\u6761\\u65b0\\u6d6a\\u5fae\\u535a\", weibo_reposts_multiple: \"{num}\\u6761\\u65b0\\u6d6a\\u5fae\\u535a\", qqt_reposts_zero: \"\\u6682\\u65e0\\u817e\\u8baf\\u5fae\\u535a\", qqt_reposts_one: \"1\\u6761\\u817e\\u8baf\\u5fae\\u535a\", qqt_reposts_multiple: \"{num}\\u6761\\u817e\\u8baf\\u5fae\\u535a\" }, L = function(e, t, n, r) { w.ajax(\"GET\", e, t, n || function() {}, r) }, A = function(e, t, n, r) { w.ajax(\"POST\", e, t, n || function() {}, r) }, O = [], M, _ = [], D = function(t) { if (! (\"WebSocket\" in e && i)) return ! 1; _.push(i.stringify(t)), M || (M = w.webSocket = new WebSocket(\"ws://ws.duoshuo.com:8201/\"), M.onopen = function() { var e; if (M.readyState === 1) while (e = _.shift()) M.send(e) }, M.onmessage = function(e) { try { var t = 0, n, r = i.parse(e.data) } catch(s) { return } switch (r.type) { case \"post\": for (; t < w.pagelets.length; t++) n = w.pagelets[t], n.threadId == r.thread_id && n.onMessage(r); break; case \"notification\": O.push(r), lt(); break; default: } }, e.addEventListener(\"beforeunload\", function() { M.close() })), M.onopen() }, P = w.Collections = {}, H = w.Views = {}, B = w.Callbacks = {}, j = w.openDialog = function(e) { return w.dialog !== n && w.dialog.el.remove(), w.dialog = (new H.Dialog('' + e + '\\u793e\\u4f1a\\u5316\\u8bc4\\u8bba\\u6846')).open() }, F = w.injectScript = function(r, i) { var s = t.createElement(\"script\"), o = t.head || t.getElementsByTagName(\"head\")[0] || t.documentElement; s.type = \"text/javascript\", s.src = r, s.async = \"async\", s.charset = \"utf-8\", i && (s.onload = s.onreadystatechange = function(t, r) { if (r || !s.readyState || /loaded|complete/.test(s.readyState)) s.onload = s.onreadystatechange = null, o && s.parentNode && o.removeChild(s), s = n, r || i.call(e) }), o.insertBefore(s, o.firstChild) }, I = w.log = function(e) { typeof console == \"object\" && console.log(e) }, q = w.smilies = {}, R = [\"EmbedThread\", \"RecentComments\", \"RecentVisitors\", \"TopUsers\", \"TopThreads\", \"LoginWidget\", \"ThreadCount\"], U = 0, z, W = function() { var e = {}, t = 0; for (; t < arguments.length; t++) arguments[t] && ft(e, arguments[t]); var n = w.param(e); return n ? \"?\" + n: \"\" }, X = function() { var e = w.getCookie(\"duoshuo_token\"); return e ? { jwt: e }: z.remote_auth ? { short_name: z.short_name, remote_auth: z.remote_auth }: n }, V = function() { return ! z && (z = e.duoshuoQuery) && tt.trigger(\"queryDefined\"), z }; for (var $ in Object.prototype) return alert(\"Object.prototype\\u4e0d\\u4e3a\\u7a7a\\uff0c\\u8bf7\\u4e0d\\u8981\\u7ed9Object.prototype\\u8bbe\\u7f6e\\u65b9\\u6cd5\"); var J = w.templates = { userUrl: function(e) { return e.url }, avatarUrl: function(e, t) { return e.avatar_url || nt.data.default_avatar_url }, userAnchor: function(e) { var t = J.userUrl(e); return t ? '' + p(e.name) + \"\": p(e.name) }, avatarImg: function(e, t) { return ' ' + k.share_to + \"\" + s: \"\") + \"\" + \"\" + '' + p(k.post) + \"\" + '' + (n.use_smilies ? '': \"\") + (n.use_images && n.parse_html_enabled ? '': \"\") + \"\" + \"\" + \"\" + \"\" }, H.Replybox = function(e) { this.embedThread = e }, H.Replybox.prototype = { render: function(e) { function T(e) { e.data(\"submitting\", !0), e.find(\".ds-post-button\").addClass(\"ds-waiting\").html(k.posting)[0].disabled = !0 } function N(e) { e.data(\"submitting\", !1), e.find(\".ds-post-button\").removeClass(\"ds-waiting\").html(k.post)[0].disabled = !1 } var n = this, r = n.embedThread, s = r.options, u = function(e) { w.require(\"smilies\", function() {}) }, a = n.el = i(J.replybox(r, e)).click(u), f = a.find(\"form\"), l = f.find(\"input[type=checkbox]\")[0], c = f.find(\"a.ds-service-icon, a.ds-service-icon-grey\"), h = B(f.find(\"textarea\")).focus(u).keyup(g).keyup(y).bind(\"focus mousedown mouseup keyup\", m), d = a.find(\".ds-add-emote\").click(function(e) { var r = w.smiliesTooltip; return d.toggleClass(\"ds-expanded\").hasClass(\"ds-expanded\") ? (r || (r = w.smiliesTooltip = new H.SmiliesTooltip, r.render(), w.require(\"smilies\", function() { r.reset(\"\\u5fae\\u535a-\\u9ed8\\u8ba4\") })), r.replybox = n, r.el.appendTo(t.body).css({ top: n.el.offset().top + n.el.outerHeight() + 4 + \"px\", left: n.el.find(\".ds-textarea-wrapper\").offset().left + \"px\" }), i(t.body).click(E)) : E(e), !1 }), b = a.find(\".ds-add-image\").click(function(e) { var n = h[0], r = n.value, i = \"\\u8bf7\\u8f93\\u5165\\u56fe\\u7247\\u5730\\u5740\", s = ''; if (t.selection) { n.value = r.substring(0, v.start) + s + r.substring(v.end, r.length), n.value = n.value.replace(\"\\u8bf4\\u70b9\\u4ec0\\u4e48\\u5427 ...\", \"\"), n.focus(); var o = t.selection.createRange(); o.collapse(), o.findText(i), o.select() } else { n.value = r.substring(0, n.selectionStart) + s + r.substring(n.selectionEnd); var u = n.value.search(i); n.setSelectionRange(u, u + i.length), n.focus() } e.preventDefault() }), E = n.hideSmilies = function(e) { d.removeClass(\"ds-expanded\"), w.smiliesTooltip.el.detach(), i(t.body).unbind(\"click\", E) }, S = function(e, t) { var n = j('\\u793e\\u4ea4\\u5e10\\u53f7\\u767b\\u5f55' + i.map([\"weibo\", \"qq\", \"renren\", \"kaixin\", \"douban\", \"netease\", \"sohu\"], function(e) { return '' + w.sourceName[e] + \"\" }).join(\"\") + \"\" + (s.deny_anonymous ? \"\": '\\u4f5c\\u4e3a\\u6e38\\u5ba2\\u7559\\u8a00' + '\\u540d\\u5b57(\\u5fc5\\u586b)' + \"\" + (s.require_guest_email ? '' + '\\u90ae\\u7bb1(\\u5fc5\\u586b)' + \"\": \"\") + (s.require_guest_url ? '' + '\\u7f51\\u5740(\\u53ef\\u9009)' + \"\": \"\") + '\\u53d1\\u5e03' + \"\")), r = n.el.find(\".ds-dialog\").css(\"width\", \"320px\"); M(r, \".ds-icons-32 a\"); if (!s.deny_anonymous) { var o = n.el.find(\"form\"); o.submit(function(e) { var r = o.find(\"input[name=author_email]\").val(); return (r || s.require_guest_email) && !r.match(/^(([^()[\\]\\\\.,;:\\s@\\\"]+(\\.[^()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/) ? (alert(\"\\u8bf7\\u8f93\\u5165\\u4e00\\u4e2a\\u6709\\u6548\\u7684email\\u5730\\u5740.\"), !1) : (t(w.toJSON(o)), n.close(), !1) }), o.find(\"input[name=author_name]\")[0].focus() } }; s.deny_anonymous && h.focus(function(e) { if (ct()) { S(f, C); var t = function(e) { e.stopPropagation(), h.unbind(\"click\", t) }; h.click(t) } return ! 1 }); var C = function(e) { T(f), A(\"/api/posts/create\", i.extend(w.toJSON(f), e), function(e) { var t = e.response, i = dt(n.postList, t, s); s.order == \"asc\" == (s.formPosition == \"top\") && w.scrollTo(i), ot[t.post_id] = new et(t), r.data.comments++, r.updateCounter(\"duoshuo\"), h.val(\"\").trigger(\"keyup\"), N(f), a.hasClass(\"ds-inline-replybox\") && (a.detach(), n.actionsBar.removeClass(\"ds-reply-active\")); if (o) try { o.removeItem(\"ds_draft_\" + r.threadId) } catch(u) {} }, function(e) { N(f), alert(e.errorMessage) }) }; f.submit(function(e) { if (f.data(\"submitting\")) return ! 1; var t = i.trim(f[0].message.value); return t == \"\" || !x.placeholder && t == h.attr(\"placeholder\") ? (alert(\"\\u60a8\\u8fd8\\u6ca1\\u5199\\u5185\\u5bb9\\u5462\"), !1) : (ct() ? S(f, C) : C(), !1) }); var L = function(e) { return i(e).hasClass(\"ds-service-icon-grey\") ? null: i(e).attr(\"data-service\") }; return c.click(function() { return i(this).toggleClass(\"ds-service-icon-grey\").toggleClass(\"ds-service-icon\"), l.value = i.map(c, L).join(\",\"), l.checked = l.value != \"\", !1 }), i(l).change(function() { var e = this.checked; c[e ? \"removeClass\": \"addClass\"](\"ds-service-icon-grey\")[e ? \"addClass\": \"removeClass\"](\"ds-service-icon\"), this.value = i.map(c, L).join(\",\") }), this } }, H.Dialog = Z.extend({ init: function(e, t) { (this.el = i(\"#ds-wrapper\"))[0] || (this.el = _(i(''))), this.options = i.extend({ width: 600 }, t), e !== n && i(e).attr(\"id\", \"ds-reset\").appendTo(this.el) }, open: function() { var e = this; e.el.hide().appendTo(t.body).fadeIn(200), S && e.el.css(\"top\", s.scrollTop() + 100), e.el.show().find(\".ds-dialog\").delegate(\"a.ds-dialog-close\", \"click\", function(t) { return e.close(), !1 }).click(h); var n = function(t) { if (t.which == 27) return e.close(), !1 }, r = function(t) { return e.close(), !1 }; return a.keydown(n), i(t.body).click(r), e.close = function(s) { a.unbind(\"keydown\", n), i(t.body).unbind(\"click\", r), e.el.fadeOut(200, function() { i(this).remove() }), e.trigger(\"close\") }, e } }), J.likePanel = function(e) { return e.likes ? '' + e.likes + \" \\u4eba\\u559c\\u6b22\": \"\" }, J.likeTooltip = function(e) { var t = { qzone: \"QQ\\u7a7a\\u95f4\", weibo: \"\\u65b0\\u6d6a\\u5fae\\u535a\", qqt: \"\\u817e\\u8baf\\u5fae\\u535a\", renren: \"\\u4eba\\u4eba\\u7f51\", kaixin: \"\\u5f00\\u5fc3\\u7f51\", douban: \"\\u8c46\\u74e3\\u7f51\", baidu: \"\\u767e\\u5ea6\\u641c\\u85cf\", netease: \"\\u7f51\\u6613\\u5fae\\u535a\", sohu: \"\\u641c\\u72d0\\u5fae\\u535a\" }, n = []; for (var r in t) n.push(''), i(e.pages) } this.el.html('' + r.join(\" \"))[e.pages > 1 ? \"show\": \"hide\"]() } }, J.smiliesTooltip = function(e) { var t = ''; for (var n in e) t += \"\" + n + \"\"; return t + '' }, w.addSmilies = function(e, t) { var n = w.smiliesTooltip; n && n.el.find(\"ul.ds-smilies-tabs\").append(\"\" + e + \"\"), w.smilies[e] = t }, H.SmiliesTooltip = function() {}, H.SmiliesTooltip.prototype = { render: function() { var e = this, n = e.el = i(J.smiliesTooltip(q)); return n.click(h).find(\"ul.ds-smilies-tabs\").delegate(\"a\", \"click\", function(t) { e.reset(this.innerHTML) }), n.find(\".ds-smilies-container\").delegate(\"img\", \"click\", function(n) { var r = e.replybox, i = r.el.find(\"textarea\")[0], s = i.value; if (t.selection) { i.value = s.substring(0, v.start) + this.title + s.substring(v.end, s.length), i.value = i.value.replace(k.leave_a_message, \"\"), i.focus(); var o = t.selection.createRange(); o.moveStart(\"character\", v.start + this.title.length), o.collapse(), o.select() } else { var u = i.selectionStart + this.title.length; i.value = s.substring(0, i.selectionStart) + this.title + s.substring(i.selectionEnd), i.setSelectionRange(u, u) } r.hideSmilies(), i.focus() }), this }, reset: function(e) { var t = this.el.find(\"ul.ds-smilies-tabs\"); t.find(\"a.ds-current\").removeClass(\"ds-current\"), t.find(\"a\").filter(function() { return this.innerHTML == e }).addClass(\"ds-current\"); var n = \"\"; return i.each(q[e], function(t, r) { var i = e.indexOf(\"\\u5fae\\u535a\") === 0 ? \"http://img.t.sinajs.cn/t35/style/images/common/face/ext/normal/\" + r.replace(\"_org\", \"_thumb\") : b + \"/images/smilies/\" + r; e === \"WordPress\" && (t = \" \" + t + \" \"), n += '' }), n += \"\", this.el.find(\".ds-smilies-container\").html(n), this } }, J.postPlaceholder = function() { return '' + k.no_comments_yet + \"\" }, J.post = function(e, t) { var n = K(e), r = n.user_id ? ' data-user-id=\"' + n.user_id + '\"': \"\", s = n.qqt_account || \"\", o = J.timeHtml(e.created_at, e.url), u = e.parents || []; switch (e.source) { case \"duoshuo\": o += '' + k.reply + \"\" + J.likePost(e) + '' + k.repost + \"\" + '' + k.report + \"\" + (e.privileges[\"delete\"] ? '' + k[\"delete\"] + \"\": \"\"); break; case \"qqt\": case \"weibo\": o += '' + k.comments + (e.type.match(/\\-comment$/) ? \"\": '(' + e.comments + \")\") + \"\" + '' + k.reposts + (e.type.match(/\\-comment$/) ? \"\": '(' + e.reposts + \")\") + \"\"; break; default: } return ' 2 ? '\\u8fd8\\u6709' + (u.length - 2) + \"\\u6761\\u8bc4\\u8bba\": \"\") + (ot[e] ? J.ctxPost(ot[e].data, t, t && t < u.length - 1) : \"\") }).join(\"\") + \"\": \"\") + \"\" + (u.length >= t.max_depth && (!t.show_context || t.max_depth > 1) && e.parent_id && ot[e.parent_id] ? '' + k.reply_to + p(K(ot[e.parent_id].data).name) + \": \": \"\") + e.message + '' + o + \"\" + (t.max_depth > 1 && (e.childrenArray || e.children) && e.source != \"weibo\" && e.source != \"qqt\" ? '' + i.map(e.childrenArray || e.children, function(e) { return ot[e] ? J.post(ot[e].data, t) : \"\" }).join(\"\") + \"\": \"\") + \"\" }; var $ = i(''), G = $.find(\".ds-bubble-content\").delegate(\"a.ds-ctx-open\", \"click\", function(e) { L(\"/api/posts/conversation\", { post_id: G.attr(\"data-post-id\") }, function(e) { t.el.find(\"ol\").html(i.map(e.response, J.ctxPost).join(\"\\n\")) }); var t = j('\\u67e5\\u770b\\u5bf9\\u8bdd'); return t.el.find(\".ds-dialog\").css(\"width\", \"600px\"), t.el.find(\".ds-dialog-body\").css({ \"max-height\": \"350px\", _height: \"350px\", \"overflow-y\": \"auto\", \"padding-top\": \"10px\" }), !1 }), Y = bubbleOutTimer = 0, tt = function() { bubbleOutTimer && (clearTimeout(bubbleOutTimer), bubbleOutTimer = 0) }; bubbleOut = function() { bubbleOutTimer = setTimeout(function() { bubbleOutTimer = 0, $.detach() }, 400) }, $.mouseenter(tt).mouseleave(bubbleOut), J.userInfo = function(e) { var t = []; return i.each(e.social_uid, function(e, n) { t.push('' + e.comments + \"\\u6761\\u8bc4\\u8bba\" + (e.description ? '' + p(e.description) + \"\": \"\") }, P.PostList = function(e) { e && (e.params && (this.params = e.params), e.embedThread && (this.embedThread = e.embedThread)), this.el = i('') }, P.PostList.prototype = { url: \"/api/threads/listPosts\", render: function() { return vt.call(this.el, this.embedThread, this.embedThread.options), this }, reset: function(e) { var t = this.embedThread.options; this.el.html(e[0] ? i.map(e, function(e) { return ot[e] ? J.post(ot[e].data, t) : \"\" }).join(\"\") : J.postPlaceholder()) }, refetch: function() { var e = this, n = i(J.indicator()).appendTo(t.body).fadeIn(200); e.el.fadeTo(200, .5), L(e.url, e.params, function(t) { at(ot, t.parentPosts || t.relatedPosts), at(ut, t.users), e.reset(t.response), e.embedThread.paginator.reset(t.cursor), e.el.fadeTo(200, 1), w.scrollTo(e.el), n.remove() }) } }, w.repostDialog = function(e, t, n, r) { var i = j('\\u8f6c\\u53d1\\u5230\\u5fae\\u535a@' + p(K(e.data).name) + \": \" + e.data.message + \"\" + \"\" + Q({ post_id: e.data.post_id }) + '' + '' + p(t) + \"\" + '' + \"\" + '' + (r ? Q({ \"service[]\": r }) : '\\u65b0\\u6d6a\\u5fae\\u535a ' + '\\u817e\\u8baf\\u5fae\\u535a') + '' + k.repost + \"\" + \"\" + \"\"), s = i.el.find(\"form\").submit(function(e) { return ! r && !s.find(\"[type=checkbox]:checked\")[0] ? (alert(\"\\u8fd8\\u6ca1\\u6709\\u9009\\u53d1\\u5e03\\u5230\\u54ea\\u513f\\u5462\"), !1) : (A(\"/api/posts/repost\", w.toJSON(s), function(e) { if (n && r) { var t = n.options, i = dt(n.postList.el, e.response[r], t); t.order == \"asc\" == (t.formPosition == \"top\") && w.scrollTo(i); var s = n.el.find(\".ds-comments-tab-\" + r + \" span.ds-highlight\"); s.html(parseInt(s.html()) + 1) } }), i.close(), !1) }); return s.find(\".ds-actions [type=checkbox]\").change(function(e) { var t = this.value; if (this.checked && !rt.data.social_uid[t == \"qqt\" ? \"qq\": t]) { mt(t); return } }), B(s.find(\"textarea\")).keyup(g).keyup(y).focus(), !1 }, J.toolbar = function(e) { var t = J.logoutUrl(); return ' \\u5e10\\u53f7\\u7ba1\\u7406\\u7ed1\\u5b9a\\u66f4\\u591a' + p(k.settings) + \"\" + '\\u767b\\u51fa' + \"\" + \"\" + '' + (rt.data.url ? '' + p(rt.data.name) + \"\": '' + p(rt.data.name) + \"\") + '' + \"\" + \"\" }, H.EmbedThread = R.extend({ uri: \"/api/threads/listPosts\", params: \"thread-id local-thread-id source-thread-id thread-key category channel-key author-key author-id url limit order max-depth form-position container-url\" + (f.match(/MSIE 6\\.0/) ? \"\": \" title image thumbnail\"), render: function() { var e = this.el.attr(\"id\", \"ds-thread\").append(J.waitingImg()), t = e.width(), n = e.data(\"url\") || !e.attr(\"data-thread-id\") && i(\"link[rel=canonical]\").attr(\"href\"); n ? e.data(\"url\", d(n)) : e.data(\"container-url\", r.href), t && t 1 ? \"multiple\": \"one\": \"zero\")].replace(\"{num}\", r)) } }); var yt = 0; w.initSelector = function(e, t) { var n = []; V() && (i.isReady || !E) && i(e).each(function(e, r) { var s = i(r); if (s.data(\"initialized\")) return; s.data(\"initialized\", !0); var o = new H[t.type](s, t); C.push(o); if (t.type === \"ThreadCount\") { var u = s.attr(\"data-thread-key\"); s.attr(\"data-channel-key\") && (u = s.attr(\"data-channel-key\") + \":\" + u), n.push(u), st[u] || (st[u] = new et({})), st[u].on(\"reset\", function() { o.onload(this) }) } else if (o.uri) { var a = {}; i.each(o.params.split(\" \"), function(e, t) { a[t.replace(/-/g, \"_\")] = s.attr(\"data-\" + t) || s.data(t) }), L(o.uri, bt(a), function(e) { o.load(e) }) } }), n.length && L(\"/api/threads/counts\", bt({ threads: n.join(\",\") }), function(e) { l(e), ft(k, e.options), at(st, e.response) }) }, (w.initView = function() { i.each(N, w.initSelector) })(), i(function() { if (!V()) return I(\"\\u7f3a\\u5c11duoshuoQuery\\u7684\\u5b9a\\u4e49\"); setInterval(function() { i(\".ds-time\").each(function() { var e = i(this).attr(\"datetime\"); e && (this.innerHTML = w.elapsedTime(e)) }) }, 2e4), z.ondomready && z.ondomready(), w.initView(), !yt && z.short_name && L(\"/api/analytics/ping\", bt({}), l) }) }) })(window, document);"}],"posts":[{"title":"Angular2-架构-Wrapup","slug":"2016-07-09-angular2-architecture-wrap-up","date":"2016-07-09T11:00:00.000Z","updated":"2016-07-09T13:46:10.563Z","comments":true,"path":"2016/07/09/2016-07-09-angular2-architecture-wrap-up/","link":"","permalink":"http://xiahl.top/yelee/2016/07/09/2016-07-09-angular2-architecture-wrap-up/","excerpt":"em { font-style: normal!important; font-weight: bold; } .l-sub-section { margin: 100px 0 32px 0; padding: 16px 24px; background: #f5f6f7; border-left: 4px solid #8BC34A; border-radius: 4px; } .example-title { color: #fff; padding: 0 16px; font-size: 14px; border-color: #1976D2; background: #1976D2; box-shadow: none; line-height: 32px; margin-bottom: -5px; z-index: 1; position: relative; border-bottom-right-radius: 0; border-bottom-left-radius: 0; border-width: 2px; border-style: solid; border-radius: 4px; } .highlight { margin: 0!important; padding: 0; color: inherit; background: inherit; } 总结 我们学到的这些只是关于Angular应用程序的八个主要构造块的一点皮毛","text":"em { font-style: normal!important; font-weight: bold; } .l-sub-section { margin: 100px 0 32px 0; padding: 16px 24px; background: #f5f6f7; border-left: 4px solid #8BC34A; border-radius: 4px; } .example-title { color: #fff; padding: 0 16px; font-size: 14px; border-color: #1976D2; background: #1976D2; box-shadow: none; line-height: 32px; margin-bottom: -5px; z-index: 1; position: relative; border-bottom-right-radius: 0; border-bottom-left-radius: 0; border-width: 2px; border-style: solid; border-radius: 4px; } .highlight { margin: 0!important; padding: 0; color: inherit; background: inherit; } 总结 我们学到的这些只是关于Angular应用程序的八个主要构造块的一点皮毛 模块 组件 模板 元数据 数据绑定 指令 服务 依赖注入 这是Angular应用程序中所有其它东西的基础，要使用Angular 2，以这些作为开端就绰绰有余了。 但它仍然没有包含我们需要的或想知道的全部。 其它东西 这里是一个简短的、按字母排序的列表，列出了其它重要的Angular特性和服务。 它们大多数已经(或即将)包括在这个《开发指南》中： 动画Animations - 即将到来的动画库。它能让开发人员更轻易的给组件添加动画行为，而不需要对动画技术或css有深入的了解。 引导Bootstrap - 配置和引导应用的根组件的方法。 变更检测Change Detection - 学会Angular是如何决定组件的属性值变化和什么时候该更新到屏幕的。 学会它如何使用zones来拦截异步行为和它如何执行变更检测策略。 组件路由Component Router - 通过组件路由服务，可以让用户使用浏览器中熟悉的URL形式，在多屏应用之间导航。 事件Events - DOM能触发事件，组件和服务也能。Angular提供的事件发布与订阅机制还包括RxJS可观察Observable方案的一个实施。 表单Forms - 通过基于HTML的验证和脏检查机制支持复杂的数据输入场景。 HTTP - 通过这个Angular HTTP客户端，可以与服务器通讯，以获得数据、保存数据和触发服务端动作。 生命周期钩子Lifecycle Hooks - 通过实现“生命周期钩子”接口，可以切入组件生命中的几个关键点：从创建到销毁。 管道Pipes - 这种服务会转换值以供显示。可以把管道放在模板中，以增强用户体验。比如这个currency管道表达式， 1price | currency:&apos;USD&apos;:true 把&quot;42.33&quot;显示为$42.33。 Testing - Angular提供了一个测试库，在程序各个部分与Angular框架交互同时，用来“单元测试”它们。","categories":[{"name":"Angular2","slug":"Angular2","permalink":"http://xiahl.top/categories/Angular2/"}],"tags":[{"name":"Basics","slug":"Basics","permalink":"http://xiahl.top/tags/Basics/"},{"name":"Architecture","slug":"Architecture","permalink":"http://xiahl.top/tags/Architecture/"},{"name":"Wrapup","slug":"Wrapup","permalink":"http://xiahl.top/tags/Wrapup/"}]},{"title":"Angular2-架构-DependencyInjection","slug":"2016-07-09-angular2-architecture-dependency-injection","date":"2016-07-09T10:59:00.000Z","updated":"2016-07-09T13:44:46.320Z","comments":true,"path":"2016/07/09/2016-07-09-angular2-architecture-dependency-injection/","link":"","permalink":"http://xiahl.top/yelee/2016/07/09/2016-07-09-angular2-architecture-dependency-injection/","excerpt":"em { font-style: normal!important; font-weight: bold; } .l-sub-section { margin: 100px 0 32px 0; padding: 16px 24px; background: #f5f6f7; border-left: 4px solid #8BC34A; border-radius: 4px; } .example-title { color: #fff; padding: 0 16px; font-size: 14px; border-color: #1976D2; background: #1976D2; box-shadow: none; line-height: 32px; margin-bottom: -5px; z-index: 1; position: relative; border-bottom-right-radius: 0; border-bottom-left-radius: 0; border-width: 2px; border-style: solid; border-radius: 4px; } .highlight { margin: 0!important; padding: 0; color: inherit; background: inherit; } 依赖注入 “依赖注入”是提供类的新实例的一种方式，还负责处理好类所需的全部依赖。大多数依赖都是服务。 Angular也使用依赖注入提供我们需要的组件以及这些组件所需的服务。","text":"em { font-style: normal!important; font-weight: bold; } .l-sub-section { margin: 100px 0 32px 0; padding: 16px 24px; background: #f5f6f7; border-left: 4px solid #8BC34A; border-radius: 4px; } .example-title { color: #fff; padding: 0 16px; font-size: 14px; border-color: #1976D2; background: #1976D2; box-shadow: none; line-height: 32px; margin-bottom: -5px; z-index: 1; position: relative; border-bottom-right-radius: 0; border-bottom-left-radius: 0; border-width: 2px; border-style: solid; border-radius: 4px; } .highlight { margin: 0!important; padding: 0; color: inherit; background: inherit; } 依赖注入 “依赖注入”是提供类的新实例的一种方式，还负责处理好类所需的全部依赖。大多数依赖都是服务。 Angular也使用依赖注入提供我们需要的组件以及这些组件所需的服务。 在TypeScript里，Angular能通过查看构造函数的参数类型，来得知组件需要哪些服务。 例如，HeroListComponent组件的构造函数需要HeroService： app/hero-list.component (构造函数) 1constructor(private service: HeroService) &#123; &#125; 当Angular创建组件时，会首先为组件所需的服务找一个注入器Injector。 注入器是一个维护服务实例的容器，存放着以前创建的实例。如果容器中还没有所请求的服务实例，注入器就会创建一个服务实例，并且添加到容器中，然后把这个服务返回给Angular。 当所有的服务都被解析完并返回时，Angular会以这些服务为参数去调用组件的构造函数。 这就是我们所说的依赖注入 。 HeroService注入的过程看起来有点像这样： 如果注入器还没有HeroService，它怎么知道该如何创建一个呢？ 简单的说，必须在要求注入HeroService之前，注册一个HeroService的提供商Provider到注入器。 提供商可以创建并返回服务，通常返回的就是这个“服务类”本身。 可以在应用程序的组件树中的任何级别上注册提供商。 当需要一个服务的同一个实例在任何地方都是可用时，我们通常在应用引导程序中注册它。 app/main.ts (节选) 1bootstrap(AppComponent, [BackendService, HeroService, Logger]); 或者，也可以把它注册在组件层…… 1234@Component(&#123; providers: [HeroService]&#125;)export class HeroesComponent &#123; ... &#125; ... 在这种情况下，那个组件的每一个新实例都会有一个(在该组件注册的)服务的新实例。 在这个概览中，我们过度简化了依赖注入机制。 在依赖注入一章中，我们能学到关于它更详尽的知识。 需要记住的要点是： 依赖注入渗透在整个框架中，并且被到处使用。 注入器Injector是本机制的核心。 注入器负责维护一个容器，用于存放它创建过的服务实例。 注入器能使用提供商创建一个新的服务实例。 提供商是一个用于创建服务的“配方”。 把提供商注册到注入器。","categories":[{"name":"Angular2","slug":"Angular2","permalink":"http://xiahl.top/categories/Angular2/"}],"tags":[{"name":"Basics","slug":"Basics","permalink":"http://xiahl.top/tags/Basics/"},{"name":"Architecture","slug":"Architecture","permalink":"http://xiahl.top/tags/Architecture/"},{"name":"Dependency Injection","slug":"Dependency-Injection","permalink":"http://xiahl.top/tags/Dependency-Injection/"}]},{"title":"Angular2-架构-Service","slug":"2016-07-09-angular2-architecture-service","date":"2016-07-09T10:57:00.000Z","updated":"2016-07-09T13:45:40.234Z","comments":true,"path":"2016/07/09/2016-07-09-angular2-architecture-service/","link":"","permalink":"http://xiahl.top/yelee/2016/07/09/2016-07-09-angular2-architecture-service/","excerpt":"em { font-style: normal!important; font-weight: bold; } .l-sub-section { margin: 100px 0 32px 0; padding: 16px 24px; background: #f5f6f7; border-left: 4px solid #8BC34A; border-radius: 4px; } .example-title { color: #fff; padding: 0 16px; font-size: 14px; border-color: #1976D2; background: #1976D2; box-shadow: none; line-height: 32px; margin-bottom: -5px; z-index: 1; position: relative; border-bottom-right-radius: 0; border-bottom-left-radius: 0; border-width: 2px; border-style: solid; border-radius: 4px; } .highlight { margin: 0!important; padding: 0; color: inherit; background: inherit; } 服务 “服务”分为很多种，包括：值、函数，以及应用所需的特性。 几乎任何东西都可以是一个服务。 典型的服务是一个类，具有专注的、良好定义的用途。它应该做一件具体的事情，把它做好。","text":"em { font-style: normal!important; font-weight: bold; } .l-sub-section { margin: 100px 0 32px 0; padding: 16px 24px; background: #f5f6f7; border-left: 4px solid #8BC34A; border-radius: 4px; } .example-title { color: #fff; padding: 0 16px; font-size: 14px; border-color: #1976D2; background: #1976D2; box-shadow: none; line-height: 32px; margin-bottom: -5px; z-index: 1; position: relative; border-bottom-right-radius: 0; border-bottom-left-radius: 0; border-width: 2px; border-style: solid; border-radius: 4px; } .highlight { margin: 0!important; padding: 0; color: inherit; background: inherit; } 服务 “服务”分为很多种，包括：值、函数，以及应用所需的特性。 几乎任何东西都可以是一个服务。 典型的服务是一个类，具有专注的、良好定义的用途。它应该做一件具体的事情，把它做好。 例如： 日志服务 数据服务 消息总线 税款计算器 应用程序配置 服务没有什么特别属于Angular的特性。Angular本身对于服务也没有什么定义。 它甚至都没有ServiceBase类。 即便如此，服务仍然是任何Angular应用的基础。 这里是一个“服务”类的范例，用于把日志记录到浏览器的控制台： app/logger.service.ts (只有类) 12345export class Logger &#123; log(msg: any) &#123; console.log(msg); &#125; error(msg: any) &#123; console.error(msg); &#125; warn(msg: any) &#123; console.warn(msg); &#125;&#125; 下面是HeroService类，用于获取英雄数据，并通过一个已解析的承诺Promise返回它们。 HeroService还依赖于Logger服务和另一个用来处理服务器通讯工作的BackendService服务。 app/hero.service.ts (只有类) 123456789101112131415export class HeroService &#123; private heroes: Hero[] = []; constructor( private backend: BackendService, private logger: Logger) &#123; &#125; getHeroes() &#123; this.backend.getAll(Hero).then( (heroes: Hero[]) =&gt; &#123; this.logger.log(`Fetched $&#123;heroes.length&#125; heroes.`); this.heroes.push(...heroes); // fill cache &#125;); return this.heroes; &#125;&#125; 服务无处不在。 组件是服务的主要消费者。它们依赖服务来处理大多数“苦差事”。 它们自己不需要从服务器获得数据，不需要验证输入，不需要直接往控制台写日志。 它们把这些任务委托给服务。 组件的任务就是提供用户体验，仅此而已。它介于视图(由模板渲染)和应用逻辑(通常包括“模型model”的观念)之间。 设计良好的组件为数据绑定提供属性和方法，把那些其他对它们不重要的事情都委托给服务。 Angular不会强制要求我们遵循这些原则。 即使我们花3000行代码写了一个“厨房洗碗槽”组件，它也不会抱怨什么。 Angular帮助我们追随这些原则 —— 它让我们能更轻易的把应用逻辑拆分到服务，并通过依赖注入来在组件中使用这些服务。","categories":[{"name":"Angular2","slug":"Angular2","permalink":"http://xiahl.top/categories/Angular2/"}],"tags":[{"name":"Basics","slug":"Basics","permalink":"http://xiahl.top/tags/Basics/"},{"name":"Architecture","slug":"Architecture","permalink":"http://xiahl.top/tags/Architecture/"},{"name":"Service","slug":"Service","permalink":"http://xiahl.top/tags/Service/"}]},{"title":"Angular2-架构-Directive","slug":"2016-07-09-angular2-architecture-directive","date":"2016-07-09T10:55:00.000Z","updated":"2016-07-09T13:45:02.125Z","comments":true,"path":"2016/07/09/2016-07-09-angular2-architecture-directive/","link":"","permalink":"http://xiahl.top/yelee/2016/07/09/2016-07-09-angular2-architecture-directive/","excerpt":"em { font-style: normal!important; font-weight: bold; } .l-sub-section { margin: 0px 0 32px 0; padding: 16px 24px; background: #f5f6f7; border-left: 4px solid #8BC34A; border-radius: 4px; } .example-title { color: #fff; padding: 0 16px; font-size: 14px; border-color: #1976D2; background: #1976D2; box-shadow: none; line-height: 32px; margin-bottom: -5px; z-index: 1; position: relative; border-bottom-right-radius: 0; border-bottom-left-radius: 0; border-width: 2px; border-style: solid; border-radius: 4px; } .highlight { margin: 0!important; padding: 0; color: inherit; background: inherit; } 指令 Angular模板是动态的。当Angular渲染它们时，它会根据指令提供的操作指南对DOM进行修改。 指令是一个带有“指令元数据”的类。在TypeScript中，要通过@Directive装饰器把元数据附加到类上。","text":"em { font-style: normal!important; font-weight: bold; } .l-sub-section { margin: 0px 0 32px 0; padding: 16px 24px; background: #f5f6f7; border-left: 4px solid #8BC34A; border-radius: 4px; } .example-title { color: #fff; padding: 0 16px; font-size: 14px; border-color: #1976D2; background: #1976D2; box-shadow: none; line-height: 32px; margin-bottom: -5px; z-index: 1; position: relative; border-bottom-right-radius: 0; border-bottom-left-radius: 0; border-width: 2px; border-style: solid; border-radius: 4px; } .highlight { margin: 0!important; padding: 0; color: inherit; background: inherit; } 指令 Angular模板是动态的。当Angular渲染它们时，它会根据指令提供的操作指南对DOM进行修改。 指令是一个带有“指令元数据”的类。在TypeScript中，要通过@Directive装饰器把元数据附加到类上。 我们已经遇到过指令的形式之一：组件。组件是一个带模板的指令，而且@Component装饰器实际上就是一个@Directive装饰器，只是扩展了一些面向模板的属性。 虽然组件从技术角度上就是一个指令，但是组件非常独特，并在Angular中位于中心地位，以至于在架构介绍中，我们把组件从指令中单独开来。 有两种其它类型的指令，我们称之为“结构型”指令和“属性(attribute)型”指令。 它们往往像属性(attribute)一样出现在元素标签中，偶尔会以名字的形式出现(参见一次性绑定)，但多数时候还是作为赋值目标或绑定目标出现。 结构型指令通过在DOM中添加、移除和替换元素来修改布局。 我们在范例模板中会看到两个内建的结构型指令。 12&lt;div *ngFor=&quot;let hero of heroes&quot;&gt;&lt;/div&gt;&lt;hero-detail *ngIf=&quot;selectedHero&quot;&gt;&lt;/hero-detail&gt; *ngFor告诉Angular为heroes列表中的每个英雄生成一个&lt;div&gt;标签。 *ngIf表示只有在选择的英雄存在时，才会包含HeroDetail组件。 属性型指令 修改一个现有元素的外观或行为。在模板中，它们看起来就像是标准的HTML属性，故名。 ngModel指令就是属性型指令的一个例子，它实现了双向数据绑定。 它修改了现有元素(典型的&lt;input&gt;)的行为：它设置了显示属性值，并对change事件做出相应回应。 Angular内置了一些其它指令，它们或者修改结构布局(如ngSwitch)，或者修改DOM元素和组件的各个方面 (如ngStyle和ngClass)。 当然，我们也能编写自己的指令。","categories":[{"name":"Angular2","slug":"Angular2","permalink":"http://xiahl.top/categories/Angular2/"}],"tags":[{"name":"Basics","slug":"Basics","permalink":"http://xiahl.top/tags/Basics/"},{"name":"Architecture","slug":"Architecture","permalink":"http://xiahl.top/tags/Architecture/"},{"name":"Directive","slug":"Directive","permalink":"http://xiahl.top/tags/Directive/"}]},{"title":"Angular2-架构-Databinding","slug":"2016-07-09-angular2-architecture-databinding","date":"2016-07-09T10:26:00.000Z","updated":"2016-07-09T13:44:29.408Z","comments":true,"path":"2016/07/09/2016-07-09-angular2-architecture-databinding/","link":"","permalink":"http://xiahl.top/yelee/2016/07/09/2016-07-09-angular2-architecture-databinding/","excerpt":"em { font-style: normal!important; font-weight: bold; } .l-sub-section { margin: 100px 0 32px 0; padding: 16px 24px; background: #f5f6f7; border-left: 4px solid #8BC34A; border-radius: 4px; } .example-title { color: #fff; padding: 0 16px; font-size: 14px; border-color: #1976D2; background: #1976D2; box-shadow: none; line-height: 32px; margin-bottom: -5px; z-index: 1; position: relative; border-bottom-right-radius: 0; border-bottom-left-radius: 0; border-width: 2px; border-style: solid; border-radius: 4px; } .highlight { margin: 0!important; padding: 0; color: inherit; background: inherit; } 数据绑定 如果没有框架，我们就得自己把数据值推送到HTML控件中，并把用户的反馈转换成动作和值更新。 如果手工写代码来实现这些推/拉逻辑，肯定会枯燥乏味、容易出错，读起来简直是噩梦 —— 写过jQuery的程序员大概都对此深有体会。","text":"em { font-style: normal!important; font-weight: bold; } .l-sub-section { margin: 100px 0 32px 0; padding: 16px 24px; background: #f5f6f7; border-left: 4px solid #8BC34A; border-radius: 4px; } .example-title { color: #fff; padding: 0 16px; font-size: 14px; border-color: #1976D2; background: #1976D2; box-shadow: none; line-height: 32px; margin-bottom: -5px; z-index: 1; position: relative; border-bottom-right-radius: 0; border-bottom-left-radius: 0; border-width: 2px; border-style: solid; border-radius: 4px; } .highlight { margin: 0!important; padding: 0; color: inherit; background: inherit; } 数据绑定 如果没有框架，我们就得自己把数据值推送到HTML控件中，并把用户的反馈转换成动作和值更新。 如果手工写代码来实现这些推/拉逻辑，肯定会枯燥乏味、容易出错，读起来简直是噩梦 —— 写过jQuery的程序员大概都对此深有体会。 Angular支持数据绑定，一种让模板的各部分与组件的各部分相互合作的机制。 我们往模板HTML中添加绑定标记，来告诉Angular如何连接两者。 数据绑定的语法有四种形式。每种形式都有一个方向 —— 从DOM来、到DOM去、双向，就像图中的箭头所示意的。 在范例模板中，我们看到了数据绑定的三种形式： app/hero-list.component.html (节选) 123&lt;div&gt;&#123;&#123;hero.name&#125;&#125;&lt;/div&gt;&lt;hero-detail [hero]=&quot;selectedHero&quot;&gt;&lt;/hero-detail&gt;&lt;div (click)=&quot;selectHero(hero)&quot;&gt;&lt;/div&gt; { { hero.name } }插值表达式：在&lt;div&gt;标签中显示了组件的hero.name属性的值。 [hero]属性绑定：把父组件HeroListComponent的selectedHero传到子组件HeroDetailComponent的hero属性中。 (click)事件绑定：当用户点击英雄的名字时，调用组件的selectHero方法。 双向数据绑定：这是很重要的第四种绑定形式，它在ngModel指令这个单一标记中同时实现了属性绑定和事件绑定的功能。 在HeroListComponent模板中没有双向绑定，下面是一个来自HeroDetailComponent模板的范例(以前没展示过)： 1&lt;input [(ngModel)]=&quot;hero.name&quot;&gt; 在双向绑定中，数据属性的值会从具有属性绑定的组件传到输入框。通过事件绑定，用户的修改被传回到组件，把属性值设置为最新的值。 Angular在每个JavaScript事件周期中一次性处理所有的数据绑定，它会从组件树的根部开始，用深度优先的方式处理。 虽然还不清楚所有细节，但是我们从这些范例中至少弄明白一点：数据绑定在模板与对应组件的交互中扮演了一个很重要的角色。 ...在父组件与子组件的通讯中也同样如此。","categories":[{"name":"Angular2","slug":"Angular2","permalink":"http://xiahl.top/categories/Angular2/"}],"tags":[{"name":"Basics","slug":"Basics","permalink":"http://xiahl.top/tags/Basics/"},{"name":"Architecture","slug":"Architecture","permalink":"http://xiahl.top/tags/Architecture/"},{"name":"Databinding","slug":"Databinding","permalink":"http://xiahl.top/tags/Databinding/"}]},{"title":"Angular2-架构-Metadata","slug":"2016-07-09-angular2-architecture-metadata","date":"2016-07-09T08:04:00.000Z","updated":"2016-07-09T13:45:15.194Z","comments":true,"path":"2016/07/09/2016-07-09-angular2-architecture-metadata/","link":"","permalink":"http://xiahl.top/yelee/2016/07/09/2016-07-09-angular2-architecture-metadata/","excerpt":"em { font-style: normal!important; font-weight: bold; } .l-sub-section { margin: 100px 0 32px 0; padding: 16px 24px; background: #f5f6f7; border-left: 4px solid #8BC34A; border-radius: 4px; } .example-title { color: #fff; padding: 0 16px; font-size: 14px; border-color: #1976D2; background: #1976D2; box-shadow: none; line-height: 32px; margin-bottom: -5px; z-index: 1; position: relative; border-bottom-right-radius: 0; border-bottom-left-radius: 0; border-width: 2px; border-style: solid; border-radius: 4px; } .highlight { margin: 0!important; padding: 0; color: inherit; background: inherit; } 元数据 元数据告诉Angular如何处理一个类。","text":"em { font-style: normal!important; font-weight: bold; } .l-sub-section { margin: 100px 0 32px 0; padding: 16px 24px; background: #f5f6f7; border-left: 4px solid #8BC34A; border-radius: 4px; } .example-title { color: #fff; padding: 0 16px; font-size: 14px; border-color: #1976D2; background: #1976D2; box-shadow: none; line-height: 32px; margin-bottom: -5px; z-index: 1; position: relative; border-bottom-right-radius: 0; border-bottom-left-radius: 0; border-width: 2px; border-style: solid; border-radius: 4px; } .highlight { margin: 0!important; padding: 0; color: inherit; background: inherit; } 元数据 元数据告诉Angular如何处理一个类。 回头看看 HeroListComponent 就会明白：它只是一个类。 一点框架的痕迹也没有，里面完全没有出现 \"Angular\" 的字样。 实际上，它真的 只是一个类 。直到我们 告诉 Angular 这是一个组件为止。 只要把 元数据 附加到这个类，就相当于告诉 Angular ： HeroListComponent 是个组件。 在 TypeScript 中， 装饰器 (decorator) 是附加元数据的简易途径。 下面就是 HeroListComponent 的一些元数据。 app/hero-list.component.ts (元数据) 1234567@Component(&#123; selector: &apos;hero-list&apos;, templateUrl: &apos;app/hero-list.component.html&apos;, directives: [HeroDetailComponent], providers: [HeroService]&#125;)export class HeroesComponent &#123; ... &#125; 这里看到@Component装饰器(毫无悬念的)把紧随其后的类标记成了组件类。 装饰器就是函数，它们通常还带有配置参数。 @Component装饰器能接受一个配置对象，Angular会基于这些信息创建和展示组件及其视图。 来看下@Component中的一些配置项： selector - 一个css选择器，它告诉Angular在父级HTML中寻找一个&lt;hero-list&gt;标签，然后创建该组件，并插入此标签中。 比如，如果应用“壳”(组件)的模板包含如下代码： 1&lt;hero-list&gt;&lt;/hero-list&gt; Angular就会在这些标签中插入HeroListComponent视图的一个实例。 templateUrl - 组件模板的地址，我们在前面见过。 directives - 一个数组，包含此模板需要依赖的组件或指令。 看看模板的最后一行，这表示我们期待Angular把HeroDetailComponent的实例放在&lt;hero-detail&gt;标签中。 但是，只有在directives数组中提及到HeroDetailComponent的时候，Angular才会这么做。 providers - 一个数组，包含组件所依赖的服务所需要的依赖注入提供商。 这是在告诉Angular：该组件的构造函数需要一个HeroService服务，这样组件就可以从服务中获得用来显示英雄列表的那些数据。 我们一会儿就讲到了依赖注入。 @Component函数接收一个配置对象，并把它转换成元数据，附加到组件类的定义上。 Angular在运行期间会找出这份元数据，并由此知道该如何去“做正确的事”。 模板、元数据和组件共同描绘出这个视图。 我们也会沿用类似的风格，用其它元数据装饰器来指导Angular的行为。 比如@Injectable、@Input、@Output和@RouterConfig等是一些最常用的装饰器。 随着对Angular认识的逐步深化，我们也将逐步掌握它们。 这种架构所决定的是：必须往代码中添加元数据，以便Angular知道该做什么。","categories":[{"name":"Angular2","slug":"Angular2","permalink":"http://xiahl.top/categories/Angular2/"}],"tags":[{"name":"Basics","slug":"Basics","permalink":"http://xiahl.top/tags/Basics/"},{"name":"Architecture","slug":"Architecture","permalink":"http://xiahl.top/tags/Architecture/"},{"name":"Metadata","slug":"Metadata","permalink":"http://xiahl.top/tags/Metadata/"}]},{"title":"Angular2-架构-Template","slug":"2016-07-09-angular2-architecture-template","date":"2016-07-09T07:03:00.000Z","updated":"2016-07-09T13:45:54.381Z","comments":true,"path":"2016/07/09/2016-07-09-angular2-architecture-template/","link":"","permalink":"http://xiahl.top/yelee/2016/07/09/2016-07-09-angular2-architecture-template/","excerpt":"em { font-style: normal!important; font-weight: bold; } .l-sub-section { margin: 100px 0 32px 0; padding: 16px 24px; background: #f5f6f7; border-left: 4px solid #8BC34A; border-radius: 4px; } .example-title { color: #fff; padding: 0 16px; font-size: 14px; border-color: #1976D2; background: #1976D2; box-shadow: none; line-height: 32px; margin-bottom: -5px; z-index: 1; position: relative; border-bottom-right-radius: 0; border-bottom-left-radius: 0; border-width: 2px; border-style: solid; border-radius: 4px; } .highlight { margin: 0!important; padding: 0; color: inherit; background: inherit; } 模板 我们通过组件的自带的模板来定义视图。模板以HTML形式存在，用来告诉Angular如何渲染组件(视图)。 多数情况下，模板看起来很像标准HTML……当然也有一小点儿奇怪的地方。下面是HeroList组件的一个模板。","text":"em { font-style: normal!important; font-weight: bold; } .l-sub-section { margin: 100px 0 32px 0; padding: 16px 24px; background: #f5f6f7; border-left: 4px solid #8BC34A; border-radius: 4px; } .example-title { color: #fff; padding: 0 16px; font-size: 14px; border-color: #1976D2; background: #1976D2; box-shadow: none; line-height: 32px; margin-bottom: -5px; z-index: 1; position: relative; border-bottom-right-radius: 0; border-bottom-left-radius: 0; border-width: 2px; border-style: solid; border-radius: 4px; } .highlight { margin: 0!important; padding: 0; color: inherit; background: inherit; } 模板 我们通过组件的自带的模板来定义视图。模板以HTML形式存在，用来告诉Angular如何渲染组件(视图)。 多数情况下，模板看起来很像标准HTML……当然也有一小点儿奇怪的地方。下面是HeroList组件的一个模板。 app/hero-list.component.html 123456&lt;h2&gt;Hero List&lt;/h2&gt;&lt;p&gt;&lt;i&gt;Pick a hero from the list&lt;/i&gt;&lt;/p&gt;&lt;div *ngFor=\"let hero of heroes\" (click)=\"selectHero(hero)\"&gt; &#123;&#123;hero.name&#125;&#125;&lt;/div&gt;&lt;hero-detail *ngIf=\"selectedHero\" [hero]=\"selectedHero\"&gt;&lt;/hero-detail&gt; 我们认得&lt;h2&gt;和&lt;div&gt;。 但另外那些标签/属性是我们在学校里从没听过的。 *ngFor、、(click)、[hero]和&lt;hero-detail&gt;都是什么东西？ 这些都是Angular的模板语法例子。 我们会逐渐习惯这些语法，甚至会学着爱上它。 一会儿再解释它。 在开始前，先仔细看看最后那行。 &lt;hero-detail&gt;是一个自定义元素的标签，用来表示HeroDetailComponent组件。 HeroDetailComponent跟以前回顾过的HeroListComponent是不同的组件。 HeroDetailComponent(未展示代码)用于展现一个特定英雄的情况，这个英雄是用户从HeroListComponent列表中选择的。 HeroDetailComponent是HeroListComponent的子组件。 注意：&lt;hero-detail&gt;竟如此和谐的出现在那些已知的HTML元素中。 在同一个格局中，我们能混用……也将继续混用……自定义组件与原生HTML。 在这种方式下，我们能够，并且将会组合出复杂的组件树，用来构建那些丰富多彩的应用。","categories":[{"name":"Angular2","slug":"Angular2","permalink":"http://xiahl.top/categories/Angular2/"}],"tags":[{"name":"Basics","slug":"Basics","permalink":"http://xiahl.top/tags/Basics/"},{"name":"Architecture","slug":"Architecture","permalink":"http://xiahl.top/tags/Architecture/"},{"name":"Template","slug":"Template","permalink":"http://xiahl.top/tags/Template/"}]},{"title":"Angular2-架构-Component","slug":"2016-07-09-angular2-architecture-component","date":"2016-07-09T05:48:00.000Z","updated":"2016-07-09T13:44:12.760Z","comments":true,"path":"2016/07/09/2016-07-09-angular2-architecture-component/","link":"","permalink":"http://xiahl.top/yelee/2016/07/09/2016-07-09-angular2-architecture-component/","excerpt":"em { font-style: normal!important; font-weight: bold; } .l-sub-section { margin: 100px 0 32px 0; padding: 16px 24px; background: #f5f6f7; border-left: 4px solid #8BC34A; border-radius: 4px; } .example-title { color: #fff; padding: 0 16px; font-size: 14px; border-color: #1976D2; background: #1976D2; box-shadow: none; line-height: 32px; margin-bottom: -5px; z-index: 1; position: relative; border-bottom-right-radius: 0; border-bottom-left-radius: 0; border-width: 2px; border-style: solid; border-radius: 4px; } 组件 组件控制屏幕中巴掌大的那么一小块地方，这块地方被称之为视图。应用的“外壳”包括一些导航链接、英雄列表、英雄编辑器…… 它们都是由组件控制的视图。","text":"em { font-style: normal!important; font-weight: bold; } .l-sub-section { margin: 100px 0 32px 0; padding: 16px 24px; background: #f5f6f7; border-left: 4px solid #8BC34A; border-radius: 4px; } .example-title { color: #fff; padding: 0 16px; font-size: 14px; border-color: #1976D2; background: #1976D2; box-shadow: none; line-height: 32px; margin-bottom: -5px; z-index: 1; position: relative; border-bottom-right-radius: 0; border-bottom-left-radius: 0; border-width: 2px; border-style: solid; border-radius: 4px; } 组件 组件控制屏幕中巴掌大的那么一小块地方，这块地方被称之为视图。应用的“外壳”包括一些导航链接、英雄列表、英雄编辑器…… 它们都是由组件控制的视图。 我们在类中定义组件的应用逻辑(它被用来为视图提供支持)。组件通过一些由属性和方法组成的API与视图交互。 比如，在HeroListComponent组件中，可能有一个heroes属性，它返回一个英雄的数组，而这些数据是从服务中取得的。它可能还有一个selectHero()方法，当用户从列表中点击一个英雄时，用它来设置selectedHero属性。它可能是像这样的一个类： app/hero-list.component.ts export class HeroListComponent implements OnInit { heroes: Hero[]; selectedHero: Hero; constructor(private service: HeroService) { } ngOnInit() { this.heroes = this.service.getHeroes(); } selectHero(hero: Hero) { this.selectedHero = hero; } } 当用户在这个应用中“移动”时，Angular会创建、更新和销毁组件。 开发人员可以通过生命周期钩子在组件生命周期的各个时间点上插入自己的操作。 我们不会在这个例子中展示这些钩子，先在脑子中留个记号，将来再翻出来讲。 你可能会好奇，谁来调用那个构造函数？谁为服务提供参数？ 目前，你只要信任Angular会在合适的时机调用构造函数，并在需要的时候给出一个合适的HeroService实例。","categories":[{"name":"Angular2","slug":"Angular2","permalink":"http://xiahl.top/categories/Angular2/"}],"tags":[{"name":"Basics","slug":"Basics","permalink":"http://xiahl.top/tags/Basics/"},{"name":"Architecture","slug":"Architecture","permalink":"http://xiahl.top/tags/Architecture/"},{"name":"Component","slug":"Component","permalink":"http://xiahl.top/tags/Component/"}]},{"title":"Angular2-架构-Module","slug":"2016-07-08-angular2-architecture-module","date":"2016-07-08T13:54:00.000Z","updated":"2016-07-09T13:43:17.558Z","comments":true,"path":"2016/07/08/2016-07-08-angular2-architecture-module/","link":"","permalink":"http://xiahl.top/yelee/2016/07/08/2016-07-08-angular2-architecture-module/","excerpt":"em { font-style: normal!important; font-weight: bold; } .l-sub-section { margin: 100px 0 32px 0; padding: 16px 24px; background: #f5f6f7; border-left: 4px solid #8BC34A; border-radius: 4px; } .example-title { color: #fff; padding: 0 16px; font-size: 14px; border-color: #1976D2; background: #1976D2; box-shadow: none; line-height: 32px; margin-bottom: -5px; z-index: 1; position: relative; border-bottom-right-radius: 0; border-bottom-left-radius: 0; border-width: 2px; border-style: solid; border-radius: 4px; } Angular 2 是一个用 HTML 和 JavaScript 构建客户端应用的框架。","text":"em { font-style: normal!important; font-weight: bold; } .l-sub-section { margin: 100px 0 32px 0; padding: 16px 24px; background: #f5f6f7; border-left: 4px solid #8BC34A; border-radius: 4px; } .example-title { color: #fff; padding: 0 16px; font-size: 14px; border-color: #1976D2; background: #1976D2; box-shadow: none; line-height: 32px; margin-bottom: -5px; z-index: 1; position: relative; border-bottom-right-radius: 0; border-bottom-left-radius: 0; border-width: 2px; border-style: solid; border-radius: 4px; } Angular 2 是一个用 HTML 和 JavaScript 构建客户端应用的框架。 该框架包括一系列紧密合作的库，有些是核心库，有些是可选库。 我们这样写应用程序：用带 Angular 扩展语法的 HTML 写 模板 ，用 组件 类管理这些模板，用 服务 添加应用逻辑，用根组件完成 Angular 启动 。 Angular 在浏览器中接管、展现应用的内容，并根据我们提供的操作指令响应用户的交互。 当然，这只是冰山一角。随着内容的深入，我们还会学到更多的细节。 我们先来看看宏观图景。 这个架构图展现了 Angular 应用中的 8 个主要构造块： 模块 (Module) 组件 (Component) 模板 (Template) 元数据 (Metadata) 数据绑定 (Data Binding) 指令 (Directive) 服务 (Service) 依赖注入 (Dependency Injection) 掌握这 8 点，我们就可以开始使用 Angular 2 编写应用程序了。 本章所引用的代码可以从这个 在线例子 中找到。 模块 Angular 应用是模块化的。 应用程序通常都是由很多 模块 组装而成的。 典型的模块是一个内聚的代码块，用以实现单一的目的。 在这些代码中，模块会 导出 一些东西，最典型的就是类。 模块是可选的 我们强烈推荐使用模块化设计。 TypeScript 对 ES2015 的模块语法支持很好，文档假设我们会利用这些语法来应用模块化方案。这就是为什么要把 模块 列为基本构造块之一。 Angular 本身并不需要模块化方案，也不需要使用这种特定的语法。如果你不喜欢，可以不用它。 就算你避开 import 和 export 语句，每章也会为你提供很多 ( 知识 ) 。 在 JavaScript( 你可以从页面顶部的组合框选择 JavaScript) 分支下，可以找到如何安装和组织的线索。 它示范了如何用老版本的 JavaScript 语言，在没有模块化系统支持的情况下进行 Angular 2 应用程序的开发。 我们遇到的第一个模块，很可能就是用于导出 组件 类的那个。 组件是 Angular 中的基本构造块之一，我们会编写很多组件。我们将会在下一段继续讨论组件。 目前，只要知道组件类是从模块中导出一种东西就行了。 大多数应用都有一个 AppComponent 。按照惯例，它位于一个名叫 app.component.ts 的文件中。 打开它，我们将会看到一个 export 语句，就像这样： app/app.component.ts (节选) export class AppComponent { } export 语句告诉 TypeScript ：这是一个模块，其中 AppComponent 类是公开的，可以被应用程序中的其它模块访问。 当需要引用 AppComponent 时，要像这样 导入 它： app/main.ts (节选) import { AppComponent } from './app.component'; import 语句告诉系统，它能从附近名叫 app.component 的文件中获得 AppComponent 组件。 模块名 ( 又叫模块 ID) 通常和去掉扩展名后的文件名相同。 模块库 有些模块是其它模块的库。 Angular本身就是通过npm包发布的一组模块库，它们都以@angular为前缀。 每个Angular库中都包含一个封装桶模块。 它实际上是一个公开的外观层(façade)，囊括了一些逻辑相关的私有模块。 @angular/core库是主要的Angular模块库，从这里能获得大部分需要的东西。 还有另一些重要的Angular模块库，比如@angular/common、@angular/router 和 @angular/http。 从Angular模块库中导入所需内容的方式都差不多。比如，从@angular/core中导入Angular Component函数的代码是这样的： import { Component } from '@angular/core'; 比较一下它和前面导入AppComponent时的语法。 import { AppComponent } from './app.component'; 注意到不同之处了吗？第一种，从Angular模块库中导入时，import语句引用的是“裸”模块名 —— @angular/core —— 不带路径前缀。 当我们从自己的文件中导入时，模块名中带有路径前缀。在这个例子中，前缀是一个相对路径(./)。这表示源模块和想导入它的模块位于同一个目录中(./)。如果源模块位于其它位置，我们还可以向上引用应用目录结构中的任意路径(如../../../somewhere/)。 这里导入和导出使用的是ECMAScript 2015 (ES2015)的语法。要学习关于此语法的更多知识，参见这里，在网上很多别的地方也能找到相关资料。 “模块加载与导入”背后的基础设施是一个很重要的话题，但它不在Angular简介的范围内。目前的焦点是我们的应用程序，只需要知道import和export就够了。 这里的关键点是： Angular应用是由模块组成的。 模块导出一些东西 —— 类，函数，值，供其它模块导入。 首选的写法是把应用写成一组模块，每个模块只导出一样东西。 我们写的第一个模块将会导出一个组件。","categories":[{"name":"Angular2","slug":"Angular2","permalink":"http://xiahl.top/categories/Angular2/"}],"tags":[{"name":"Basics","slug":"Basics","permalink":"http://xiahl.top/tags/Basics/"},{"name":"Architecture","slug":"Architecture","permalink":"http://xiahl.top/tags/Architecture/"},{"name":"Module","slug":"Module","permalink":"http://xiahl.top/tags/Module/"}]},{"title":"markdown编辑器例子-02","slug":"2016-07-08-editor-markdown-02","date":"2016-07-08T13:40:00.000Z","updated":"2016-07-08T13:41:43.841Z","comments":true,"path":"2016/07/08/2016-07-08-editor-markdown-02/","link":"","permalink":"http://xiahl.top/yelee/2016/07/08/2016-07-08-editor-markdown-02/","excerpt":"Markdown Demo","text":"Markdown Demo 主要特性 支持“标准”Markdown / CommonMark和Github风格的语法，也可变身为代码编辑器； 支持实时预览、图片（跨域）上传、预格式文本/代码/表格插入、代码折叠、搜索替换、只读模式、自定义样式主题和多语言语法高亮等功能； 支持ToC（Table of Contents）、Emoji表情、Task lists、@链接等Markdown扩展语法； 支持TeX科学公式（基于KaTeX）、流程图 Flowchart 和 时序图 Sequence Diagram; 支持识别和解析HTML标签，并且支持自定义过滤标签解析，具有可靠的安全性和几乎无限的扩展性； 支持 AMD / CMD 模块化加载（支持 Require.js &amp; Sea.js），并且支持自定义扩展插件； 兼容主流的浏览器（IE8+）和Zepto.js，且支持iPad等平板设备； 支持自定义主题样式； Editor.md 目录 (Table of Contents) [TOCM] [TOC] Heading 1Heading 2Heading 3Heading 4Heading 5Heading 6Heading 1 link Heading linkHeading 2 link Heading linkHeading 3 link Heading linkHeading 4 link Heading link Heading link Heading linkHeading 5 link Heading linkHeading 6 link Heading link标题（用底线的形式）Heading (underline)This is an H1This is an H2字符效果和横线等 删除线 删除线（开启识别HTML标签时）斜体字 斜体字粗体 粗体粗斜体 粗斜体 上标：X2，下标：O2 缩写(同HTML的abbr标签) 即更长的单词或短语的缩写形式，前提是开启识别HTML标签时，已默认开启 The HTML specification is maintained by the W3C. 引用 Blockquotes 引用文本 Blockquotes 引用的行内混合 Blockquotes 引用：如果想要插入空白换行即&lt;br /&gt;标签，在插入处先键入两个以上的空格然后回车即可，普通链接。 锚点与链接 Links普通链接 普通链接带标题 直接链接：https://github.com 锚点链接 GFM a-tail link @pandao @pandao 多语言代码高亮 Codes行内代码 Inline code执行命令：npm install marked 缩进风格即缩进四个空格，也做为实现类似&lt;pre&gt;预格式化文本(Preformatted Text)的功能。 &lt;?php echo &quot;Hello world!&quot;; ?&gt; 预格式化文本： | First Header | Second Header | | ------------- | ------------- | | Content Cell | Content Cell | | Content Cell | Content Cell | JS代码 123456789101112131415161718192021222324252627282930313233343536function test()&#123; console.log(\"Hello world!\");&#125; (function()&#123; var box = function()&#123; return box.fn.init(); &#125;; box.prototype = box.fn = &#123; init : function()&#123; console.log('box.init()'); return this; &#125;, add : function(str)&#123; alert(\"add\", str); return this; &#125;, remove : function(str)&#123; alert(\"remove\", str); return this; &#125; &#125;; box.fn.init.prototype = box.fn; window.box =box;&#125;)();var testBox = box();testBox.add(\"jQuery\").remove(\"jQuery\"); HTML代码 HTML codes12345678910&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;mate charest=\"utf-8\" /&gt; &lt;title&gt;Hello world!&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Hello world!&lt;/h1&gt; &lt;/body&gt;&lt;/html&gt; 图片 ImagesImage: Follow your heart. 图为：厦门白城沙滩 图片加链接 (Image + Link)： 图为：李健首张专辑《似水流年》封面 列表 Lists无序列表（减号）Unordered Lists (-) 列表一 列表二 列表三 无序列表（星号）Unordered Lists (*) 列表一 列表二 列表三 无序列表（加号和嵌套）Unordered Lists (+) 列表一 列表二 列表二-1 列表二-2 列表二-3 列表三 列表一 列表二 列表三 有序列表 Ordered Lists (-) 第一行 第二行 第三行 GFM task list [x] GFM task list 1 [x] GFM task list 2 [ ] GFM task list 3 [ ] GFM task list 3-1 [ ] GFM task list 3-2 [ ] GFM task list 3-3 [ ] GFM task list 4 [ ] GFM task list 4-1 [ ] GFM task list 4-2 绘制表格 Tables 项目 价格 数量 计算机 $1600 5 手机 $12 12 管线 $1 234 First Header Second Header Content Cell Content Cell Content Cell Content Cell First Header Second Header Content Cell Content Cell Content Cell Content Cell Function name Description help() Display the help window. destroy() Destroy your computer! Left-Aligned Center Aligned Right Aligned col 3 is some wordy text $1600 col 2 is centered $12 zebra stripes are neat $1 Item Value Computer $1600 Phone $12 Pipe $1 特殊符号 HTML Entities Codes&copy; &amp; &uml; &trade; &iexcl; &pound;&amp; &lt; &gt; &yen; &euro; &reg; &plusmn; &para; &sect; &brvbar; &macr; &laquo; &middot; X&sup2; Y&sup3; &frac34; &frac14; &times; &divide; &raquo; 18&ordm;C &quot; &apos; Emoji表情 :smiley: Blockquotes :star: GFM task lists &amp; Emoji &amp; fontAwesome icon emoji &amp; editormd logo emoji :editormd-logo-5x: [x] :smiley: @mentions, :smiley: #refs, links, formatting, and tags supported :editormd-logo:; [x] list syntax required (any unordered or ordered list supported) :editormd-logo-3x:; [x] [ ] :smiley: this is a complete item :smiley:; [ ] []this is an incomplete item test link :fa-star: @pandao; [ ] [ ]this is an incomplete item :fa-star: :fa-gear:; [ ] :smiley: this is an incomplete item test link :fa-star: :fa-gear:; [ ] :smiley: this is :fa-star: :fa-gear: an incomplete item test link; 反斜杠 Escape*literal asterisks* 科学公式 TeX(KaTeX)$$E=mc^2$$ 行内的公式$$E=mc^2$$行内的公式，行内的$$E=mc^2$$公式。 $$(\\sqrt{3x-1}+(1+x)^2)$$ $$\\sin(\\alpha)^{\\theta}=\\sum_{i=0}^{n}(x^i + \\cos(f))$$ 多行公式： 12345\\displaystyle\\left( \\sum\\_&#123;k=1&#125;^n a\\_k b\\_k \\right)^2\\leq\\left( \\sum\\_&#123;k=1&#125;^n a\\_k^2 \\right)\\left( \\sum\\_&#123;k=1&#125;^n b\\_k^2 \\right) 123456789\\displaystyle \\frac&#123;1&#125;&#123; \\Bigl(\\sqrt&#123;\\phi \\sqrt&#123;5&#125;&#125;-\\phi\\Bigr) e^&#123; \\frac25 \\pi&#125;&#125; = 1+\\frac&#123;e^&#123;-2\\pi&#125;&#125; &#123;1+\\frac&#123;e^&#123;-4\\pi&#125;&#125; &#123; 1+\\frac&#123;e^&#123;-6\\pi&#125;&#125; &#123;1+\\frac&#123;e^&#123;-8\\pi&#125;&#125; &#123;1+\\cdots&#125; &#125; &#125; &#125; 123f(x) = \\int_&#123;-\\infty&#125;^\\infty \\hat f(\\xi)\\,e^&#123;2 \\pi i \\xi x&#125; \\,d\\xi 绘制流程图 Flowchart12345678st=&gt;start: 用户登陆op=&gt;operation: 登陆操作cond=&gt;condition: 登陆成功 Yes or No?e=&gt;end: 进入后台st-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op 绘制序列图 Sequence Diagram1234Andrew-&gt;China: Says Hello Note right of China: China thinks\\nabout it China--&gt;Andrew: How are you? Andrew-&gt;&gt;China: I am good thanks! End","categories":[{"name":"MarkDown","slug":"MarkDown","permalink":"http://xiahl.top/categories/MarkDown/"}],"tags":[{"name":"MarkDown","slug":"MarkDown","permalink":"http://xiahl.top/tags/MarkDown/"}]},{"title":"markdown编辑器介绍-01","slug":"2016-07-08-editor-markdown-01","date":"2016-07-08T13:16:00.000Z","updated":"2016-07-08T13:42:07.983Z","comments":true,"path":"2016/07/08/2016-07-08-editor-markdown-01/","link":"","permalink":"http://xiahl.top/yelee/2016/07/08/2016-07-08-editor-markdown-01/","excerpt":"Markdown语法教程","text":"Markdown语法教程 Markdown语法教程 (Markdown syntax tutorial) Markdown Syntax Mastering Markdown Markdown Basics GitHub Flavored Markdown Markdown 语法说明（简体中文） Markdown 語法說明（繁體中文） 键盘快捷键 (Keyboard shortcuts) If Editor.md code editor is on focus, you can use keyboard shortcuts. Keyboard shortcuts (键盘快捷键) 说明 Description F9 切换实时预览 Switch watch/unwatch F10 全屏HTML预览(按 Shift + ESC 退出) Full preview HTML (Press Shift + ESC exit) F11 切换全屏状态 Switch fullscreen (Press ESC exit) Ctrl + 1~6 / Command + 1~6 插入标题1~6 Insert heading 1~6 Ctrl + A / Command + A 全选 Select all Ctrl + B / Command + B 插入粗体 Insert bold Ctrl + D / Command + D 插入日期时间 Insert datetime Ctrl + E / Command + E 插入Emoji符号 Insert &#58;emoji&#58; Ctrl + F / Command + F 查找/搜索 Start searching Ctrl + G / Command + G 切换到下一个搜索结果项 Find next search results Ctrl + H / Command + H 插入水平线 Insert horizontal rule Ctrl + I / Command + I 插入斜体 Insert italic Ctrl + K / Command + K 插入行内代码 Insert inline code Ctrl + L / Command + L 插入链接 Insert link Ctrl + U / Command + U 插入无序列表 Insert unordered list Ctrl + Q 代码折叠切换 Switch code fold Ctrl + Z / Command + Z 撤销 Undo Ctrl + Y / Command + Y 重做 Redo Ctrl + Shift + A 插入@链接 Insert &#64;link Ctrl + Shift + C 插入行内代码 Insert inline code Ctrl + Shift + E 打开插入Emoji表情对话框 Open emoji dialog Ctrl + Shift + F / Command + Option + F 替换 Replace Ctrl + Shift + G / Shift + Command + G 切换到上一个搜索结果项 Find previous search results Ctrl + Shift + H 打开HTML实体字符对话框 Open HTML Entities dialog Ctrl + Shift + I 插入图片 Insert image &#33;[]&#40;&#41; Ctrl + Shift + K 插入TeX(KaTeX)公式符号 Insert TeX(KaTeX) symbol &#36;&#36;TeX&#36;&#36; Ctrl + Shift + L 打开插入链接对话框 Open link dialog Ctrl + Shift + O 插入有序列表 Insert ordered list Ctrl + Shift + P 打开插入PRE对话框 Open Preformatted text dialog Ctrl + Shift + Q 插入引用 Insert blockquotes Ctrl + Shift + R / Shift + Command + Option + F 全部替换 Replace all Ctrl + Shift + S 插入删除线 Insert strikethrough Ctrl + Shift + T 打开插入表格对话框 Open table dialog Ctrl + Shift + U 将所选文字转成大写 Selection text convert to uppercase Shift + Alt + C 插入```代码 Insert code blocks (```) Shift + Alt + H 打开使用帮助对话框 Open help dialog Shift + Alt + L 将所选文本转成小写 Selection text convert to lowercase Shift + Alt + P 插入分页符 Insert page break Alt + L 将所选文本转成小写 Selection text convert to lowercase Shift + Alt + U 将所选的每个单词的首字母转成大写 Selection words first letter convert to Uppercase Ctrl + Shift + Alt + C 打开插入代码块对话框层 Open code blocks dialog Ctrl + Shift + Alt + I 打开插入图片对话框层 Open image dialog Ctrl + Shift + Alt + U 将所选文本的第一个首字母转成大写 Selection text first letter convert to uppercase Ctrl + Alt + G 跳转到指定的行 Goto line Emoji表情参考 (Emoji reference) Github emoji Twitter Emoji (Twemoji) FontAwesome icons emoji 流程图参考 (Flowchart reference)http://adrai.github.io/flowchart.js/ 时序图参考 (SequenceDiagram reference)http://bramp.github.io/js-sequence-diagrams/ TeX/LaTeX referencehttp://meta.wikimedia.org/wiki/Help:Formula","categories":[{"name":"MarkDown","slug":"MarkDown","permalink":"http://xiahl.top/categories/MarkDown/"}],"tags":[{"name":"MarkDown","slug":"MarkDown","permalink":"http://xiahl.top/tags/MarkDown/"}]},{"title":"更新自身的npm","slug":"update-npm","date":"2016-07-07T15:12:00.000Z","updated":"2016-07-08T12:57:07.777Z","comments":true,"path":"2016/07/07/update-npm/","link":"","permalink":"http://xiahl.top/yelee/2016/07/07/update-npm/","excerpt":"如果想升级npm自身，需要在nodejs的安装目录下局部升级npm。","text":"如果想升级npm自身，需要在nodejs的安装目录下局部升级npm。 123D: cd &quot;Program Files\\nodejs&quot;npm update npm","categories":[{"name":"NPM","slug":"NPM","permalink":"http://xiahl.top/categories/NPM/"}],"tags":[{"name":"Node","slug":"Node","permalink":"http://xiahl.top/tags/Node/"},{"name":"npm","slug":"npm","permalink":"http://xiahl.top/tags/npm/"}]}]}